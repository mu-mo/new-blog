[{"title":"docker 实践","url":"http://mu-mo.top/2018/05/08/docker/docker实践/","content":"<p>摘录来源：<a href=\"https://legacy.gitbook.com/book/yeasy/docker_practice/details\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a></p>\n<p>欢迎大家添加自己的实例  (email: <a href=\"mailto:yun_tofar@qq.com\" target=\"_blank\" rel=\"noopener\">yun_tofar@qq.com</a>)</p>\n<h2 id=\"镜像制作\"><a href=\"#镜像制作\" class=\"headerlink\" title=\"镜像制作\"></a>镜像制作</h2><p>go 常用镜像制作：</p>\n<p>注：在当前目录下的 <code>src</code> 中存放你常用的包，将其复制到/app目录下，以后只需将自己的项目放在这里即可</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span> maintainer=\"yun_tofar@qq.com\"</span><br><span class=\"line\">LABEL version=\"1.0\"</span><br><span class=\"line\">LABEL description=\"go echo image\"</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">ENV GOPATH \"/app\"</span><br><span class=\"line\">COPY . /app</span><br></pre></td></tr></table></figure>\n<p>Python 镜像制作：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span> maintainer=\"yun_tofar@qq.com\"</span><br><span class=\"line\">LABEL version=\"1.0\"</span><br><span class=\"line\">LABEL description=\"python image\"</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY requirements.txt /app/requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\">RUN pip install --no-cache-dir -r requirements.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose-实例\"><a href=\"#docker-compose-实例\" class=\"headerlink\" title=\"docker-compose 实例\"></a>docker-compose 实例</h2><h4 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">weixin_service/web:1.0.0</span></span><br><span class=\"line\"><span class=\"attr\">      dns:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">./log/web:/app/log</span></span><br><span class=\"line\"><span class=\"attr\">      ports:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">\"6000:6000\"</span></span><br><span class=\"line\"><span class=\"attr\">      environment:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">ENV=dev</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">APP_PORT=6000</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">APP_HOST=0.0.0.0</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">APPID=&lt;appid&gt;</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">APP_SECRET=&lt;app_secret&gt;</span></span><br><span class=\"line\"><span class=\"attr\">      container_name:</span> <span class=\"string\">bingyan_weixin_service_web</span></span><br><span class=\"line\"><span class=\"attr\">      entrypoint:</span> <span class=\"string\">[\"bin/main\"]</span></span><br><span class=\"line\"><span class=\"attr\">      depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">    daemon:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">weixin_service/daemon:1.0.0</span></span><br><span class=\"line\"><span class=\"attr\">      dns:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">./log/daemon:/app/log</span></span><br><span class=\"line\"><span class=\"attr\">      environment:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">ENV=dev</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">APPID=&lt;appid&gt;</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">APP_SECRET=&lt;app_secret&gt;</span></span><br><span class=\"line\"><span class=\"attr\">      container_name:</span> <span class=\"string\">bingyan_weixin_service_daemon</span></span><br><span class=\"line\"><span class=\"attr\">      entrypoint:</span> <span class=\"string\">[\"bin/main\"]</span></span><br><span class=\"line\"><span class=\"attr\">      depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">    mongo:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">      expose:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">\"27017\"</span></span><br><span class=\"line\"><span class=\"attr\">      environment:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">      container_name:</span> <span class=\"string\">youjie_mongo</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">./db:/data/db</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br><span class=\"line\"><span class=\"attr\">    redis:</span></span><br><span class=\"line\"><span class=\"attr\">      image:</span> <span class=\"attr\">redis:4.0.8</span></span><br><span class=\"line\"><span class=\"attr\">      container_name:</span> <span class=\"string\">weixin_service_redis</span></span><br><span class=\"line\"><span class=\"attr\">      expose:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">\"6379\"</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br><span class=\"line\"><span class=\"attr\">      environment:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br></pre></td></tr></table></figure>\n<p>配合镜像如下：</p>\n<p>web：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> molscar/go1.<span class=\"number\">10</span>_echo:v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span> maintainer=\"yun_tofar@qq.com\"</span><br><span class=\"line\">LABEL version=\"1.0\"</span><br><span class=\"line\">LABEL description=\"weixin service web\"</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY ./src src</span><br><span class=\"line\">ENV GOPATH \"/app\"</span><br><span class=\"line\">RUN go build -o bin/main src/main.go &amp;&amp; \\</span><br><span class=\"line\">    rm -r src</span><br></pre></td></tr></table></figure>\n<p>daemon:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span> maintainer=\"yun_tofar@qq.com\"</span><br><span class=\"line\">LABEL version=\"1.0\"</span><br><span class=\"line\">LABEL description=\"weixin service daemon\"</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY ./src src</span><br><span class=\"line\">ENV GOPATH \"/app\"</span><br><span class=\"line\">RUN go get -d ./src/...</span><br><span class=\"line\">RUN  go build -o bin/main src/main.go &amp;&amp; \\</span><br><span class=\"line\">    rm -r src</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h4><p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">        build:</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">./log:/app/log</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">\"3031:3031\"</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">WEB_ENV=dev</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">PORT=3031</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">HOST=0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> <span class=\"string\">sanic_scaffold_app</span></span><br><span class=\"line\"><span class=\"attr\">        depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">[\"-m\",</span> <span class=\"string\">\"sanic\"</span><span class=\"string\">,</span> <span class=\"string\">\"main.app\"</span><span class=\"string\">,</span> <span class=\"string\">\"--host=0.0.0.0\"</span><span class=\"string\">,</span> <span class=\"string\">\"--port=3031\"</span><span class=\"string\">,</span> <span class=\"string\">\"--workers=4\"</span><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">        entrypoint:</span> <span class=\"string\">[\"python\"]</span></span><br><span class=\"line\"><span class=\"attr\">    mongo:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"attr\">mongo:3.6.3</span></span><br><span class=\"line\"><span class=\"attr\">        expose:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">\"27017\"</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> <span class=\"string\">sanic_scaffold_mongo</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">./db:/data/db</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br></pre></td></tr></table></figure>\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span> maintainer=\"yun_tofar@qq.com\"</span><br><span class=\"line\">LABEL version=\"1.0\"</span><br><span class=\"line\">LABEL description=\"python sanic scaffold\"</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app/src</span><br><span class=\"line\">COPY ./src .</span><br><span class=\"line\">RUN pip install --no-cache-dir -r requirements.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"摘录\"><a href=\"#摘录\" class=\"headerlink\" title=\"摘录\"></a>摘录</h2><h3 id=\"Dockerfile-最佳实践\"><a href=\"#Dockerfile-最佳实践\" class=\"headerlink\" title=\"Dockerfile 最佳实践\"></a>Dockerfile 最佳实践</h3><p>本附录是笔者对 Docker 官方文档中 <a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\" target=\"_blank\" rel=\"noopener\">Best practices for writing Dockerfiles</a> 的理解与翻译。</p>\n<h3 id=\"一般性的指南和建议\"><a href=\"#一般性的指南和建议\" class=\"headerlink\" title=\"一般性的指南和建议\"></a>一般性的指南和建议</h3><h4 id=\"容器应该是短暂的\"><a href=\"#容器应该是短暂的\" class=\"headerlink\" title=\"容器应该是短暂的\"></a>容器应该是短暂的</h4><p>通过 <code>Dockerfile</code> 构建的镜像所启动的容器应该尽可能短暂（生命周期短）。「短暂」意味着可以停止和销毁容器，并且创建一个新容器并部署好所需的设置和配置工作量应该是极小的。</p>\n<h4 id=\"使用-dockerignore-文件\"><a href=\"#使用-dockerignore-文件\" class=\"headerlink\" title=\"使用 .dockerignore 文件\"></a>使用 <code>.dockerignore</code> 文件</h4><p>使用 <code>Dockerfile</code> 构建镜像时最好是将 <code>Dockerfile</code> 放置在一个新建的空目录下。然后将构建镜像所需要的文件添加到该目录中。为了提高构建镜像的效率，你可以在目录下新建一个 <code>.dockerignore</code> 文件来指定要忽略的文件和目录。<code>.dockerignore</code> 文件的排除模式语法和 Git 的 <code>.gitignore</code> 文件相似。</p>\n<h4 id=\"使用多阶段构建\"><a href=\"#使用多阶段构建\" class=\"headerlink\" title=\"使用多阶段构建\"></a>使用多阶段构建</h4><p>在 <code>Docker 17.05</code> 以上版本中，你可以使用 <a href=\"https://yeasy.gitbooks.io/docker_practice/content/image/multistage-builds.html\" target=\"_blank\" rel=\"noopener\">多阶段构建</a> 来减少所构建镜像的大小。</p>\n<h4 id=\"避免安装不必要的包\"><a href=\"#避免安装不必要的包\" class=\"headerlink\" title=\"避免安装不必要的包\"></a>避免安装不必要的包</h4><p>为了降低复杂性、减少依赖、减小文件大小、节约构建时间，你应该避免安装任何不必要的包。例如，不要在数据库镜像中包含一个文本编辑器。</p>\n<h4 id=\"一个容器只运行一个进程\"><a href=\"#一个容器只运行一个进程\" class=\"headerlink\" title=\"一个容器只运行一个进程\"></a>一个容器只运行一个进程</h4><p>应该保证在一个容器中只运行一个进程。将多个应用解耦到不同容器中，保证了容器的横向扩展和复用。例如 web 应用应该包含三个容器：web应用、数据库、缓存。</p>\n<p>如果容器互相依赖，你可以使用 <a href=\"https://yeasy.gitbooks.io/docker_practice/content/network/linking.html\" target=\"_blank\" rel=\"noopener\">Docker 自定义网络</a> 来把这些容器连接起来。</p>\n<h4 id=\"镜像层数尽可能少\"><a href=\"#镜像层数尽可能少\" class=\"headerlink\" title=\"镜像层数尽可能少\"></a>镜像层数尽可能少</h4><p>你需要在 <code>Dockerfile</code> 可读性（也包括长期的可维护性）和减少层数之间做一个平衡。</p>\n<h4 id=\"将多行参数排序\"><a href=\"#将多行参数排序\" class=\"headerlink\" title=\"将多行参数排序\"></a>将多行参数排序</h4><p>将多行参数按字母顺序排序（比如要安装多个包时）。这可以帮助你避免重复包含同一个包，更新包列表时也更容易。也便于 <code>PRs</code> 阅读和审查。建议在反斜杠符号 <code>\\</code> 之前添加一个空格，以增加可读性。</p>\n<p>下面是来自 <code>buildpack-deps</code> 镜像的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">  bzr \\</span><br><span class=\"line\">  cvs \\</span><br><span class=\"line\">  git \\</span><br><span class=\"line\">  mercurial \\</span><br><span class=\"line\">  subversion</span><br></pre></td></tr></table></figure>\n<h4 id=\"构建缓存\"><a href=\"#构建缓存\" class=\"headerlink\" title=\"构建缓存\"></a>构建缓存</h4><p>在镜像的构建过程中，Docker 会遍历 <code>Dockerfile</code> 文件中的指令，然后按顺序执行。在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像，不再重复创建。如果你不想在构建过程中使用缓存，你可以在 <code>docker build</code> 命令中使用 <code>--no-cache=true</code> 选项。</p>\n<p>但是，如果你想在构建的过程中使用缓存，你得明白什么时候会，什么时候不会找到匹配的镜像，遵循的基本规则如下：</p>\n<ul>\n<li>从一个基础镜像开始（<code>FROM</code> 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。</li>\n<li>在大多数情况下，只需要简单地对比 <code>Dockerfile</code> 中的指令和子镜像。然而，有些指令需要更多的检查和解释。</li>\n<li>对于 <code>ADD</code> 和 <code>COPY</code> 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。</li>\n<li>除了 <code>ADD</code> 和 <code>COPY</code> 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 <code>RUN apt-get -y update</code> 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。</li>\n</ul>\n<p>一旦缓存失效，所有后续的 <code>Dockerfile</code> 指令都将产生新的镜像，缓存不会被使用。</p>\n<h3 id=\"Dockerfile-指令\"><a href=\"#Dockerfile-指令\" class=\"headerlink\" title=\"Dockerfile 指令\"></a>Dockerfile 指令</h3><p>下面针对 <code>Dockerfile</code> 中各种指令的最佳编写方式给出建议。</p>\n<h4 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h4><p>尽可能使用当前官方仓库作为你构建镜像的基础。推荐使用 <a href=\"https://hub.docker.com/_/alpine/\" target=\"_blank\" rel=\"noopener\">Alpine</a> 镜像，因为它被严格控制并保持最小尺寸（目前小于 5 MB），但它仍然是一个完整的发行版。</p>\n<h4 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a>LABEL</h4><p>你可以给镜像添加标签来帮助组织镜像、记录许可信息、辅助自动化构建等。每个标签一行，由 <code>LABEL</code> 开头加上一个或多个标签对。下面的示例展示了各种不同的可能格式。<code>#</code> 开头的行是注释内容。</p>\n<blockquote>\n<p>注意：如果你的字符串中包含空格，必须将字符串放入引号中或者对空格使用转义。如果字符串内容本身就包含引号，必须对引号使用转义。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Set one or more individual labels</span><br><span class=\"line\">LABEL com.example.version=&quot;0.0.1-beta&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL vendor=&quot;ACME Incorporated&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL com.example.release-date=&quot;2015-02-12&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL com.example.version.is-production=&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>一个镜像可以包含多个标签，但建议将多个标签放入到一个 <code>LABEL</code> 指令中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Set multiple labels at once, using line-continuation characters to break long lines</span><br><span class=\"line\">LABEL vendor=ACME\\ Incorporated \\</span><br><span class=\"line\">      com.example.is-beta= \\</span><br><span class=\"line\">      com.example.is-production=&quot;&quot; \\</span><br><span class=\"line\">      com.example.version=&quot;0.0.1-beta&quot; \\</span><br><span class=\"line\">      com.example.release-date=&quot;2015-02-12&quot;</span><br></pre></td></tr></table></figure>\n<p>关于标签可以接受的键值对，参考 <a href=\"https://docs.docker.com/engine/userguide/labels-custom-metadata/\" target=\"_blank\" rel=\"noopener\">Understanding object labels</a>。关于查询标签信息，参考 <a href=\"https://docs.docker.com/engine/userguide/labels-custom-metadata/#managing-labels-on-objects\" target=\"_blank\" rel=\"noopener\">Managing labels on objects</a>。</p>\n<h4 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h4><p>为了保持 <code>Dockerfile</code> 文件的可读性，可理解性，以及可维护性，建议将长的或复杂的 <code>RUN</code> 指令用反斜杠 <code>\\</code> 分割成多行。</p>\n<h5 id=\"apt-get\"><a href=\"#apt-get\" class=\"headerlink\" title=\"apt-get\"></a>apt-get</h5><p><code>RUN</code> 指令最常见的用法是安装包用的 <code>apt-get</code>。因为 <code>RUN apt-get</code> 指令会安装包，所以有几个问题需要注意。</p>\n<p>不要使用 <code>RUN apt-get upgrade</code> 或 <code>dist-upgrade</code>，因为许多基础镜像中的「必须」包不会在一个非特权容器中升级。如果基础镜像中的某个包过时了，你应该联系它的维护者。如果你确定某个特定的包，比如 <code>foo</code>，需要升级，使用 <code>apt-get install -y foo</code> 就行，该指令会自动升级 <code>foo</code> 包。</p>\n<p>永远将 <code>RUN apt-get update</code> 和 <code>apt-get install</code> 组合成一条 <code>RUN</code> 声明，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">        package-bar \\</span><br><span class=\"line\">        package-baz \\</span><br><span class=\"line\">        package-foo</span><br></pre></td></tr></table></figure>\n<p>将 <code>apt-get update</code> 放在一条单独的 <code>RUN</code> 声明中会导致缓存问题以及后续的 <code>apt-get install</code> 失败。比如，假设你有一个 <code>Dockerfile</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get install -y curl</span><br></pre></td></tr></table></figure>\n<p>构建镜像后，所有的层都在 Docker 的缓存中。假设你后来又修改了其中的 <code>apt-get install</code> 添加了一个包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get install -y curl nginx</span><br></pre></td></tr></table></figure>\n<p>Docker 发现修改后的 <code>RUN apt-get update</code> 指令和之前的完全一样。所以，<code>apt-get update</code> 不会执行，而是使用之前的缓存镜像。因为 <code>apt-get update</code> 没有运行，后面的 <code>apt-get install</code> 可能安装的是过时的 <code>curl</code> 和 <code>nginx</code> 版本。</p>\n<p>使用 <code>RUN apt-get update &amp;&amp; apt-get install -y</code> 可以确保你的 Dockerfiles 每次安装的都是包的最新的版本，而且这个过程不需要进一步的编码或额外干预。这项技术叫作 <code>cache busting</code>。你也可以显示指定一个包的版本号来达到 <code>cache-busting</code>，这就是所谓的固定版本，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">    package-bar \\</span><br><span class=\"line\">    package-baz \\</span><br><span class=\"line\">    package-foo=1.3.*</span><br></pre></td></tr></table></figure>\n<p>固定版本会迫使构建过程检索特定的版本，而不管缓存中有什么。这项技术也可以减少因所需包中未预料到的变化而导致的失败。</p>\n<p>下面是一个 <code>RUN</code> 指令的示例模板，展示了所有关于 <code>apt-get</code> 的建议。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">    aufs-tools \\</span><br><span class=\"line\">    automake \\</span><br><span class=\"line\">    build-essential \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    dpkg-sig \\</span><br><span class=\"line\">    libcap-dev \\</span><br><span class=\"line\">    libsqlite3-dev \\</span><br><span class=\"line\">    mercurial \\</span><br><span class=\"line\">    reprepro \\</span><br><span class=\"line\">    ruby1.9.1 \\</span><br><span class=\"line\">    ruby1.9.1-dev \\</span><br><span class=\"line\">    s3cmd=1.1.* \\</span><br><span class=\"line\"> &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure>\n<p>其中 <code>s3cmd</code> 指令指定了一个版本号 <code>1.1.*</code>。如果之前的镜像使用的是更旧的版本，指定新的版本会导致 <code>apt-get udpate</code> 缓存失效并确保安装的是新版本。</p>\n<p>另外，清理掉 apt 缓存 <code>var/lib/apt/lists</code> 可以减小镜像大小。因为 <code>RUN</code> 指令的开头为 <code>apt-get udpate</code>，包缓存总是会在 <code>apt-get install</code> 之前刷新。</p>\n<blockquote>\n<p>注意：官方的 Debian 和 Ubuntu 镜像会自动运行 apt-get clean，所以不需要显式的调用 apt-get clean。</p>\n</blockquote>\n<h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p><code>CMD</code> 指令用于执行目标镜像中包含的软件，可以包含参数。<code>CMD</code> 大多数情况下都应该以 <code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;...]</code> 的形式使用。因此，如果创建镜像的目的是为了部署某个服务(比如 <code>Apache</code>)，你可能会执行类似于 <code>CMD [&quot;apache2&quot;, &quot;-DFOREGROUND&quot;]</code> 形式的命令。我们建议任何服务镜像都使用这种形式的命令。</p>\n<p>多数情况下，<code>CMD</code> 都需要一个交互式的 <code>shell</code> (bash, Python, perl 等)，例如 <code>CMD [&quot;perl&quot;, &quot;-de0&quot;]</code>，或者 <code>CMD [&quot;PHP&quot;, &quot;-a&quot;]</code>。使用这种形式意味着，当你执行类似 <code>docker run -it python</code>时，你会进入一个准备好的 <code>shell</code> 中。<code>CMD</code> 应该在极少的情况下才能以 <code>CMD [&quot;param&quot;, &quot;param&quot;]</code> 的形式与 <code>ENTRYPOINT</code> 协同使用，除非你和你的镜像使用者都对 <code>ENTRYPOINT</code> 的工作方式十分熟悉。</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p><code>EXPOSE</code> 指令用于指定容器将要监听的端口。因此，你应该为你的应用程序使用常见的端口。例如，提供 <code>Apache</code> web 服务的镜像应该使用 <code>EXPOSE 80</code>，而提供 <code>MongoDB</code> 服务的镜像使用 <code>EXPOSE 27017</code>。</p>\n<p>对于外部访问，用户可以在执行 <code>docker run</code> 时使用一个标志来指示如何将指定的端口映射到所选择的端口。</p>\n<h4 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h4><p>为了方便新程序运行，你可以使用 <code>ENV</code> 来为容器中安装的程序更新 <code>PATH</code> 环境变量。例如使用 <code>ENV PATH /usr/local/nginx/bin:$PATH</code> 来确保 <code>CMD [&quot;nginx&quot;]</code> 能正确运行。</p>\n<p><code>ENV</code> 指令也可用于为你想要容器化的服务提供必要的环境变量，比如 Postgres 需要的 <code>PGDATA</code>。</p>\n<p>最后，<code>ENV</code> 也能用于设置常见的版本号，比如下面的示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ENV PG_MAJOR 9.3</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PG_VERSION 9.3.4</span><br><span class=\"line\"></span><br><span class=\"line\">RUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>类似于程序中的常量，这种方法可以让你只需改变 <code>ENV</code> 指令来自动的改变容器中的软件版本。</p>\n<h4 id=\"ADD-和-COPY\"><a href=\"#ADD-和-COPY\" class=\"headerlink\" title=\"ADD 和 COPY\"></a>ADD 和 COPY</h4><p>虽然 <code>ADD</code> 和 <code>COPY</code> 功能类似，但一般优先使用 <code>COPY</code>。因为它比 <code>ADD</code> 更透明。<code>COPY</code> 只支持简单将本地文件拷贝到容器中，而 <code>ADD</code> 有一些并不明显的功能（比如本地 tar 提取和远程 URL 支持）。因此，<code>ADD</code> 的最佳用例是将本地 tar 文件自动提取到镜像中，例如 <code>ADD rootfs.tar.xz</code>。</p>\n<p>如果你的 <code>Dockerfile</code> 有多个步骤需要使用上下文中不同的文件。单独 <code>COPY</code> 每个文件，而不是一次性的 <code>COPY</code> 所有文件，这将保证每个步骤的构建缓存只在特定的文件变化时失效。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">COPY requirements.txt /tmp/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN pip install --requirement /tmp/requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /tmp/</span><br></pre></td></tr></table></figure>\n<p>如果将 <code>COPY . /tmp/</code> 放置在 <code>RUN</code> 指令之前，只要 <code>.</code> 目录中任何一个文件变化，都会导致后续指令的缓存失效。</p>\n<p>为了让镜像尽量小，最好不要使用 <code>ADD</code> 指令从远程 URL 获取包，而是使用 <code>curl</code> 和 <code>wget</code>。这样你可以在文件提取完之后删掉不再需要的文件来避免在镜像中额外添加一层。比如尽量避免下面的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ADD http://example.com/big.tar.xz /usr/src/things/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span><br><span class=\"line\"></span><br><span class=\"line\">RUN make -C /usr/src/things all</span><br></pre></td></tr></table></figure>\n<p>而是应该使用下面这种方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RUN mkdir -p /usr/src/things \\</span><br><span class=\"line\">    &amp;&amp; curl -SL http://example.com/big.tar.xz \\</span><br><span class=\"line\">    | tar -xJC /usr/src/things \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/things all</span><br></pre></td></tr></table></figure>\n<p>上面使用的管道操作，所以没有中间文件需要删除。</p>\n<p>对于其他不需要 <code>ADD</code> 的自动提取功能的文件或目录，你应该使用 <code>COPY</code>。</p>\n<h4 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h4><p><code>ENTRYPOINT</code> 的最佳用处是设置镜像的主命令，允许将镜像当成命令本身来运行（用 <code>CMD</code> 提供默认选项）。</p>\n<p>例如，下面的示例镜像提供了命令行工具 <code>s3cmd</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;s3cmd&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [&quot;--help&quot;]</span><br></pre></td></tr></table></figure>\n<p>现在直接运行该镜像创建的容器会显示命令帮助：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run s3cmd</span><br></pre></td></tr></table></figure>\n<p>或者提供正确的参数来执行某个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run s3cmd ls s3://mybucket</span><br></pre></td></tr></table></figure>\n<p>这样镜像名可以当成命令行的参考。</p>\n<p><code>ENTRYPOINT</code> 指令也可以结合一个辅助脚本使用，和前面命令行风格类似，即使启动工具需要不止一个步骤。</p>\n<p>例如，<code>Postgres</code> 官方镜像使用下面的脚本作为 <code>ENTRYPOINT</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">set -e</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$1&quot; = &apos;postgres&apos; ]; then</span><br><span class=\"line\">    chown -R postgres &quot;$PGDATA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ -z &quot;$(ls -A &quot;$PGDATA&quot;)&quot; ]; then</span><br><span class=\"line\">        gosu postgres initdb</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    exec gosu postgres &quot;$@&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：该脚本使用了 Bash 的内置命令 exec，所以最后运行的进程就是容器的 PID 为 1 的进程。这样，进程就可以接收到任何发送给容器的 Unix 信号了。</p>\n</blockquote>\n<p>该辅助脚本被拷贝到容器，并在容器启动时通过 <code>ENTRYPOINT</code> 执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">COPY ./docker-entrypoint.sh /</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br></pre></td></tr></table></figure>\n<p>该脚本可以让用户用几种不同的方式和 <code>Postgres</code> 交互。</p>\n<p>你可以很简单地启动 <code>Postgres</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run postgres</span><br></pre></td></tr></table></figure>\n<p>也可以执行 <code>Postgres</code> 并传递参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run postgres postgres --help</span><br></pre></td></tr></table></figure>\n<p>最后，你还可以启动另外一个完全不同的工具，比如 <code>Bash</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run --rm -it postgres bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h4><p><code>VOLUME</code> 指令用于暴露任何数据库存储文件，配置文件，或容器创建的文件和目录。强烈建议使用 <code>VOLUME</code> 来管理镜像中的可变部分和用户可以改变的部分。</p>\n<h4 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h4><p>如果某个服务不需要特权执行，建议使用 <code>USER</code> 指令切换到非 root 用户。先在 <code>Dockerfile</code> 中使用类似 <code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code> 的指令创建用户和用户组。</p>\n<blockquote>\n<p>注意：在镜像中，用户和用户组每次被分配的 UID/GID 都是不确定的，下次重新构建镜像时被分配到的 UID/GID 可能会不一样。如果要依赖确定的 UID/GID，你应该显示的指定一个 UID/GID。</p>\n</blockquote>\n<p>你应该避免使用 <code>sudo</code>，因为它不可预期的 TTY 和信号转发行为可能造成的问题比它能解决的问题还多。如果你真的需要和 <code>sudo</code> 类似的功能（例如，以 root 权限初始化某个守护进程，以非 root 权限执行它），你可以使用 <a href=\"https://github.com/tianon/gosu\" target=\"_blank\" rel=\"noopener\">gosu</a>。</p>\n<p>最后，为了减少层数和复杂度，避免频繁地使用 <code>USER</code> 来回切换用户。</p>\n<h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><p>为了清晰性和可靠性，你应该总是在 <code>WORKDIR</code> 中使用绝对路径。另外，你应该使用 <code>WORKDIR</code> 来替代类似于 <code>RUN cd ... &amp;&amp; do-something</code> 的指令，后者难以阅读、排错和维护。</p>\n<h2 id=\"官方仓库示例\"><a href=\"#官方仓库示例\" class=\"headerlink\" title=\"官方仓库示例\"></a>官方仓库示例</h2><p>这些官方仓库的 Dockerfile 都是参考典范：<a href=\"https://github.com/docker-library/docs\" target=\"_blank\" rel=\"noopener\">https://github.com/docker-library/docs</a></p>\n<h2 id=\"资源链接\"><a href=\"#资源链接\" class=\"headerlink\" title=\"资源链接\"></a>资源链接</h2><h3 id=\"官方网站\"><a href=\"#官方网站\" class=\"headerlink\" title=\"官方网站\"></a>官方网站</h3><ul>\n<li>Docker 官方主页：<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">https://www.docker.com</a></li>\n<li>Docker 官方博客：<a href=\"https://blog.docker.com/\" target=\"_blank\" rel=\"noopener\">https://blog.docker.com/</a></li>\n<li>Docker 官方文档：<a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/</a></li>\n<li>Docker Store：<a href=\"https://store.docker.com/\" target=\"_blank\" rel=\"noopener\">https://store.docker.com</a></li>\n<li>Docker Cloud：<a href=\"https://cloud.docker.com/\" target=\"_blank\" rel=\"noopener\">https://cloud.docker.com</a></li>\n<li>Docker Hub：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com</a></li>\n<li>Docker 的源代码仓库：<a href=\"https://github.com/moby/moby\" target=\"_blank\" rel=\"noopener\">https://github.com/moby/moby</a></li>\n<li>Docker 发布版本历史：<a href=\"https://docs.docker.com/release-notes/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/release-notes/</a></li>\n<li>Docker 常见问题：<a href=\"https://docs.docker.com/engine/faq/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/faq/</a></li>\n<li>Docker 远端应用 API：<a href=\"https://docs.docker.com/develop/sdk/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/develop/sdk/</a></li>\n</ul>\n<h3 id=\"实践参考\"><a href=\"#实践参考\" class=\"headerlink\" title=\"实践参考\"></a>实践参考</h3><ul>\n<li>Dockerfile 参考：<a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/builder/</a></li>\n<li>Dockerfile 最佳实践：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></li>\n</ul>\n<h3 id=\"技术交流\"><a href=\"#技术交流\" class=\"headerlink\" title=\"技术交流\"></a>技术交流</h3><ul>\n<li>Docker 邮件列表： <a href=\"https://groups.google.com/forum/#!forum/docker-user\" target=\"_blank\" rel=\"noopener\">https://groups.google.com/forum/#!forum/docker-user</a></li>\n<li>Docker 的 IRC 频道：<a href=\"https://chat.freenode.net/#docker\" target=\"_blank\" rel=\"noopener\">https://chat.freenode.net#docker</a></li>\n<li>Docker 的 Twitter 主页：<a href=\"https://twitter.com/docker\" target=\"_blank\" rel=\"noopener\">https://twitter.com/docker</a></li>\n</ul>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li>Docker 的 StackOverflow 问答主页：<a href=\"https://stackoverflow.com/search?q=docker\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/search?q=docker</a></li>\n</ul>\n<h3 id=\"Docker-中文资源\"><a href=\"#Docker-中文资源\" class=\"headerlink\" title=\"Docker 中文资源\"></a>Docker 中文资源</h3><ul>\n<li><a href=\"https://blog.lab99.org/post/docker-2016-07-14-faq.html\" target=\"_blank\" rel=\"noopener\">Docker 问答录（100 问）</a></li>\n<li><a href=\"https://github.com/allencloud/docker-changelog-chinese\" target=\"_blank\" rel=\"noopener\">Docker CE 变更日志中文翻译</a></li>\n</ul>\n<h2 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h2><ul>\n<li><a href=\"https://legacy.gitbook.com/book/yeasy/docker_practice/details\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a></li>\n</ul>\n","categories":["docker"],"tags":["config","docker","实践"]},{"title":"nginx配置简介","url":"http://mu-mo.top/2018/05/05/其他/nginx配置简介/","content":"<h2 id=\"location-匹配规则\"><a href=\"#location-匹配规则\" class=\"headerlink\" title=\"location 匹配规则\"></a>location 匹配规则</h2><h4 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h4><blockquote>\n<p>location [=|~|~*|^~] /uri/ { … }</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>location = /uri</td>\n<td>= 表示精确匹配，只有完全匹配上才能生效</td>\n</tr>\n<tr>\n<td>location ^~ /uri</td>\n<td>^~ 开头对URL路径进行前缀匹配，并且在正则之前。</td>\n</tr>\n<tr>\n<td>location ~ \\.(gif\\</td>\n<td>jpg\\</td>\n<td>png\\</td>\n<td>js\\</td>\n<td>css)$</td>\n<td>对URL路径进行后缀匹配，并且在正则之前。</td>\n</tr>\n<tr>\n<td>location ~ pattern</td>\n<td>开头表示区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location ~* pattern</td>\n<td>开头表示不区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location /uri</td>\n<td>不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</td>\n</tr>\n<tr>\n<td>location /</td>\n<td>通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default</td>\n</tr>\n</tbody>\n</table>\n<p>前缀匹配时，Nginx 不对 url 做编码，因此请求为 <code>/static/20%/aa</code>，可以被规则 <code>^~ /static/ /aa</code> 匹配到（注意是空格）</p>\n<p>多个 location 配置的情况下匹配顺序为（参考资料而来，还未实际验证，试试就知道了，不必拘泥，仅供参考）:</p>\n<ul>\n<li>首先精确匹配 <code>=</code></li>\n<li>其次前缀匹配 <code>^~</code></li>\n<li>其次是按文件中顺序的正则匹配</li>\n<li>然后匹配不带任何修饰的前缀匹配。</li>\n<li>最后是交给 <code>/</code> 通用匹配</li>\n<li>当有匹配成功时候，停止匹配，按当前匹配规则处理请求</li>\n</ul>\n<p><em>注意：前缀匹配，如果有包含关系时，按最大匹配原则进行匹配。比如在前缀匹配：location /dir01 与 location /dir01/dir02，如有请求 <a href=\"http://localhost/dir01/dir02/file\" target=\"_blank\" rel=\"noopener\">http://localhost/dir01/dir02/file</a> 将最终匹配到 location /dir01/dir02</em></p>\n<p>例子，有如下匹配规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">location = / &#123;</span><br><span class=\"line\">   echo &quot;规则A&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location = /login &#123;</span><br><span class=\"line\">   echo &quot;规则B&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ^~ /static/ &#123;</span><br><span class=\"line\">   echo &quot;规则C&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ^~ /static/files &#123;</span><br><span class=\"line\">    echo &quot;规则X&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~ \\.(gif|jpg|png|js|css)$ &#123;</span><br><span class=\"line\">   echo &quot;规则D&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* \\.png$ &#123;</span><br><span class=\"line\">   echo &quot;规则E&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location /img &#123;</span><br><span class=\"line\">    echo &quot;规则Y&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">   echo &quot;规则F&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么产生的效果如下：</p>\n<ul>\n<li>访问根目录 <code>/</code>，比如 <code>http://localhost/</code> 将匹配 <code>规则A</code></li>\n<li>访问 <code>http://localhost/login</code> 将匹配 <code>规则B</code>，<code>http://localhost/register</code> 则匹配 <code>规则F</code></li>\n<li>访问 <code>http://localhost/static/a.html</code> 将匹配 <code>规则C</code></li>\n<li>访问 <code>http://localhost/static/files/a.exe</code> 将匹配 <code>规则X</code>，虽然 <code>规则C</code>也能匹配到，但因为最大匹配原则，最终选中了 <code>规则X</code>。你可以测试下，去掉规则 X ，则当前 URL 会匹配上 <code>规则C</code>。</li>\n<li>访问 <code>http://localhost/a.gif</code>, <code>http://localhost/b.jpg</code> 将匹配 <code>规则D</code>和 <code>规则 E</code> ，但是 <code>规则 D</code> 顺序优先，<code>规则 E</code> 不起作用，而 <code>http://localhost/static/c.png</code> 则优先匹配到 <code>规则 C</code></li>\n<li>访问 <code>http://localhost/a.PNG</code> 则匹配 <code>规则 E</code> ，而不会匹配 <code>规则 D</code> ，因为 <code>规则 E</code> 不区分大小写。</li>\n<li>访问 <code>http://localhost/img/a.gif</code> 会匹配上 <code>规则D</code>,虽然 <code>规则Y</code> 也可以匹配上，但是因为正则匹配优先，而忽略了 <code>规则Y</code>。</li>\n<li>访问 <code>http://localhost/img/a.tiff</code> 会匹配上 <code>规则Y</code>。</li>\n</ul>\n<p>访问 <code>http://localhost/category/id/1111</code> 则最终匹配到规则 F ，因为以上规则都不匹配，这个时候应该是 Nginx 转发请求给后端应用服务器，比如 FastCGI（php），tomcat（jsp），Nginx 作为反向代理服务器存在。</p>\n<p>所以实际使用中，笔者觉得至少有三个匹配规则定义，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span><br><span class=\"line\"># 这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class=\"line\"># 第一个必选规则</span><br><span class=\"line\">location = / &#123;</span><br><span class=\"line\">    proxy_pass http://tomcat:8080/index</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 第二个必选规则是处理静态文件请求，这是 nginx 作为 http 服务器的强项</span><br><span class=\"line\"># 有两种配置模式，目录匹配或后缀匹配，任选其一或搭配使用</span><br><span class=\"line\">location ^~ /static/ &#123;</span><br><span class=\"line\">    root /webroot/static/;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class=\"line\">    root /webroot/res/;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class=\"line\"># 非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class=\"line\"># 毕竟目前的一些框架的流行，带.php、.jsp后缀的情况很少了</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://tomcat:8080/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rewrite-语法\"><a href=\"#rewrite-语法\" class=\"headerlink\" title=\"rewrite 语法\"></a>rewrite 语法</h4><ul>\n<li>last – 基本上都用这个 Flag</li>\n<li>break – 中止 Rewirte，不再继续匹配</li>\n<li>redirect – 返回临时重定向的 HTTP 状态 302</li>\n<li>permanent – 返回永久重定向的 HTTP 状态 301</li>\n</ul>\n<p>1、下面是可以用来判断的表达式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-f 和 !-f 用来判断是否存在文件</span><br><span class=\"line\">-d 和 !-d 用来判断是否存在目录</span><br><span class=\"line\">-e 和 !-e 用来判断是否存在文件或目录</span><br><span class=\"line\">-x 和 !-x 用来判断文件是否可执行</span><br></pre></td></tr></table></figure>\n<p>2、下面是可以用作判断的全局变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：http://localhost:88/test1/test2/test.php?k=v</span><br><span class=\"line\">$host：localhost</span><br><span class=\"line\">$server_port：88</span><br><span class=\"line\">$request_uri：/test1/test2/test.php?k=v</span><br><span class=\"line\">$document_uri：/test1/test2/test.php</span><br><span class=\"line\">$document_root：D:\\nginx/html</span><br><span class=\"line\">$request_filename：D:\\nginx/html/test1/test2/test.php</span><br></pre></td></tr></table></figure>\n<h4 id=\"redirect-语法\"><a href=\"#redirect-语法\" class=\"headerlink\" title=\"redirect 语法\"></a>redirect 语法</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name start.igrow.cn;</span><br><span class=\"line\">    index index.html index.php;</span><br><span class=\"line\">    root html;</span><br><span class=\"line\">    if ($http_host !~ &quot;^star\\.igrow\\.cn$&quot;) &#123;</span><br><span class=\"line\">        rewrite ^(.*) http://star.igrow.cn$1 redirect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"防盗链\"><a href=\"#防盗链\" class=\"headerlink\" title=\"防盗链\"></a>防盗链</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">location ~* \\.(gif|jpg|swf)$ &#123;</span><br><span class=\"line\">    valid_referers none blocked start.igrow.cn sta.igrow.cn;</span><br><span class=\"line\">    if ($invalid_referer) &#123;</span><br><span class=\"line\">       rewrite ^/ http://$host/logo.png;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据文件类型设置过期时间\"><a href=\"#根据文件类型设置过期时间\" class=\"headerlink\" title=\"根据文件类型设置过期时间\"></a>根据文件类型设置过期时间</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">location ~* \\.(js|css|jpg|jpeg|gif|png|swf)$ &#123;</span><br><span class=\"line\">    if (-f $request_filename) &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"禁止访问某个目录\"><a href=\"#禁止访问某个目录\" class=\"headerlink\" title=\"禁止访问某个目录\"></a>禁止访问某个目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">location ~* \\.(txt|doc)$&#123;</span><br><span class=\"line\">    root /data/www/wwwroot/linuxtone/test;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一些可用的全局变量，可以参考<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/inline_var.html\" target=\"_blank\" rel=\"noopener\">获取 Nginx 内置绑定变量</a>章节。</p>\n<h2 id=\"nginx-内置绑定变量\"><a href=\"#nginx-内置绑定变量\" class=\"headerlink\" title=\"nginx 内置绑定变量\"></a>nginx 内置绑定变量</h2><p>部分常用变量如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$arg_name</td>\n<td>请求中的name参数</td>\n</tr>\n<tr>\n<td>$args</td>\n<td>请求中的参数</td>\n</tr>\n<tr>\n<td>$binary_remote_addr</td>\n<td>远程地址的二进制表示</td>\n</tr>\n<tr>\n<td>$body_bytes_sent</td>\n<td>已发送的消息体字节数</td>\n</tr>\n<tr>\n<td>$content_length</td>\n<td>HTTP请求信息里的”Content-Length”</td>\n</tr>\n<tr>\n<td>$content_type</td>\n<td>请求信息里的”Content-Type”</td>\n</tr>\n<tr>\n<td>$document_root</td>\n<td>针对当前请求的根路径设置值</td>\n</tr>\n<tr>\n<td>$document_uri</td>\n<td>与$uri相同; 比如 /test2/test.php</td>\n</tr>\n<tr>\n<td>$host</td>\n<td>请求信息中的”Host”，如果请求中没有Host行，则等于设置的服务器名</td>\n</tr>\n<tr>\n<td>$hostname</td>\n<td>机器名使用 gethostname系统调用的值</td>\n</tr>\n<tr>\n<td>$http_cookie</td>\n<td>cookie 信息</td>\n</tr>\n<tr>\n<td>$http_referer</td>\n<td>引用地址</td>\n</tr>\n<tr>\n<td>$http_user_agent</td>\n<td>客户端代理信息</td>\n</tr>\n<tr>\n<td>$http_via</td>\n<td>最后一个访问服务器的Ip地址。</td>\n</tr>\n<tr>\n<td>$http_x_forwarded_for</td>\n<td>相当于网络访问路径</td>\n</tr>\n<tr>\n<td>$is_args</td>\n<td>如果请求行带有参数，返回“?”，否则返回空字符串</td>\n</tr>\n<tr>\n<td>$limit_rate</td>\n<td>对连接速率的限制</td>\n</tr>\n<tr>\n<td>$nginx_version</td>\n<td>当前运行的nginx版本号</td>\n</tr>\n<tr>\n<td>$pid</td>\n<td>worker进程的PID</td>\n</tr>\n<tr>\n<td>$query_string</td>\n<td>与$args相同</td>\n</tr>\n<tr>\n<td>$realpath_root</td>\n<td>按root指令或alias指令算出的当前请求的绝对路径。其中的符号链接都会解析成真是文件路径</td>\n</tr>\n<tr>\n<td>$remote_addr</td>\n<td>客户端IP地址</td>\n</tr>\n<tr>\n<td>$remote_port</td>\n<td>客户端端口号</td>\n</tr>\n<tr>\n<td>$remote_user</td>\n<td>客户端用户名，认证用</td>\n</tr>\n<tr>\n<td>$request</td>\n<td>用户请求</td>\n</tr>\n<tr>\n<td>$request_body</td>\n<td>这个变量（0.7.58+）包含请求的主要信息。在使用proxy_pass或fastcgi_pass指令的location中比较有意义</td>\n</tr>\n<tr>\n<td>$request_body_file</td>\n<td>客户端请求主体信息的临时文件名</td>\n</tr>\n<tr>\n<td>$request_completion</td>\n<td>如果请求成功，设为”OK”；如果请求未完成或者不是一系列请求中最后一部分则设为空</td>\n</tr>\n<tr>\n<td>$request_filename</td>\n<td>当前请求的文件路径名，比如/opt/nginx/www/test.php</td>\n</tr>\n<tr>\n<td>$request_method</td>\n<td>请求的方法，比如”GET”、”POST”等</td>\n</tr>\n<tr>\n<td>$request_uri</td>\n<td>请求的URI，带参数</td>\n</tr>\n<tr>\n<td>$scheme</td>\n<td>所用的协议，比如http或者是https</td>\n</tr>\n<tr>\n<td>$server_addr</td>\n<td>服务器地址，如果没有用listen指明服务器地址，使用这个变量将发起一次系统调用以取得地址(造成资源浪费)</td>\n</tr>\n<tr>\n<td>$server_name</td>\n<td>请求到达的服务器名</td>\n</tr>\n<tr>\n<td>$server_port</td>\n<td>请求到达的服务器端口号</td>\n</tr>\n<tr>\n<td>$server_protocol</td>\n<td>请求的协议版本，”HTTP/1.0”或”HTTP/1.1”</td>\n</tr>\n<tr>\n<td>$uri</td>\n<td>请求的URI，可能和最初的值有不同，比如经过重定向之类的</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"nginx-conf-配置详解\"><a href=\"#nginx-conf-配置详解\" class=\"headerlink\" title=\"nginx.conf 配置详解\"></a>nginx.conf 配置详解</h2><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义Nginx运行的用户和用户组</span></span><br><span class=\"line\"><span class=\"attribute\">user</span> www www;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class=\"line\"><span class=\"attribute\">error_log</span> /var/log/nginx/error.log <span class=\"literal\">info</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程文件</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span> /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span></span><br><span class=\"line\"><span class=\"attribute\">worker_rlimit_nofile</span> <span class=\"number\">65535</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#工作模式与连接数上限</span></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class=\"line\">    <span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;</span><br><span class=\"line\">    <span class=\"comment\">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span> <span class=\"number\">65535</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设定http服务器</span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span> mime.types; <span class=\"comment\">#文件扩展名与文件类型映射表</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/sites-enabled/*; <span class=\"comment\"># 增加server配置文件夹</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> application/octet-stream; <span class=\"comment\">#默认文件类型</span></span><br><span class=\"line\">    <span class=\"comment\">#charset utf-8; #默认编码</span></span><br><span class=\"line\">    <span class=\"attribute\">server_names_hash_bucket_size</span> <span class=\"number\">128</span>; <span class=\"comment\">#服务器名字的hash表大小</span></span><br><span class=\"line\">    <span class=\"attribute\">client_header_buffer_size</span> <span class=\"number\">32k</span>; <span class=\"comment\">#上传文件大小限制</span></span><br><span class=\"line\">    <span class=\"attribute\">large_client_header_buffers</span> <span class=\"number\">4</span> <span class=\"number\">64k</span>; <span class=\"comment\">#设定请求缓</span></span><br><span class=\"line\">    <span class=\"attribute\">client_max_body_size</span> <span class=\"number\">8m</span>; <span class=\"comment\">#设定请求缓</span></span><br><span class=\"line\">    <span class=\"comment\">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，</span></span><br><span class=\"line\">    <span class=\"comment\">#如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    <span class=\"comment\">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class=\"line\">    <span class=\"attribute\">autoindex</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>; <span class=\"comment\">#防止网络阻塞</span></span><br><span class=\"line\">    <span class=\"attribute\">tcp_nodelay</span> <span class=\"literal\">on</span>; <span class=\"comment\">#防止网络阻塞</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">120</span>; <span class=\"comment\">#长连接超时时间，单位是秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_connect_timeout</span> <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_send_timeout</span> <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_read_timeout</span> <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_buffer_size</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_buffers</span> <span class=\"number\">4</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_busy_buffers_size</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_temp_file_write_size</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip模块设置</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; <span class=\"comment\">#开启gzip压缩输出</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>; <span class=\"comment\">#最小压缩文件大小</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16k</span>; <span class=\"comment\">#压缩缓冲区</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">0</span>; <span class=\"comment\">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">2</span>; <span class=\"comment\">#压缩等级</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain application/x-javascript text/css application/xml;    </span><br><span class=\"line\">    <span class=\"comment\">#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_vary</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">upstream</span> blog.ha97.com &#123;</span><br><span class=\"line\">        <span class=\"comment\">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.80.121:80</span> weight=<span class=\"number\">3</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.80.122:80</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.80.123:80</span> weight=<span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#虚拟主机的配置</span></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">#监听端口</span></span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;  </span><br><span class=\"line\">        <span class=\"comment\">#域名可以有多个，用空格隔开</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> www.ha97.com ha97.com;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /data/www/ha97;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(php|php5)?$</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_index</span> index.php;</span><br><span class=\"line\">        <span class=\"attribute\">include</span> fastcgi.conf;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#图片缓存时间设置</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">10d</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#JS和CSS缓存时间设置        </span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(js|css)?$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">1h</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#日志格式设定</span></span><br><span class=\"line\">        <span class=\"attribute\">log_format</span> access <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] \"<span class=\"variable\">$request</span>\" '</span> <span class=\"string\">'<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> \"<span class=\"variable\">$http_referer</span>\" '</span> <span class=\"string\">'\"<span class=\"variable\">$http_user_agent</span>\" <span class=\"variable\">$http_x_forwarded_for</span>'</span>;</span><br><span class=\"line\">        <span class=\"comment\">#定义本虚拟主机的访问日志</span></span><br><span class=\"line\">        <span class=\"attribute\">access_log</span> /var/log/nginx/ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#对 \"/\" 启用反向代理</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:88;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">            <span class=\"comment\">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">            <span class=\"comment\">#以下是一些反向代理的配置，可选。</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">            <span class=\"attribute\">client_max_body_size</span> <span class=\"number\">10m</span>; <span class=\"comment\">#允许客户端请求的最大单文件字节数</span></span><br><span class=\"line\">            <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">128k</span>; <span class=\"comment\">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_connect_timeout</span> <span class=\"number\">90</span>; <span class=\"comment\">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_send_timeout</span> <span class=\"number\">90</span>; <span class=\"comment\">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_read_timeout</span> <span class=\"number\">90</span>; <span class=\"comment\">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_buffer_size</span> <span class=\"number\">4k</span>; <span class=\"comment\">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">4</span> <span class=\"number\">32k</span>; <span class=\"comment\">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_busy_buffers_size</span> <span class=\"number\">64k</span>; <span class=\"comment\">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_temp_file_write_size</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">            <span class=\"comment\">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#设定查看Nginx状态的地址</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> /NginxStatus &#123;</span><br><span class=\"line\">            <span class=\"attribute\">stub_status</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">            <span class=\"attribute\">access_log</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">            <span class=\"attribute\">auth_basic</span> <span class=\"string\">\"NginxStatus\"</span>;</span><br><span class=\"line\">            <span class=\"attribute\">auth_basic_user_file</span> conf/htpasswd;</span><br><span class=\"line\">            <span class=\"comment\">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#本地动静分离反向代理配置</span></span><br><span class=\"line\">        <span class=\"comment\">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ .(jsp|jspx|do)?$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span> &#123; </span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">15d</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*.(js|css)?$</span> &#123; </span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">1h</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>nginx.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">worker_processes  2;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    include /etc/nginx/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>/etc/nginx/sites-available/hostname</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 负载均衡</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> balance &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> &lt;server1&gt;:&lt;port&gt;;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> &lt;server2&gt;:&lt;port&gt;  down;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> &lt;server3&gt;:&lt;port&gt;  max_fails=<span class=\"number\">3</span>  fail_timeout=<span class=\"number\">20s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> &lt;server4&gt;:&lt;port&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> hostname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect all http to https</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> hostname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/hostname/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/hostname/privkey.pem;</span><br><span class=\"line\">    <span class=\"comment\"># disable SSLv2</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ciphers' order matters</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> <span class=\"string\">\"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!aNULL\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># the Elliptic curve key used for the ECDHE cipher.</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_ecdh_curve</span> secp384r1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># use command line</span></span><br><span class=\"line\">    <span class=\"comment\"># openssl dhparam -out dhparam.pem 2048</span></span><br><span class=\"line\">    <span class=\"comment\"># to generate Diffie Hellman Ephemeral Parameters</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem;</span><br><span class=\"line\">    <span class=\"comment\"># let the server choose the cipher</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># turn on the OCSP Stapling and verify</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling_verify</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># http compression method is not secure in https</span></span><br><span class=\"line\">    <span class=\"comment\"># opens you up to vulnerabilities like BREACH, CRIME</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">location</span> /&lt;request_uri&gt; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span>  http://balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># letencrypt http</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> <span class=\"string\">\"text/plain\"</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /mnt/var/www/&lt;your name&gt;/hostname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ip访问限制</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ /service/resources/JsApiTicket|AccessToken</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:&lt;port&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto <span class=\"variable\">$scheme</span>;</span><br><span class=\"line\">        <span class=\"attribute\">allow</span> &lt;ip1&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">allow</span> &lt;ip2&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">allow</span> &lt;ip3&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">allow</span> &lt;ip4&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">allow</span> &lt;ip5&gt;;                </span><br><span class=\"line\">        <span class=\"attribute\">deny</span> all;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ /&lt;request_uri&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:&lt;port&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto <span class=\"variable\">$scheme</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ /&lt;request_uri&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"attribute\">include</span> uwsgi_params;</span><br><span class=\"line\">       <span class=\"comment\"># 二者选其一即可 </span></span><br><span class=\"line\">       <span class=\"comment\"># uwsgi_pass unix://var/www/whb/webhook/uwsgi/uwsgi.sock;</span></span><br><span class=\"line\">       <span class=\"attribute\">uwsgi_pass</span> http:<span class=\"number\">127.0.0.1</span>:&lt;port&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location <span class=\"regexp\">~ /url1/(.*)?</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host &lt;another hostname&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://&lt;remote_addr&gt;:&lt;port&gt;/<span class=\"variable\">$1</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ /url2/(.*)?</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host &lt;another hostname&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> https://&lt;remote_addr&gt;/<span class=\"variable\">$1</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>; <span class=\"comment\"># 默认443端口</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ /url2/(.*)?</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host &lt;another hostname&gt;;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://&lt;remote_addr&gt;/<span class=\"variable\">$1</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;  <span class=\"comment\"># 默认80端口</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#处理静态文件请求</span></span><br><span class=\"line\">\t<span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /static/ &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">root</span> /webroot/static/;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> <span class=\"regexp\">~* \\.(gif|jpg|jpeg|png|css|js|ico)$</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">root</span> /webroot/res/;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /mnt/log/nginx/hostname/access.log;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /mnt/log/nginx/hostname/error.log;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["其他"],"tags":["config","nginx","openresty"]},{"title":"Ubuntu 配置指南","url":"http://mu-mo.top/2018/05/01/Ubuntu/Ubuntu 配置笔记/","content":"<p>测试环境：Ubuntu16.04 LTS</p>\n<h2 id=\"安装篇\"><a href=\"#安装篇\" class=\"headerlink\" title=\"安装篇\"></a>安装篇</h2><p><a href=\"http://www.omgubuntu.co.uk/2016/04/10-things-to-do-after-installing-ubuntu-16-04-lts\" target=\"_blank\" rel=\"noopener\">16 Things To Do After Installing Ubuntu 16.04 LTS</a></p>\n<ol>\n<li><p>安装wps</p>\n<p><a href=\"http://wps-community.org/downloads\" target=\"_blank\" rel=\"noopener\">wps下载</a> </p>\n<p>安装： <code>sudo dpkg -i wps-office_10.1.0.5707~a21_amd64.deb</code></p>\n<p>如果有依赖故障 修复依赖: <code>sudo apt-get install  -f</code></p>\n<p>之后可以在 <strong>模板</strong> 文件夹中分别新建一个Excel，Word，PPT模板，这样可以在 右键菜单中直接新建文档。</p>\n<p><strong>WPS字体配置：</strong></p>\n<ol>\n<li><p>下载缺失的字体文件，然后复制到Linux系统中的/usr/share/fonts文件夹中。</p>\n<p>国外下载地址：<a href=\"https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip\" target=\"_blank\" rel=\"noopener\">https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip</a></p>\n<p>国内下载地址：<a href=\"https://pan.baidu.com/s/1eS6xIzo\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1eS6xIzo</a></p>\n</li>\n<li><p>下载完成后，解压并进入目录中，继续执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo cp * /usr/share/fonts</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>执行以下命令,生成字体的索引信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkfontscale</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkfontdir</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行fc-cache命令更新字体缓存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo fc-cache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启wps即可，字体缺失的提示不再出现。</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>Install Linux Graphics Drivers</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d7d2e4150?w=500&amp;h=293&amp;f=jpeg&amp;s=35938\" alt=\"drivers\"></p>\n</li>\n<li><p>Install Media Codecs</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d7d0e8d3c?w=350&amp;h=200&amp;f=jpeg&amp;s=13841\" alt=\"rythmbox-in-ubuntu\"></p>\n<p>Playing MP3s in Rhythmbox</p>\n<p>Legal issues stop Ubuntu from being able to play MP3, MP4 and other media files ‘out of the box’.</p>\n<p>Ubuntu can play your audio and video files, you just have to tell it to do so.</p>\n<p>The easiest way to do this is to check (tick) the ‘<em>Enable Restricted Formats</em>‘ box during installation. This will install all the required multimedia codecs automatically, along with the OS itself.</p>\n<p>If you forgot to do that (or upgrade from an earlier release) you can install the multimedia codecs manually via the Software app:</p>\n<p><a href=\"apt://ubuntu-restricted-extras\" target=\"_blank\" rel=\"noopener\">Install Ubuntu Restricted Extras</a></p>\n</li>\n<li><p>鼠标点击最小化</p>\n<p>对于 unity 桌面</p>\n<p><a href=\"https://www.omgubuntu.co.uk/wp-content/uploads/2016/04/unity-launcher.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d7d4be846?w=350&amp;h=223&amp;f=gif&amp;s=309176\" alt=\"unity launcher\"></a></p>\n<p>Click on an app launcher icon to open an app. Click on the same icon again to minimise the app. Intuitive, right?</p>\n<p>That may be, but it is not the default behaviour in Unity — which can be off-putting to new users. It’s also not obvious how to enable it.</p>\n<p>Run the following command (or install/use Unity Tweak Tool &gt; Unity &gt; Launcher &gt; Minimise):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Adobe Flash on Linux</p>\n<p>Flash sucks, but for some sites you may not have the option of not using it.</p>\n<p><a href=\"http://www.omgubuntu.co.uk/2012/02/adobe-adandons-flash-on-linux\" target=\"_blank\" rel=\"noopener\">Adobe officially stopped supporting Flash on Linux</a> in 2012 and many web browsers are in the process of dropping support for its NPAPI architecture.</p>\n<p>The overall best solution for using Flash on Linux is to download and use Google Chrome. Chrome comes with an<strong>up-to-date version of the Flash plugin</strong> built-in. In fact it’s the only way to get the latest Flash player updates on Linux — and it’s a PPAPI plugin, too.</p>\n<p>But I appreciate that not everyone wants to use Chrome. Some of you may be using a 32-bit version of Ubuntu, which Chrome no longer supports. Whatever the reason you need it, here’s how to get it:</p>\n<p><a href=\"apt://flashplugin-installer\" target=\"_blank\" rel=\"noopener\">Install Flash Player Plugin</a></p>\n<p>If you want to watch Amazon Instant Video, Hulu or any other sites that uses DRM through HAL, <a href=\"http://www.omgubuntu.co.uk/2015/09/how-to-watch-hulu-on-ubuntu-1404-up\" target=\"_blank\" rel=\"noopener\">we’ve got a guide on that.</a></p>\n</li>\n<li><p>垃圾清理软件</p>\n<p><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2016/04/bleachbit-system-cleaner-app-on-ubuntu.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d7d54079e?w=750&amp;h=392&amp;f=jpeg&amp;s=80231\" alt=\"bleachbit running on ubuntu 16.04\"></a></p>\n<p><a href=\"apt://bleachbit\" target=\"_blank\" rel=\"noopener\">Install BleachBit on Ubuntu</a></p>\n</li>\n<li><p>sublime text</p>\n<p><a href=\"https://www.sublimetext.com/docs/3/linux_repositories.html#apt\" target=\"_blank\" rel=\"noopener\">https://www.sublimetext.com/docs/3/linux_repositories.html#apt</a></p>\n</li>\n<li><p>vscode</p>\n<p><a href=\"https://code.visualstudio.com/download\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/download</a></p>\n</li>\n<li><p>搜狗输入法</p>\n<p><a href=\"https://pinyin.sogou.com/linux/?r=pinyin\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>vim</p>\n<p><a href=\"https://github.com/tofar/vim-zsh-tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/tofar/vim-zsh-tmux</a></p>\n</li>\n<li><p>redshift （护眼软件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install redshift gtk-redshift</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d7d537462?w=750&amp;h=418&amp;f=png&amp;s=338072\" alt=\"img\"></p>\n<p><a href=\"http://jonls.dk/redshift/\" target=\"_blank\" rel=\"noopener\">redshift docs</a></p>\n</li>\n<li><p>网易云音乐</p>\n<p><a href=\"https://music.163.com/#/download\" target=\"_blank\" rel=\"noopener\">https://music.163.com/#/download</a></p>\n</li>\n<li><p>postman</p>\n<p><a href=\"https://blog.bluematador.com/posts/postman-how-to-install-on-ubuntu-1604/\" target=\"_blank\" rel=\"noopener\">https://blog.bluematador.com/posts/postman-how-to-install-on-ubuntu-1604/</a> </p>\n</li>\n<li><p>git 、pip、pip3、docker、openresty 。。。</p>\n</li>\n<li><p>安装shadowsocks-qt5</p>\n<h3 id=\"第一种安装方式\"><a href=\"#第一种安装方式\" class=\"headerlink\" title=\"第一种安装方式\"></a>第一种安装方式</h3><p>shadowsocks-qt5 需要通过PPA源安装，仅支持Ubuntu 14.04或更高版本。<br>1、设置 PPA 源并安装 shadowsocks-qt5</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure>\n<p>2、安装过程遇到 libappindicator1 依赖问题（dependency problems），而 libappindicator1 又遇到 libindicator7 依赖的解决办法。一并安装 libappindicator1 libindicator7 依赖，再重新安装 shadowsocks-qt5。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get -f install libappindicator1 libindicator7</span><br></pre></td></tr></table></figure>\n<p>3、完成后就可以打开 shadowsocks-qt5 啦</p>\n<h3 id=\"第二种安装方式\"><a href=\"#第二种安装方式\" class=\"headerlink\" title=\"第二种安装方式\"></a>第二种安装方式</h3><p>这上面的呢是使用apt-get直接安装，下面我们介绍第二种使用方式，安装的版本会比上面这样安装的版本高一点。</p>\n<p>由于个别的服务商更换了一些其他的加密方式比如CHACHA20-IETF-POLY1305，这种加密方式只有ShadowSocks-Qt5 V3.0.0才加入，由于apt-get上ss-qt5以及不再更新，我们只能去gayhub想办法咯</p>\n<p>我们去这里下载最新的版本是后缀为.AppImage的文件哦，同学们别下载错啦</p>\n<blockquote>\n<p><a href=\"https://github.com/shadowsocks/shadowsocks-qt5/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-qt5/releases</a></p>\n</blockquote>\n<p>下载好之后把IMG放到自己的文件夹里 然后给权限直接运行，代码如下 (我写这篇文章的时候是这个版本号，你们记得换成最新的哦)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod a+x Shadowsocks-Qt5-3.0.0-x86_64.AppImage./Shadowsocks-Qt5-3.0.0-x86_64.AppImage</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载 SwitchyOmega</p>\n<p><a href=\"https://github.com/FelisCatus/SwitchyOmega/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>\n</li>\n</ol>\n<h2 id=\"修复篇\"><a href=\"#修复篇\" class=\"headerlink\" title=\"修复篇\"></a>修复篇</h2><ol>\n<li><p>修复 ubuntu 中检测到系统程序错误的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo rm /var/crash/*</span><br><span class=\"line\">sudo gedit /etc/default/apport</span><br><span class=\"line\"></span><br><span class=\"line\">修改为如下即可：</span><br><span class=\"line\"># 设置0表示禁用Apportw，或者1开启它。</span><br><span class=\"line\"># 你可以用下面的命令暂时关闭它：</span><br><span class=\"line\"># sudo service apport start force_start=1</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载libreOffice</p>\n<p>ibreoffice是ubuntu自带的开源office软件，体验效果不如windows上的office，于是选择用WPS来替代。（安装WPS见安装篇）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge libreoffice?</span><br><span class=\"line\">或</span><br><span class=\"line\">sudo aptitude purge libreoffice?</span><br><span class=\"line\">不要漏掉通配符“?”，否则无法清除/卸载全部 LibreOffice 软件包</span><br><span class=\"line\">或</span><br><span class=\"line\">sudo apt-get remove --purge libreoffice*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除不常用软件</p>\n<p>删除Amazon的链接</p>\n<p><code>sudo apt-get remove unity-webapps-common</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot </span><br><span class=\"line\">sudo apt-get remove gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install  </span><br><span class=\"line\">sudo apt-get remove onboard deja-dup</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除Ubuntu Linux旧内核的方法</p>\n<p>用Ubuntu一段时间后，就会发觉由于自动升级，系统里安装了很多内核。像我，竟然安装了下面那么多，这个造成了漫长的启动列表。必须删掉一些不用的。</p>\n<p>首先就是使用如下命令，列出所有安装的内核，下表中，带有image的就是内核文件。从中选择要卸载的包，用apt-get来卸载</p>\n<p><strong>具体如下:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dpkg --get-selections|grep linux</span><br><span class=\"line\">sudo apt-get remove linux-image-2.6.24-16-generic   </span><br><span class=\"line\">sudo apt-get remove linux-headers-2.6.24-16-generic</span><br></pre></td></tr></table></figure>\n<p>查看当前系统使用的内核: <code>uname -a</code></p>\n</li>\n<li><p>Windows 10和Ubuntu 16.04双系统时间错误的调整</p>\n<p><strong>原因：</strong></p>\n<p>​       如果安装了 Windows 和 Linux（比如 Ubuntu）双系统，有时会出现两个系统的时间不一致的情况。这是因为，两个操作系统对电脑硬件时间的定义不一样，<strong>Windows 认为电脑硬件时间是“本地时间”</strong>，因此它启动后直接用该时间作为“系统时间”并显示在桌面右下角的系统托盘里；而<strong>Ubuntu 等 Linux 发行版则认为电脑硬件时间是“全球统一时间”（即 UTC)</strong>，它在启动后在该时间的基础上，再加上电脑设置的时区数（比如我们在中国，它就加上“8”）。根据获得的资料得知，两种模式各有利弊，但是后一种模式在遇到时区转换、夏令时等情况时，通用性更强。</p>\n<p><strong>解决方案：</strong></p>\n<p>​       基于上述原因，协调 Win/Lin 双系统时间一致的方法，就是让 Windows 也和 Linux 一样，将电脑硬件时间看作“全球统一时间”。</p>\n<p><strong>具体：</strong></p>\n<ol>\n<li><p>在win10中打开<strong>regedit</strong> （在小娜下搜索即可）</p>\n</li>\n<li><p>桌面上将出现“注册表编辑器”的窗口，在以下的操作中，将对窗口左侧列表中的 <strong>HKEY_LOCAL_MACHINE</strong> 这一分支进行操作。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d7df2659b?w=500&amp;h=317&amp;f=jpeg&amp;s=16339\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n<li><p>点击展开 HKEY_LOCAL_MACHINE 分支，然后依次导航到以下位置：</p>\n<p><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation</code></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d9d160e0f?w=500&amp;h=311&amp;f=jpeg&amp;s=25363\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n<li><p>在右侧空白处单击鼠标右键，然后依次点击“新建”——“QWORD（64位）值”。</p>\n<p>如果安装的是 32 位系统，则需要新建“DWORD（32位）值”。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d9edaa00f?w=500&amp;h=399&amp;f=jpeg&amp;s=36714\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n<li><p>当前位置将会出现一个新建的键值的条目，将其“名称”改为：</p>\n<p><strong>RealTimeIsUniversal</strong></p>\n<p>它的大体意思是，硬件时间被作为全球统一时间。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36d9db7008a?w=497&amp;h=400&amp;f=jpeg&amp;s=36100\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n<li><p>然后双击这一条目，弹出“编辑 QWORD（64位）值”的对话框，确保选中了“十六进制”，然后将“数值数据”改为“1”。最后点击“确定”。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36da124a876?w=501&amp;h=380&amp;f=jpeg&amp;s=26981\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n</ol>\n</li>\n<li><p>Ubuntu截图快捷键</p>\n<p>无须安装如何软件，直接使用Ubuntu自带的快捷键即可满足基本需求</p>\n</li>\n<li><p><a href=\"https://linux.cn/article-5603-1.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 更新错误修复大全</a></p>\n</li>\n<li><p><a href=\"http://cheneyph.iteye.com/blog/824746\" target=\"_blank\" rel=\"noopener\">Ubuntu的一些命令及查看已安装软件包的命令</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/by-1075324834/p/5045096.html\" target=\"_blank\" rel=\"noopener\">ubuntu服务器与本地文件传输</a> </p>\n</li>\n<li><p>sudo 命令学习</p>\n<p>执行sudo 的时候会去 <code>/etc/sudoers</code> 文件中的secure_path 中寻找，而不是在root的PATH中</p>\n<p>所以解决方案：</p>\n<ol>\n<li>在secure_path的目录中建立软链接</li>\n<li>添加你的文件的目录到secure_path中</li>\n</ol>\n</li>\n<li><p>sudo openresty -s reload报错</p>\n<p>报错输出：<code>nginx: [error] open() &quot;/usr/local/openresty/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</code>  或者　<code>nginx: [error] invalid PID number &quot;&quot; in &quot;/usr/local/openresty/nginx/logs/nginx.pid&quot;</code></p>\n<p>原因：暂时没有启动任何server，所以要先用 <em>nginx -p <code>pwd</code>/ -c conf/nginx.conf</em> 手动启动一些server，再执行 <code>sudo openresty -s reload</code> </p>\n</li>\n<li><p>Ubuntu 按 Alt + Tab 切换的时候双重切换问题</p>\n<p>解决：安装 ccsm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install compizconfig-settings-manager</span><br></pre></td></tr></table></figure>\n<p>之后在设置中关闭 应用程序奇幻条以及static Application Switch</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/29/1631010591a45936?w=400&amp;h=235&amp;f=png&amp;s=50366\" alt=\"Screenshot.png\"></p>\n</li>\n</ol>\n<h2 id=\"美化篇\"><a href=\"#美化篇\" class=\"headerlink\" title=\"美化篇\"></a>美化篇</h2><p>参考：</p>\n<p><strong>flatabulous-theme风格</strong> <a href=\"http://www.jianshu.com/p/4bd2d9b1af41\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/4bd2d9b1af41</a></p>\n<p><strong>Mac风格</strong> <a href=\"https://imcn.me/html/y2016/26832.html\" target=\"_blank\" rel=\"noopener\">https://imcn.me/html/y2016/26832.html</a></p>\n<h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>美化效果如图：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36da5285f0a?w=792&amp;h=511&amp;f=png&amp;s=167812\" alt=\"Imgur\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36dc567be04?w=570&amp;h=321&amp;f=jpeg&amp;s=41341\" alt=\"macbuntu-4\"></p>\n<h4 id=\"安装tweak-tool\"><a href=\"#安装tweak-tool\" class=\"headerlink\" title=\"安装tweak-tool\"></a>安装tweak-tool</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install unity-tweak-tool</span><br><span class=\"line\">sudo apt-get install gnome-tweak-tool</span><br></pre></td></tr></table></figure>\n<h4 id=\"仿Mac-篇\"><a href=\"#仿Mac-篇\" class=\"headerlink\" title=\"仿Mac 篇\"></a>仿Mac 篇</h4><p>1、下载 macbuntu 壁纸：</p>\n<p><a href=\"http://pan.baidu.com/s/1skQCq2T\" target=\"_blank\" rel=\"noopener\">Download MacBuntu OS Wallpapers</a></p>\n<p>2、安装 MacBuntu OS Y Theme、Icons 和 cursors：</p>\n<p>采用：Macbuntu-os-unity-classic以及相应的图标和指针</p>\n<p>安装命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install macbuntu-os-icons-lts-v7</span><br><span class=\"line\">sudo apt-get install macbuntu-os-ithemes-lts-v7</span><br></pre></td></tr></table></figure>\n<p>卸载命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /usr/share/icons/mac-cursors &amp;&amp; sudo ./uninstall-mac-cursors.sh</span><br><span class=\"line\">sudo apt-get remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7</span><br></pre></td></tr></table></figure>\n<p>3、安装 Slingscold（替代Launchpad）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install slingscold</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630c36b89f8e0b3?w=272&amp;h=256&amp;f=png&amp;s=42139\" alt=\"仿Mac OS X主题\"></p>\n<p>使用效果：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630c36b8a142675?w=1306&amp;h=694&amp;f=png&amp;s=903357\" alt=\"仿Mac OS X主题\"></p>\n<p>4、安装Albert Spotlight (替代 Mac Spotlight)</p>\n<p>一个快捷搜索功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install albert</span><br></pre></td></tr></table></figure>\n<p>第一次启动需要设置快捷键；效果：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630c36b8b22cb8a?w=1013&amp;h=425&amp;f=png&amp;s=671504\" alt=\"仿Mac OS X主题\"></p>\n<p>5、安装 一个 Dock</p>\n<ul>\n<li><p>Cairo-dock (自行配置)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cairo-dock</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36dc25d26d9?w=960&amp;h=536&amp;f=gif&amp;s=2403604\" alt=\"img\"></p>\n<p>配置：（自选）</p>\n<ul>\n<li>去除桌面切换器插件</li>\n<li>停靠左边</li>\n</ul>\n<p>bug修复：</p>\n<ul>\n<li><p>chrome 双图标问题</p>\n<p>如下配置chrome即可：捕捉哪里写：google-chrome 同时 最下面的修改为7.730 即可</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/29/16310105352bebea?w=1202&amp;h=729&amp;f=png&amp;s=110025\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><p>docky</p>\n<p><strong>终端安装命令:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install docky</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36dcd9f3015?w=700&amp;h=394&amp;f=png&amp;s=347898\" alt=\"img\"></p>\n</li>\n<li><p>Plank Dock</p>\n<p><code>sudo apt-get install plank</code></p>\n<p>安装 Plank 主题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install macbuntu-os-plank-theme-lts-v7</span><br></pre></td></tr></table></figure>\n<p>安装 Ctrl + Right Click 选择主题。</p>\n<p><a href=\"https://imcn.me/wp-content/uploads/2016/05/7-dock-2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36df69a7264?w=570&amp;h=377&amp;f=jpeg&amp;s=20518\" alt=\"7-dock-2\"></a></p>\n<p>卸载主题命令：</p>\n<p><code>sudo apt-get autoremove plank macbuntu-os-plank-theme-lts-v7</code></p>\n</li>\n</ul>\n<p>6、将面板上的 ‘Ubuntu Desktop’ 文字替换 ‘Mac’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &amp;&amp; wget -O Mac.po http://drive.noobslab.com/data/Mac/change-name-on-panel/mac.po</span><br><span class=\"line\">cd /usr/share/locale/zh_CN/LC_MESSAGES; sudo msgfmt -o unity.mo ~/Mac.po;rm ~/Mac.po;cd</span><br></pre></td></tr></table></figure>\n<p>语言上如果是其他语言，将 /zh_CN做相应修改：</p>\n<p>恢复原来的桌面文字命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &amp;&amp; wget -O Ubuntu.po http://drive.noobslab.com/data/Mac/change-name-on-panel/ubuntu.po</span><br><span class=\"line\">cd /usr/share/locale/zh_CN/LC_MESSAGES; sudo msgfmt -o unity.mo ~/Ubuntu.po;rm ~/Ubuntu.po;cd</span><br></pre></td></tr></table></figure>\n<p>7、启动器上苹果Logo</p>\n<p><a href=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36df6a214f1?w=400&amp;h=297&amp;f=jpeg&amp;s=16062\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36df6a214f1?w=400&amp;h=297&amp;f=jpeg&amp;s=16062\" alt=\"macbuntu-apple-logo\"></a></p>\n<p>命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/apple/launcher_bfb.png</span><br><span class=\"line\">sudo mv launcher_bfb.png /usr/share/unity/icons/</span><br></pre></td></tr></table></figure>\n<p>恢复图标：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/ubuntu/launcher_bfb.png</span><br><span class=\"line\">sudo mv launcher_bfb.png /usr/share/unity/icons/</span><br></pre></td></tr></table></figure>\n<p>10、字体</p>\n<ul>\n<li><p>文泉驿字体（推荐）</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-wqy-microhei</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mac 字体</p>\n<p>配置 Mac 字体</p>\n<p><a href=\"https://imcn.me/wp-content/uploads/2016/05/mac-fonts.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36e08f70165\" alt=\"mac-fonts\"></a></p>\n<p>安装字体命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O mac-fonts.zip http://drive.noobslab.com/data/Mac/macfonts.zip</span><br><span class=\"line\">sudo unzip mac-fonts.zip -d /usr/share/fonts; rm mac-fonts.zip</span><br><span class=\"line\">sudo fc-cache -f -v</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>11、修改启动界面：</p>\n<p><a href=\"https://imcn.me/wp-content/uploads/2016/05/1-bootscreen.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36e13523c58?w=570&amp;h=321&amp;f=jpeg&amp;s=4166\" alt=\"1-bootscreen\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install macbuntu-os-bscreen-lts-v7</span><br></pre></td></tr></table></figure>\n<p>修改 /usr/share/plymouth/themes/macbuntu/macbuntu.plymouth</p>\n<p>原来是 /lib 修改为 /usr/share即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ImageDir=/usr/share/plymouth/themes/macbuntu</span><br><span class=\"line\">ScriptFile=/usr/share/plymouth/themes/macbuntu/macbuntu.script</span><br></pre></td></tr></table></figure>\n<p>如果你喜欢 MBuntu 启动界面，你想恢复到 Ubuntu ，使用命令：<br><code>sudo apt-get autoremove macbuntu-os-bscreen-lts-v7</code></p>\n<p>12、登陆迎宾界面：</p>\n<p><a href=\"https://imcn.me/wp-content/uploads/2016/05/macbuntu-10.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36e1bc759a7?w=570&amp;h=321&amp;f=jpeg&amp;s=4657\" alt=\"macbuntu-10\"></a></p>\n<p>注意安装这个东东有风险，如果你不是在意，建议不安装，安装这个仅仅适合于 Ubuntu Unity – Lightdm 和 Ubuntu Gnome – gdm，其他桌面环境有风险。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install macbuntu-os-lightdm-lts-v7</span><br></pre></td></tr></table></figure>\n<p>配置/etc/lightdm/lightdm.conf（如果没有就创建自己一个），内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[SeatDefaults]</span><br><span class=\"line\">greeter-session=lightdm-webkit-greeter</span><br></pre></td></tr></table></figure>\n<p>配置/etc/lightdm/lightdm-webkit-greeter.conf，修改这两行为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme-name=macbuntu-lightdm</span><br><span class=\"line\">webkit-theme=macbuntu-lightdm</span><br></pre></td></tr></table></figure>\n<p>卸载恢复命令：</p>\n<p><code>sudo apt-get remove macbuntu-os-lightdm-lts-v7</code></p>\n<h4 id=\"Flatabulous-主题篇\"><a href=\"#Flatabulous-主题篇\" class=\"headerlink\" title=\"Flatabulous 主题篇\"></a>Flatabulous 主题篇</h4><p><strong>一个久负盛名的扁平化主题</strong></p>\n<ol>\n<li>Using the .deb file for Debian, Ubuntu and derivatives (Recommended)</li>\n</ol>\n<p>Download the .deb file from <a href=\"https://github.com/anmoljagetia/Flatabulous/releases/latest\" target=\"_blank\" rel=\"noopener\">here</a>, double click to open with Ubuntu Software Center and click on install. Then, install the theme using ubuntu-tweak.</p>\n<ol start=\"2\">\n<li><p>Using the noobslab PPA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install flatabulous-theme</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Flat Icons</p>\n<p>For icons, I use the ultra-flat-icons theme. It is available in blue (recommended), orange and mint green colors. To install this, you can run the following commands</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/icons</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ultra-flat-icons</span><br></pre></td></tr></table></figure>\n<p>Alternatively, you could also run <code>sudo apt-get install ultra-flat-icons-orange</code> OR <code>sudo apt-get install ultra-flat-icons-green</code>.</p>\n<p>​</p>\n<p>安装完成后，打开unity-tweak-tool软件，修改主题和图标：</p>\n<p>进入Theme，修改为Flatabulous</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36e3a5ea009?w=889&amp;h=170&amp;f=jpeg&amp;s=13744\" alt=\"主题\"></p>\n<p>​</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36e423d1f74?w=883&amp;h=428&amp;f=jpeg&amp;s=20133\" alt=\"图标\"></p>\n</li>\n<li><p>字体</p>\n<p>ubuntu自带的字体不太好看，所以采用文泉译微米黑字体替代，效果会比较好，毕竟是国产字体！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-wqy-microhei1</span><br></pre></td></tr></table></figure>\n<p>然后通过unity-tweak-tool来替换字体：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36e5ba78ef4?w=881&amp;h=651&amp;f=jpeg&amp;s=28315\" alt=\"替换字体\"></p>\n</li>\n<li><p>cairo dock</p>\n<p>TODO</p>\n<p>​</p>\n</li>\n</ol>\n<p>主题中搜狗 的图标问题：</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/e87ea941e432\" target=\"_blank\" rel=\"noopener\">Ubuntu技术贴 | Flatabulous主题中显示搜狗拼音托盘图标</a></p>\n<p>制作svg格式的搜狗输入法图标（可在 /usr/share/icons/hicolor/128x128/apps找到png格式的图标），保存为fcitx-sogoupinyin.svg</p>\n<p>不同主题请修改 Ultra-Flat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo cp fcitx-sogoupinyin.svg /usr/share/icons/Ultra-Flat/apps/scalable1</span><br></pre></td></tr></table></figure>\n<p>如果你安装了Dock栏想隐藏启动器的话：</p>\n<p>在 Unity Tweak Tool 中将启动器 的调用灵敏度设置为 0 ，同时打开自动隐藏</p>\n<p>安装完之后请自行使用tweak tool设置开机自启软件: 如 redshift、Albert、某dock 、shadowsocks</p>\n<h4 id=\"grub-美化\"><a href=\"#grub-美化\" class=\"headerlink\" title=\"grub 美化\"></a>grub 美化</h4><p>主题获取： <a href=\"https://www.gnome-look.org/browse/cat/109/ord/top/\" target=\"_blank\" rel=\"noopener\">https://www.gnome-look.org/browse/cat/109/ord/top/</a></p>\n<p><strong>1.下载相应的主题文件到电脑中</strong></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36e61223ce1?w=883&amp;h=315&amp;f=png&amp;s=29692\" alt=\"img\"><br>然后在<code>~/Downloads/</code>里面可以看到下载的主题<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36e891e8269?w=173&amp;h=120&amp;f=png&amp;s=3029\" alt=\"img\"><br>然后执行下面的命令</p>\n<blockquote>\n<p>1.现将该压缩包解压，”171217-Breeze-GRUB2.tar.gz”是你下载的压缩包名字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; sudo tar zxf 171217-Breeze-GRUB2.tar.gz</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>2.将解压后的文件移动到/boot/grub/themes/ 文件夹中”Breeze-GRUB2”是解压后得到的文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mv Breeze-GRUB2/ /boot/grub/themes/</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong>如果没有themes文件夹，就直接建一个文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir /boot/grub/themes</span><br></pre></td></tr></table></figure>\n<p>如图:<img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36ee1e11257?w=887&amp;h=578&amp;f=png&amp;s=27301\" alt=\"img\"></p>\n<p><strong>2.修改GRUB配置文件并且更新</strong></p>\n<p>打开/etc/grub.d/00_header文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/grub.d/00_header</span><br><span class=\"line\">或者</span><br><span class=\"line\">sudo vim /etc/grub.d/00.header</span><br></pre></td></tr></table></figure>\n<p>在文件中添加一下内容，如图<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36ed07e8657?w=571&amp;h=715&amp;f=png&amp;s=112339\" alt=\"img\"></p>\n<ul>\n<li>第一行是设置引导界面的字体(可以不设置)</li>\n<li>第二行是你刚才下载的主题的文件路径</li>\n<li>第三行是你屏幕分辨率的大小</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GRUB_FONT=&quot;/boot/grub/fonts/unicode.pf2&quot;</span><br><span class=\"line\">GRUB_THEME=&quot;/boot/grub/themes/poly/theme.txt&quot;</span><br><span class=\"line\">GRUB_GFXMODE=&quot;1366x768*32&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>3.更新grub</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>然后重启电脑即可看到更改成功。</p>\n<h2 id=\"终端篇（可直接复制我的配置文件）\"><a href=\"#终端篇（可直接复制我的配置文件）\" class=\"headerlink\" title=\"终端篇（可直接复制我的配置文件）\"></a>终端篇（可直接复制<a href=\"https://github.com/tofar/vim-zsh-tmux\" target=\"_blank\" rel=\"noopener\">我的配置文件</a>）</h2><ol>\n<li><p>zsh</p>\n<p>终端采用zsh和oh-my-zsh，既美观又简单易用，主要是能提高你的逼格</p>\n<p>zsh: <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh</a></p>\n<p>效果：</p>\n<ol>\n<li><p>安装zsh：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载 oh-my-zsh 项目来帮我们配置 zsh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改主题</p>\n<p><em>Robby’s theme is the default one. It’s not the fanciest one. It’s not the simplest one. It’s just the right one (for him).</em></p>\n<p>Once you find a theme that you’d like to use, you will need to edit the <code>~/.zshrc</code> file. You’ll see an environment variable (all caps) in there that looks like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure>\n<p>To use a different theme, simply change the value to match the name of your desired theme. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZSH_THEME=&quot;agnoster&quot; # (this is one of the fancy ones)</span><br><span class=\"line\"># see https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster</span><br></pre></td></tr></table></figure>\n<p><em>Note: many themes require installing the Powerline Fonts in order to render properly.</em></p>\n<p>Open up a new terminal window and your prompt should look something like this:</p>\n<p><a href=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36f313359b6?w=633&amp;h=346&amp;f=png&amp;s=82148\" target=\"_blank\" rel=\"noopener\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36f313359b6?w=633&amp;h=346&amp;f=png&amp;s=82148\" alt=\"Agnoster theme\"></a></p>\n<ol>\n<li>​</li>\n</ol>\n</li>\n<li><p>切换到 zsh 模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配色</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/28/1630a36f5cdb5875?w=600&amp;h=413&amp;f=png&amp;s=41746\" alt=\"img\"></p>\n<p>其中，文字和背景采用系统主题，透明度设为10%，下面的palette样式采用Tango</p>\n</li>\n</ol>\n</li>\n<li><p>fish</p>\n<p>github: <a href=\"https://github.com/oh-my-fish/oh-my-fish\" target=\"_blank\" rel=\"noopener\">https://github.com/oh-my-fish/oh-my-fish</a></p>\n<ol>\n<li><p>安装fish</p>\n<p>Ubuntu 安装fish 并且设为默认shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install fish</span><br><span class=\"line\">chsh -s $(which fish)</span><br></pre></td></tr></table></figure>\n<p><strong>解释:</strong></p>\n<p>chsh -s 后面加路径 ： 设置当前用户默认shell<br>which fish ：查看fish程序的路径<br>chsh -s $(which fish) : 设置fish为当前用户默认shell</p>\n</li>\n<li><p>安装oh my fish</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/bpinto/oh-my-fish/raw/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>theme: <a href=\"https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md\" target=\"_blank\" rel=\"noopener\">https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md</a><br>个人使用： robbyrussell</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Vim篇\"><a href=\"#Vim篇\" class=\"headerlink\" title=\"Vim篇\"></a>Vim篇</h2><p><a href=\"https://github.com/amix/vimrc\" target=\"_blank\" rel=\"noopener\">https://github.com/amix/vimrc</a></p>\n","categories":["Ubuntu"],"tags":["Ubuntu","beautify","config","init"]},{"title":"effective python 学习笔记","url":"http://mu-mo.top/2018/05/01/Python/effective python学习笔记/","content":"<p><em>人生苦短我用 Python</em></p>\n<p><em>注：最后附电子书地址</em></p>\n<h2 id=\"一、Pythonic-Thinking\"><a href=\"#一、Pythonic-Thinking\" class=\"headerlink\" title=\"一、Pythonic Thinking\"></a>一、Pythonic Thinking</h2><h3 id=\"第1条-确认自己所用的Python版本\"><a href=\"#第1条-确认自己所用的Python版本\" class=\"headerlink\" title=\"第1条: 确认自己所用的Python版本\"></a>第1条: 确认自己所用的Python版本</h3><ul>\n<li>使用python -version查看当前Python版本</li>\n<li>Python的运行时版本：CPython，JyPython，IronPython和PyPy等</li>\n<li>优先考虑使用 Python 3</li>\n</ul>\n<h3 id=\"第2条-遵循PEP-8-风格指南\"><a href=\"#第2条-遵循PEP-8-风格指南\" class=\"headerlink\" title=\"第2条: 遵循PEP 8 风格指南\"></a>第2条: 遵循PEP 8 风格指南</h3><p>PEP 8：<a href=\"http://www.python.org/dev/peps/pep-0008/\" target=\"_blank\" rel=\"noopener\">http://www.python.org/dev/peps/pep-0008/</a></p>\n<p>PEP 8：<a href=\"http://www.python.org/dev/peps/pep-0008/\" target=\"_blank\" rel=\"noopener\">http://www.python.org/dev/peps/pep-0008/</a></p>\n<h4 id=\"空白\"><a href=\"#空白\" class=\"headerlink\" title=\"空白:\"></a>空白:</h4><ul>\n<li>不要使用 tab 缩进，使用空格来缩进</li>\n<li>使用四个空格缩进，使用四个空格对长表达式换行缩进</li>\n<li>每行的字符数不应该超过 79</li>\n<li>class和funciton之间用两个空行，class的method之间用一个空行</li>\n<li>list索引和函数调用，关键字参数赋值不要在两旁加空格</li>\n<li>变量赋值前后都用一个空格</li>\n</ul>\n<h4 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h4><ul>\n<li>函数，变量以及属性应该使用小写，如果有多个单词推荐使用下划线进行连接，如lowercase_underscore</li>\n<li><strong>被保护</strong> 的属性应该使用 <strong>单个</strong> 前导下划线来声明。</li>\n<li><strong>私有</strong> 的属性应该使用 <strong>两个</strong> 前导下划线来进行声明。</li>\n<li><strong>类以及异常信息</strong> 应该使用单词 <strong>首字母大写</strong> 形式，也就是我们经常使用的驼峰命名法，如CapitalizedWord。</li>\n<li><strong>模块级</strong> 别的常量应该使用 <strong>全部大写</strong> 的形式, 如ALL_CAPS。</li>\n<li>类内部的实例方法的应该将<code>self</code>作为其第一个参数。且<code>self</code>也是对当前类对象的引用。</li>\n<li>类方法应该使用<code>cls</code>来作为其第一个参数。且<code>self</code>引用自当前类。</li>\n</ul>\n<h4 id=\"表达式和语句-Python之禅：-每件事都应该有直白的做法，而且最好只有一种\"><a href=\"#表达式和语句-Python之禅：-每件事都应该有直白的做法，而且最好只有一种\" class=\"headerlink\" title=\"表达式和语句( Python之禅： 每件事都应该有直白的做法，而且最好只有一种 )\"></a>表达式和语句( <strong>Python之禅： 每件事都应该有直白的做法，而且最好只有一种</strong> )</h4><ul>\n<li>使用内联否定（如 <code>if a is not b</code>） 而不是显示的表达式（如<code>if not a is b</code>）。</li>\n<li>不要简单地通过变量的长度（<code>if len(somelist) == 0</code>）来判断空值。使用隐式的方式如来假设空值的情况（如<code>if not somelist</code> 与 <code>False</code>来进行比较）。</li>\n<li>上面的第二条也适用于非空值（如<code>[1]</code>,或者’hi’）。对这些非空值而言 <code>if somelist</code>默认包含隐式的<code>True</code>。</li>\n<li>避免将<code>if</code> , <code>for</code>, <code>while</code>, <code>except</code>等包含多个语块的表达式写在一行内，应该分割成多行。</li>\n<li>总是把<code>import</code>语句写在<code>Python</code>文件的顶部。</li>\n<li>当引用一个模块的时候使用绝对的模块名称，而不是与当前模块路径相关的名称。例如要想引入<code>bar</code>包下面的<code>foo</code>模块，应该使用<code>from bar import foo</code>而不是<code>import foo</code>。</li>\n<li>如果非要相对的引用，应该使用明确的语法<code>from . import foo</code>。</li>\n<li>按照以下规则引入模块：标准库，第三方库，你自己的库。每一个部分内部也应该按照字母顺序来引入。</li>\n</ul>\n<h3 id=\"第3条-了解-bytes、str与-unicode-的区别\"><a href=\"#第3条-了解-bytes、str与-unicode-的区别\" class=\"headerlink\" title=\"第3条: 了解 bytes、str与 unicode 的区别\"></a>第3条: 了解 bytes、str与 unicode 的区别</h3><h4 id=\"备忘录：\"><a href=\"#备忘录：\" class=\"headerlink\" title=\"备忘录：\"></a>备忘录：</h4><ul>\n<li>Python3 两种字符串类型：bytes和str，bytes表示8-bit的二进制值，str表示unicode字符</li>\n<li>Python2 两种字符串类型：str和unicode，str表示8-bit的二进制值，unicode表示unicode字符</li>\n<li>从文件中读取或者写入二进制数据时，总应该使用 ‘rb’ 或 ‘wb’ 等二进制模式来开启文件</li>\n</ul>\n<p>​      <code>Python3</code>中的<code>str</code>实例和<code>Python2</code>中的<code>unicode</code>实例并没有相关联的二进制编码。所以要想将<code>Unicode</code>字符转换成二进制数据，就必须使用<code>encode</code>方法，反过来，要想把二进制数据转换成<code>Unicode</code>字符，就必须使用<code>decode</code>方法。</p>\n<p>​      当你开始写<code>Python</code>程序的时候，在接口的最开始位置声明对<code>Unicode</code>的编码解码的细节很重要。在你的代码中，最核心的部分应使用<code>Unicode</code>字符类型（<code>Python3</code>中使用<code>str</code>,<code>Python2</code>中使用<code>unicode</code>）并且不应该考虑关于字符编码的任何其他方式。本文允许你使用自己喜欢的可替代性的文本编码方式（如<code>Latin-1</code>,<code>Shift JIS</code>, <code>Big5</code>），但是应该对你的文本输出编码严格的限定一下（理想的方式是使用<code>UTF-8</code>编码）。</p>\n<p>由于字符类型的不同，导致了Python代码中出现了两种常见的情形的发生。</p>\n<ul>\n<li><p>你想操作<code>UTF-8</code>（或者其他的编码方式）编码的8比特值 序列。</p>\n</li>\n<li><p>你想操作没有特定编码的<code>Unicode</code>字符。 所以你通常会需要两个工具函数来对这两种情况的字符进行转换，以此来确保输入值符合代码所预期的字符类型。</p>\n</li>\n<li><p>二进制值和unicode字符需要经过encode和decode转换，Python2的unicode和Python3的str没有关联二进制编码，通常使用UTF-8</p>\n</li>\n<li><p>Python2转换函数：</p>\n<ul>\n<li><p>to_unicode</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python 2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_unicode</span><span class=\"params\">(unicode_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(unicode_or_str, str):</span><br><span class=\"line\">        value = unicode_or_str.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = unicode_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value <span class=\"comment\"># Instance of unicode</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>to_str</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python 2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_str</span><span class=\"params\">(unicode_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(unicode_or_str, unicode):</span><br><span class=\"line\">        value = unicode_or_str.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = unicode_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value <span class=\"comment\"># Instance of str</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Python2，如果str只包含7-bit的ascii字符，unicode和str是一样的类型，所以：</p>\n<ul>\n<li>使用+连接：str + unicode</li>\n<li>可以对str和unicode进行比较</li>\n<li>unicode可以使用格式字符串，’%s’</li>\n</ul>\n<p>注：在Python2中，如果只处理7位ASCII的情形下，可以等价 str 和 unicode 上面的规则，在Python3中 bytes 和 str 实例绝不等价</p>\n</li>\n<li><p>使用open返回的文件操作，在Python3是默认进行UTF-8编码，但在Pyhton2是二进制编码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python3</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(‘/tmp/random.bin’, ‘w’) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#TypeError: must be str, not bytes</span></span><br></pre></td></tr></table></figure>\n<p>这时我们可以用二进制方式进行写入和读取：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python3</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>,<span class=\"string\">'wb) as f:</span></span><br><span class=\"line\"><span class=\"string\">    f.write(os.urandom(10))</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第4条：用辅助函数来取代复杂的表达式\"><a href=\"#第4条：用辅助函数来取代复杂的表达式\" class=\"headerlink\" title=\"第4条：用辅助函数来取代复杂的表达式\"></a>第4条：用辅助函数来取代复杂的表达式</h3><ul>\n<li>开发者很容易过度使用Python的语法特效，从而写出那种特别复杂并且难以理解的单行表达式</li>\n<li>请把复杂的表达式移入辅助函数中，如果要反复使用相同的逻辑，那就更应该这么做</li>\n<li>使用 if/else 表达式，要比使用 or 或者 and 这样的 Booolean 操作符更加清晰</li>\n</ul>\n<h3 id=\"第5条：了解切割序列的办法\"><a href=\"#第5条：了解切割序列的办法\" class=\"headerlink\" title=\"第5条：了解切割序列的办法\"></a>第5条：了解切割序列的办法</h3><ul>\n<li><p>分片机制自动处理越界问题，但是最好在表达边界大小范围是更加的清晰。（如<code>a[:20]</code> 或者<code>a[-20:]</code>）</p>\n</li>\n<li><p>list，str，bytes和实现__getitem__和__setitem__ 这两个特殊方法的类都支持slice操作</p>\n</li>\n<li><p>基本形式是：somelist[start:end]，不包括end，可以使用负数，-1 表示最后一个，默认正向选取，下标0可以省略，最后一个下标也可以省略</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br><span class=\"line\">print(<span class=\"string\">'Middle Two:'</span>,a[<span class=\"number\">3</span>:<span class=\"number\">-3</span>])</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Middle Two: [<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>slice list是shadow copy，somelist[0:]会复制原list，切割之后对新得到的列表进行修改不会影响原来的列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br><span class=\"line\">b = a[<span class=\"number\">4</span>:]</span><br><span class=\"line\">print(<span class=\"string\">\"Before:\"</span>, b)</span><br><span class=\"line\">b[<span class=\"number\">1</span>] = <span class=\"number\">99</span></span><br><span class=\"line\">print(<span class=\"string\">\"After:\"</span>,b)</span><br><span class=\"line\">print(<span class=\"string\">\"Original:\"</span>,a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Before: [<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br><span class=\"line\">After: [<span class=\"string\">'e'</span>,<span class=\"number\">99</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br><span class=\"line\">Original: [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>slice赋值会修改slice list，即使长度不一致（增删改）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(&quot;Before:&quot;,a)</span><br><span class=\"line\">a[2:7] = [99,22,14]</span><br><span class=\"line\">print(&quot;After:&quot;,a)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Before: [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;,&apos;g&apos;,&apos;h&apos;]</span><br><span class=\"line\">After: [&apos;a&apos;,&apos;b&apos;,99,22,14,&apos;h&apos;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引用-变化-追随</p>\n<p>当为列表赋值的时候省去开头和结尾下标的时候，将会用 <strong>这个引用</strong> 来替换整个列表的内容，而不是创建一个新的列表。同时，引用了这个列表的列表的相关内容，也会跟着发生变化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br><span class=\"line\">b = a</span><br><span class=\"line\">print(<span class=\"string\">\"Before:\"</span>,b)</span><br><span class=\"line\">a[:] = [<span class=\"number\">101</span>,<span class=\"number\">102</span>,<span class=\"number\">103</span>]</span><br><span class=\"line\">print(<span class=\"string\">\"After:\"</span>,b)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Before: [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br><span class=\"line\">After: [<span class=\"number\">101</span>,<span class=\"number\">102</span>,<span class=\"number\">103</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决方案：深拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">print(<span class=\"string\">\"Before:\"</span>,b)</span><br><span class=\"line\">a[:] = [<span class=\"number\">101</span>,<span class=\"number\">102</span>,<span class=\"number\">103</span>]</span><br><span class=\"line\">print(<span class=\"string\">\"After:\"</span>,b)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Before: [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br><span class=\"line\">After: [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第6条-避免在单次切片操作内同事指定-start、end和-stride（个人觉得还好）\"><a href=\"#第6条-避免在单次切片操作内同事指定-start、end和-stride（个人觉得还好）\" class=\"headerlink\" title=\"第6条: 避免在单次切片操作内同事指定 start、end和 stride（个人觉得还好）\"></a>第6条: 避免在单次切片操作内同事指定 start、end和 stride（个人觉得还好）</h3><h4 id=\"备忘录：-1\"><a href=\"#备忘录：-1\" class=\"headerlink\" title=\"备忘录：\"></a>备忘录：</h4><ul>\n<li>在分片中指定<code>start</code>，<code>end</code>,<code>stride</code>会让人感到困惑，难于阅读。</li>\n<li>尽可能的避免在分片中使用负数值。</li>\n<li>避免在分片中同时使用<code>start</code>，<code>end</code>，<code>stride</code>；如果非要使用，考虑两次赋值（一个分片，一个调幅），或者使用内置模块<code>itertoolsde</code> 的 <code>islice</code>方法来进行处理。</li>\n</ul>\n<h4 id=\"步幅\"><a href=\"#步幅\" class=\"headerlink\" title=\"步幅\"></a>步幅</h4><p><code>Python</code> 有针对步幅的特殊的语法，形如：<code>somelist[start:end:stride]</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'red'</span>,<span class=\"string\">'orange'</span>,<span class=\"string\">'yellow'</span>,<span class=\"string\">'green'</span>,<span class=\"string\">'blue'</span>,<span class=\"string\">'purple'</span>]</span><br><span class=\"line\">odds = a[::<span class=\"number\">2</span>]</span><br><span class=\"line\">print(odds)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"string\">'red'</span>,<span class=\"string\">'yellow'</span>,<span class=\"string\">'blue'</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"负数步幅\"><a href=\"#负数步幅\" class=\"headerlink\" title=\"负数步幅\"></a>负数步幅</h4><p>步幅为-1来实现字符串的逆序，反向选取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当数据仅仅为ASCII码内数据时工作正常</span></span><br><span class=\"line\">x = <span class=\"string\">b'mongoose'</span></span><br><span class=\"line\">y = x[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">print(y)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"string\">b'esoognom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 出现Unicode字符的时候就会报错</span></span><br><span class=\"line\">w = <span class=\"string\">'谢谢'</span></span><br><span class=\"line\">x = w.encode(utf<span class=\"number\">-8</span><span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">y = a[::-1]</span></span><br><span class=\"line\"><span class=\"string\">z = y.decode('</span>utf<span class=\"number\">-8</span><span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt;</span></span><br><span class=\"line\"><span class=\"string\">UnicodeDecodeError: '</span>utf<span class=\"number\">-8</span><span class=\"string\">' codec can'</span>t decode byte <span class=\"number\">0x9d</span> <span class=\"keyword\">in</span> position <span class=\"number\">0</span>: invalid start byte.</span><br><span class=\"line\">        </span><br><span class=\"line\">a = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>]</span><br><span class=\"line\">a[<span class=\"number\">2</span>::<span class=\"number\">2</span>]     <span class=\"comment\"># ['c','e','g']</span></span><br><span class=\"line\">a[<span class=\"number\">-2</span>::<span class=\"number\">-2</span>]    <span class=\"comment\"># ['g','e','c','a']</span></span><br><span class=\"line\">a[<span class=\"number\">-2</span>:<span class=\"number\">2</span>:<span class=\"number\">-2</span>]   <span class=\"comment\"># ['g','e'] 尤其注意这里，类似于坐标轴，分片范围是左闭右开，所以2的位置不可达</span></span><br><span class=\"line\">a[<span class=\"number\">2</span>:<span class=\"number\">2</span>:<span class=\"number\">-2</span>]    <span class=\"comment\"># []</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第7条-用列表推导来代替-map-和-filter\"><a href=\"#第7条-用列表推导来代替-map-和-filter\" class=\"headerlink\" title=\"第7条: 用列表推导来代替 map 和 filter\"></a>第7条: 用列表推导来代替 map 和 filter</h3><h4 id=\"备忘录\"><a href=\"#备忘录\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>列表表达式比内置的<code>map</code>,<code>filter</code>更加清晰，因为<code>map</code>,<code>filter</code>需要额外的<code>lambda</code>表达式的支持。</li>\n<li>列表表达式允许你很容易的跳过某些输入值，而一个<code>map</code>没有<code>filter</code>帮助的话就不能完成这一个功能。</li>\n<li>字典和集合也都支持列表表达式。</li>\n</ul>\n<p>第一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">squares = [x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a]</span><br><span class=\"line\">print(squares)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">16</span>,<span class=\"number\">25</span>,<span class=\"number\">36</span>,<span class=\"number\">49</span>,<span class=\"number\">64</span>,<span class=\"number\">81</span>,<span class=\"number\">100</span>]</span><br></pre></td></tr></table></figure>\n<p>map和filter需要lambda函数，使得代码更不可读</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">squares = map(<span class=\"keyword\">lambda</span> x: x **<span class=\"number\">2</span> ,a)</span><br></pre></td></tr></table></figure>\n<p>第二个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">even_squares = [x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br><span class=\"line\">print(even_squares)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">16</span>,<span class=\"number\">36</span>,<span class=\"number\">64</span>,<span class=\"number\">100</span>]</span><br></pre></td></tr></table></figure>\n<p>map：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">alt = map(<span class=\"keyword\">lambda</span> x: x**<span class=\"number\">2</span>, filter(<span class=\"keyword\">lambda</span> x: x%<span class=\"number\">2</span>==<span class=\"number\">0</span>,a))</span><br><span class=\"line\"><span class=\"keyword\">assert</span> even_squares== list(alt)</span><br></pre></td></tr></table></figure>\n<p><strong>字典和集合</strong> 有他们自己的一套列表表达式。这使得书写算法的时候导出数据结构更加的简单。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">chile_rank = &#123;<span class=\"string\">'ghost'</span>:<span class=\"number\">1</span>,<span class=\"string\">'habanero'</span>:<span class=\"number\">2</span>,<span class=\"string\">'cayenne'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">rank_dict = &#123;rank:name <span class=\"keyword\">for</span> name,rank <span class=\"keyword\">in</span> child_rank.items()&#125;</span><br><span class=\"line\">chile_len_set = &#123;len(name) <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> rank_dict.values()&#125;</span><br><span class=\"line\">print(rand_dict)</span><br><span class=\"line\">print(chile_len_set)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>: <span class=\"string\">'ghost'</span>,<span class=\"number\">2</span>: <span class=\"string\">'habanero'</span>,<span class=\"number\">3</span>: <span class=\"string\">'cayenne'</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第8条-在列表表达式中避免使用超过两个的表达式\"><a href=\"#第8条-在列表表达式中避免使用超过两个的表达式\" class=\"headerlink\" title=\"第8条: 在列表表达式中避免使用超过两个的表达式\"></a>第8条: 在列表表达式中避免使用超过两个的表达式</h3><h4 id=\"备忘录：-2\"><a href=\"#备忘录：-2\" class=\"headerlink\" title=\"备忘录：\"></a>备忘录：</h4><ul>\n<li>列表表达式支持多层的循环和条件语句，以及每层循环内部的条件语句。</li>\n<li>当列表表达式内部多余两个表达式的时候就会变得难于阅读，这种写法应该避免使用。</li>\n</ul>\n<h4 id=\"第一个例子：\"><a href=\"#第一个例子：\" class=\"headerlink\" title=\"第一个例子：\"></a>第一个例子：</h4><p>not:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">squared = [[ x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> row] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix]</span><br><span class=\"line\">print(squared)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>],[<span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>],[<span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]]</span><br></pre></td></tr></table></figure>\n<p>prefer:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">matrix = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],[<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]]</span><br><span class=\"line\">flat = [x <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> row]</span><br><span class=\"line\">print(flat)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二个例子：\"><a href=\"#第二个例子：\" class=\"headerlink\" title=\"第二个例子：\"></a>第二个例子：</h4><p>not:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">my_lists = [</span><br><span class=\"line\">    [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]],</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\">flat = [ x <span class=\"keyword\">for</span> sublist <span class=\"keyword\">in</span> my_lists</span><br><span class=\"line\">          <span class=\"keyword\">for</span> sublist2 <span class=\"keyword\">in</span> sublist</span><br><span class=\"line\">          <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> sublist2]</span><br><span class=\"line\"></span><br><span class=\"line\">print(flat)</span><br></pre></td></tr></table></figure>\n<p>prefer:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">flat = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> sublist <span class=\"keyword\">in</span> my_lists:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> sublist2 <span class=\"keyword\">in</span> sublist:</span><br><span class=\"line\">        flat.append(sublist2)</span><br></pre></td></tr></table></figure>\n<p>从这点来看，多行的列表表达式并不比原方案少多少代码。这里，作者更加的建议使用正常的循环体语句。因为其比列表表达式更简洁好看一点,也更加易读，易懂。</p>\n<h4 id=\"第三个例子：\"><a href=\"#第三个例子：\" class=\"headerlink\" title=\"第三个例子：\"></a>第三个例子：</h4><p>列表表达式同样支持if条件语句。多个条件语句出现在相同的循环水平中也是一个隐式<code>&amp;</code>的表达,即同时成立才成立。例如：你只想获得列表中大于4且是偶数的值。那么下面的两个列表表达式是等价的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">b = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt; <span class=\"number\">4</span> <span class=\"keyword\">if</span> x%<span class=\"number\">2</span> ==<span class=\"number\">0</span>]</span><br><span class=\"line\">c = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x &gt; <span class=\"number\">4</span> <span class=\"keyword\">and</span> <span class=\"keyword\">if</span> x%<span class=\"number\">2</span> ==<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>条件语句可以被很明确的添加在每一层循环的<code>for</code>表达式的后面，起到过滤的作用。例如：你想过滤出每行总和大于10且能被3正处的元素。虽然用列表表达式表示出这段代码很短，但是其可读性确实很糟糕。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">matrix = [[ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],[ <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],[ <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]]</span><br><span class=\"line\">filtered = [[x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> row <span class=\"keyword\">if</span> x%<span class=\"number\">3</span>==<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix <span class=\"keyword\">if</span> sum(row) &gt;= <span class=\"number\">10</span> ]</span><br><span class=\"line\">print(filtered)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[[<span class=\"number\">6</span>],[<span class=\"number\">9</span>]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第9条-数据量较大的地方考虑使用生成器表达式\"><a href=\"#第9条-数据量较大的地方考虑使用生成器表达式\" class=\"headerlink\" title=\"第9条: 数据量较大的地方考虑使用生成器表达式\"></a>第9条: 数据量较大的地方考虑使用生成器表达式</h3><h4 id=\"备忘录-1\"><a href=\"#备忘录-1\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>当遇到大输入事件的时候，使用列表表达式可能导致一些问题。</li>\n<li>生成器表达式通过迭代的方式来处理每一个列表项，可以防止出现内存危机。</li>\n<li>当生成器表达式 处于链式状态时，会执行的很迅速。</li>\n</ul>\n<h4 id=\"列表生成式的缺点\"><a href=\"#列表生成式的缺点\" class=\"headerlink\" title=\"列表生成式的缺点\"></a>列表生成式的缺点</h4><p>列表生成式会给输入列表中的每一个只创建一个新的只包含一个元素的列表。这对于小的输入序列可能是很好用的，但是大的输入序列而言就很有可能导致你的程序崩溃。</p>\n<h4 id=\"生成器表达式的好处\"><a href=\"#生成器表达式的好处\" class=\"headerlink\" title=\"生成器表达式的好处\"></a>生成器表达式的好处</h4><p><code>Python</code>提供了一个<code>generator expression</code>（生成器表达式），在程序运行的过程中，生成其表达式不实现整个输出序列，相反,生成其表达式仅仅是对从表达式中产生一个项目的迭代器进行计算，说白了就是每次仅仅处理一个迭代项，而不是整个序列。</p>\n<p>生成器表达式通过使用类似于列表表达式的语法（在<code>()</code>之间而不是<code>[]</code>之间，仅此区别）来创建。</p>\n<p>举例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">it = ( len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(<span class=\"string\">'/tmp/my_file.txt'</span>))</span><br><span class=\"line\">print(it)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x101b81480</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">57</span></span><br></pre></td></tr></table></figure>\n<p>链式操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">roots = ((x,x**<span class=\"number\">0.5</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> it)</span><br><span class=\"line\">print(next(roots))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">(<span class=\"number\">15</span>,<span class=\"number\">3.872983346207417</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第10条：enumerate-比range更好用\"><a href=\"#第10条：enumerate-比range更好用\" class=\"headerlink\" title=\"第10条：enumerate 比range更好用\"></a>第10条：enumerate 比range更好用</h3><h4 id=\"备忘录：-3\"><a href=\"#备忘录：-3\" class=\"headerlink\" title=\"备忘录：\"></a>备忘录：</h4><ul>\n<li><code>enumerate</code>提供了简洁的语法，再循环迭代一个迭代器的同时既能获取下标，也能获取当前值。</li>\n<li>可以添加第二个参数来指定 索引开始的序号，默认为<code>0</code></li>\n</ul>\n<p>Prefer</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, flavor <span class=\"keyword\">in</span> enumerate(flavor_list):</span><br><span class=\"line\">    print(‘%d: %s’ % (i + <span class=\"number\">1</span>, flavor))</span><br></pre></td></tr></table></figure>\n<p>not</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(flavor_list)):</span><br><span class=\"line\">    flavor = flavor_list[i]</span><br><span class=\"line\">        print(‘%d: %s’ % (i + <span class=\"number\">1</span>, flavor))</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># 也可以通过指定 索引开始的下标序号来简化代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, flavor <span class=\"keyword\">in</span> enumerate(flavor_list,<span class=\"number\">1</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d: %s\"</span>%(i,flavor))</span><br></pre></td></tr></table></figure>\n<h3 id=\"第11条：用-zip-函数来同时遍历两个迭代器\"><a href=\"#第11条：用-zip-函数来同时遍历两个迭代器\" class=\"headerlink\" title=\"第11条：用 zip 函数来同时遍历两个迭代器\"></a>第11条：用 zip 函数来同时遍历两个迭代器</h3><h4 id=\"备忘录-2\"><a href=\"#备忘录-2\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>内置的<code>zip</code>函数可以并行的对多个迭代器进行处理。</li>\n<li>在<code>Python3</code>中，<code>zip</code> 采用懒模式生成器获得的是元组；而在<code>Python2</code>中，<code>zip</code>返回的是一个包含了其处理好的所有元祖的一个集合。</li>\n<li>如果所处理的迭代器的长度不一致时，<code>zip</code>会默认截断输出，使得长度为最先到达尾部的那个长度。</li>\n<li>内置模块<code>itertools</code>中的<code>zip_longest</code>函数可以并行地处理多个迭代器，而可以无视长度不一致的问题。</li>\n</ul>\n<p>Prefer:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求最长字符串</span></span><br><span class=\"line\">names = [‘Cecilia’, ‘Lise’, ‘Marie’]</span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letters):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br><span class=\"line\">        </span><br><span class=\"line\">print(longest_name)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Cecilia</span><br></pre></td></tr></table></figure>\n<p>not:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> enumerate(names):</span><br><span class=\"line\">\tcount = letters[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure>\n<h3 id=\"第12条-在for-和while-循环体后避免使用else语句块\"><a href=\"#第12条-在for-和while-循环体后避免使用else语句块\" class=\"headerlink\" title=\"第12条: 在for 和while 循环体后避免使用else语句块\"></a>第12条: 在for 和while 循环体后避免使用else语句块</h3><h4 id=\"备忘录-3\"><a href=\"#备忘录-3\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li><code>Python</code>有用特殊的语法能够让<code>else</code>语块在循环体结束的时候立刻得到执行。</li>\n<li>循环体后的<code>else</code>语块只有在循环体没有触发<code>break</code>语句的时候才会执行。</li>\n<li>避免在循环体的后面使用<code>else</code>语块，因为这样的表达不直观，而且容易误导读者。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">    print(<span class=\"string\">'Loop %d'</span> % i)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Else block'</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Loop <span class=\"number\">0</span></span><br><span class=\"line\">Loop <span class=\"number\">1</span></span><br><span class=\"line\">Loop <span class=\"number\">2</span></span><br><span class=\"line\">Else block</span><br></pre></td></tr></table></figure>\n<h3 id=\"第13条-合理利用-try-except-else-finally\"><a href=\"#第13条-合理利用-try-except-else-finally\" class=\"headerlink\" title=\"第13条: 合理利用 try/except/else/finally\"></a>第13条: 合理利用 try/except/else/finally</h3><h4 id=\"备忘录-4\"><a href=\"#备忘录-4\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li><code>try/finally</code>组合语句可以使得你的代码变得很整洁而无视<code>try</code>块中是否发生异常。</li>\n<li><code>else</code>块可以最大限度的减少<code>try</code>块中的代码的长度，并且可以可视化地辨别<code>try/except</code>成功运行的部分。</li>\n<li><code>else</code>块经常会被用于在<code>try</code>块成功运行后添加额外的行为，但是要确保代码会在<code>finally</code>块之前得到运行。\\</li>\n</ul>\n<ol>\n<li><p>finally 块</p>\n<p>总是会执行，可以用来关闭文件句柄之类的</p>\n</li>\n<li><p>else 块</p>\n<p>try 块没有发生异常则执行 else 块，有了 else 块，我们可以尽量减少 try 块的代码量</p>\n</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">UNDEFINED = object()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">divide_json</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    handle = open(path, <span class=\"string\">'r+'</span>) <span class=\"comment\"># May raise IOError</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        data = handle.read() <span class=\"comment\"># May raise UnicodeDecodeError</span></span><br><span class=\"line\">        op = json.loads(data) <span class=\"comment\"># May raise ValueError</span></span><br><span class=\"line\">        value = (op[<span class=\"string\">'numerator'</span>] / op[<span class=\"string\">'denominator'</span>]) <span class=\"comment\"># May raise ZeroDivisionError</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UNDEFINED</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        op[‘result’] = value</span><br><span class=\"line\">        result = json.dumps(op)</span><br><span class=\"line\">        handle.seek(<span class=\"number\">0</span>)</span><br><span class=\"line\">        handle.write(result) <span class=\"comment\"># May raise IOError</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        handle.close() <span class=\"comment\"># Always runs</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、函数\"><a href=\"#二、函数\" class=\"headerlink\" title=\"二、函数\"></a>二、函数</h2><h3 id=\"第14条-返回-exceptions-而不是-None\"><a href=\"#第14条-返回-exceptions-而不是-None\" class=\"headerlink\" title=\"第14条: 返回 exceptions 而不是 None\"></a>第14条: 返回 exceptions 而不是 None</h3><h4 id=\"备忘录-5\"><a href=\"#备忘录-5\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>返回<code>None</code>的函数来作为特殊的含义是容易出错的，因为<code>None</code>和其他的变量（例如 <code>zero</code>，空字符串）在条件表达式的判断情景下是等价的。</li>\n<li>通过触发一个异常而不是直接的返回<code>None</code>是比较常用的一个方法。这样调用方就能够合理地按照函数中的说明文档来处理由此而引发的异常了。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">divide</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>返回 None 容易造成误用，下面的程式分不出 0 和 None</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x, y = <span class=\"number\">0</span>, <span class=\"number\">5</span></span><br><span class=\"line\">result = divide(x, y)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result:</span><br><span class=\"line\">    print(<span class=\"string\">'Invalid inputs'</span>)  <span class=\"comment\"># This is wrong!</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<p>raise exception:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">divide</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Invalid inputs'</span>) <span class=\"keyword\">from</span> e</span><br></pre></td></tr></table></figure>\n<p>调用者看到该函数的文档中描述的异常之后，应该就会编写相应的代码来处理它们了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x, y = <span class=\"number\">5</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    result = divide(x, y)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    print(<span class=\"string\">\"Invalid inputs\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Result is %.1f\"</span>% result)</span><br><span class=\"line\"> &gt;&gt;&gt;</span><br><span class=\"line\"> Result <span class=\"keyword\">is</span> <span class=\"number\">2.5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第15条-了解闭包中是怎样使用外围作用域变量\"><a href=\"#第15条-了解闭包中是怎样使用外围作用域变量\" class=\"headerlink\" title=\"第15条: 了解闭包中是怎样使用外围作用域变量\"></a>第15条: 了解闭包中是怎样使用外围作用域变量</h3><h4 id=\"备忘录-6\"><a href=\"#备忘录-6\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>闭包函数可以从变量被定义的作用域内引用变量。</li>\n<li>默认地，闭包不能通过赋值来影响其检索域。</li>\n<li>在<code>Python3</code>中，可以使用<code>nonlocal</code>关键字来突破闭包的限制，进而在其检索域内改变其值。(<code>global</code> 关键字用于使用全局变量，<code>nonlocal</code> 关键字用于使用局部变量(函数内))</li>\n<li><code>Python2</code>中没有<code>nonlocal</code>关键字，替代方案就是使用一个单元素（如列表，字典，集合等等）来实现与<code>nonlocal</code>一致的功能。</li>\n<li>除了简单的函数，在其他任何地方都应该尽力的避免使用<code>nonlocal</code>关键字。</li>\n</ul>\n<p>Python编译器变量查找域的顺序：</p>\n<ul>\n<li>当前函数的作用域</li>\n<li>任何其他的封闭域（比如其他的包含着的函数）。</li>\n<li>包含该段代码的模块域（也称之为全局域）</li>\n<li>内置域（包含了像<code>len</code>,<code>str</code>等函数的域）</li>\n</ul>\n<p>考虑如下示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 优先排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_priority2</span><span class=\"params\">(values, group)</span>:</span></span><br><span class=\"line\">    found = <span class=\"keyword\">False</span>    <span class=\"comment\"># 作用域：sort_priority2</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> group:</span><br><span class=\"line\">            found = <span class=\"keyword\">True</span>      <span class=\"comment\"># 作用域： helper</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"number\">0</span>, x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"number\">1</span>, x)   <span class=\"comment\"># found在helper的作用域就会由helper转至sort_priority2函数</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    values.sort(key=helper)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">values = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">group = [<span class=\"number\">7</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\"># begin to call</span></span><br><span class=\"line\">found = sort_priority2(values, group)</span><br><span class=\"line\">print(<span class=\"string\">\"Found:\"</span>,found)</span><br><span class=\"line\">print(values)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Found: <span class=\"keyword\">False</span></span><br><span class=\"line\">[<span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n<p>排序的结果是正确的，但是很明显分组的那个标志是不正确的了。<code>group</code>中的元素无疑可以在<code>values</code>里面找到，但是函数却返回了<code>False</code>，为什么会发生这样的状况呢？（提示：Python 编译器变量查找域的顺序）</p>\n<h4 id=\"把数据放到外边\"><a href=\"#把数据放到外边\" class=\"headerlink\" title=\"把数据放到外边\"></a>把数据放到外边</h4><p>在<code>Python3</code>中，对于闭包而言有一个把数据放到外边的特殊的语法。<code>nonlocal</code>语句习惯于用来表示一个特定变量名称的域的遍历发生在赋值之前。 唯一的限制就是<code>nonlocal</code>不会向上遍历到模块域级别（这也是为了防止污染全局变量空间）。这里，我定义了一个使用了<code>nonlocal</code>关键字的函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">srt_priority3</span><span class=\"params\">(numbers, group)</span>:</span></span><br><span class=\"line\">    found = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> found </span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> group:</span><br><span class=\"line\">            found = <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"number\">0</span>, x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"number\">1</span>, x)</span><br><span class=\"line\">    numbers.sort(key=helper)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> found</span><br></pre></td></tr></table></figure>\n<p>当数据在闭包外将被赋值到另一个域时，<code>nonlocal</code> 语句使得这个过程变得很清晰。它也是对<code>global</code>语句的一个补充，可以明确的表明变量的赋值应该被直接放置到模块域中。</p>\n<p>然而，像这样的反模式，对使用在那些简单函数之外的其他的任何地方。<code>nonlocal</code>引起的副作用是难以追踪的，而在那些包含着<code>nonlocal</code>语句和赋值语句交叉联系的大段代码的函数的内部则尤为明显。</p>\n<p>当你感觉自己的<code>nonlocal</code>语句开始变的复杂的时候，我非常建议你重构一下代码，写成一个工具类。这里，我定义了一个实现了与上面的那个函数功能相一致的工具类。虽然有点长，但是代码却变得更加的清晰了（详见第23项：对于简单接口使用函数而不是类里面的<code>__call__</code>方法）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sorter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, group)</span>:</span></span><br><span class=\"line\">        self.group = group</span><br><span class=\"line\">        self.found = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> self.group:</span><br><span class=\"line\">            self.found = <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"number\">0</span>, x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"number\">1</span>, x)</span><br><span class=\"line\"></span><br><span class=\"line\">sorter = Sorter(group)</span><br><span class=\"line\">numbers.sort(key=sorter)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> sorter <span class=\"keyword\">is</span> <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Python2中的作用域\"><a href=\"#Python2中的作用域\" class=\"headerlink\" title=\"Python2中的作用域\"></a>Python2中的作用域</h4><p>不幸的是，<code>Python2</code>是不支持<code>nonlocal</code>关键字的。为了实现相似的功能，你需要广泛的借助于<code>Python</code>的作用与域规则。虽然这个方法并不是完美的，但是这是<code>Python</code>中比较常用的一种做法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_priority</span><span class=\"params\">(numbers, group)</span>:</span></span><br><span class=\"line\">    found = [<span class=\"keyword\">False</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> group:</span><br><span class=\"line\">            found[<span class=\"number\">0</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"number\">0</span>, x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"number\">1</span>, x)</span><br><span class=\"line\">    numbers.sort(sort=helper)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> found[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>就像上面解释的那样，<code>Python</code> 将会横向查找该变量所在的域来分析其当前值。技巧就是发现的值是一个易变的列表。这意味着一旦检索，闭包就可以修改<code>found</code>的状态值，并且把内部数据的改变发送到外部，这也就打破了闭包引发的局部变量作用域无法被改变的难题。其根本还是在于列表本身元素值可以被改变，这才是此函数可以正常工作的关键。</p>\n<p>当<code>found</code>为一个<code>dictionary</code>类型的时候，也是可以正常工作的，原理与上文所言一致。此外，<code>found</code>还可以是一个集合，一个你自定义的类等等。</p>\n<h3 id=\"第16条-考虑使用生成器而不是返回列表\"><a href=\"#第16条-考虑使用生成器而不是返回列表\" class=\"headerlink\" title=\"第16条: 考虑使用生成器而不是返回列表\"></a>第16条: 考虑使用生成器而不是返回列表</h3><h4 id=\"备忘录-7\"><a href=\"#备忘录-7\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>相较于返回一个列表的情况，替代方案中使用生成器可以使得代码变得更加的清晰。</li>\n<li>生成器返回的迭代器，是在其生成器内部一个把值传递给了<code>yield</code>变量的集合。</li>\n<li>生成器可以处理很大的输出序列就是因为它在处理的时候不会完全的包含所有的数据。</li>\n</ul>\n<p>考虑以下两种版本代码，一个用 <strong>list </strong>，另一个用 <strong>generator</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index_words</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> text:</span><br><span class=\"line\">        result.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, letter <span class=\"keyword\">in</span> enumerate(text):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> letter == <span class=\"string\">' '</span>:</span><br><span class=\"line\">            result.append(index + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">address = <span class=\"string\">'Four score and seven years ago...'</span></span><br><span class=\"line\">result = index_words(address)</span><br><span class=\"line\">print(result[:<span class=\"number\">3</span>]) <span class=\"comment\"># [0, 5, 11]</span></span><br></pre></td></tr></table></figure>\n<p>generator</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index_words_iter</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> text:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, letter <span class=\"keyword\">in</span> enumerate(text):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> letter == <span class=\"string\">' '</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> index + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = list(index_words_iter(address))</span><br></pre></td></tr></table></figure>\n<p>使用 <strong>generator </strong> 比较简单，减少了 list 操作</p>\n<p>另一个 <strong>generator </strong>的好处是更有效率地使用记忆值，generator不需要有存全部的资料</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index_file</span><span class=\"params\">(handle)</span>:</span></span><br><span class=\"line\">    offset = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> handle:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> line:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> offset</span><br><span class=\"line\">        <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">            offset += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> letter == <span class=\"string\">' '</span>:</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> offset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/address.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    it = index_file(f)</span><br><span class=\"line\">    results = itertools.islice(it, <span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    print(list(results))</span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>]</span><br></pre></td></tr></table></figure>\n<p>不管address.txt 多大都能处理</p>\n<h3 id=\"第17条-遍历参数的时候小心一点\"><a href=\"#第17条-遍历参数的时候小心一点\" class=\"headerlink\" title=\"第17条: 遍历参数的时候小心一点\"></a>第17条: 遍历参数的时候小心一点</h3><h4 id=\"备忘录-8\"><a href=\"#备忘录-8\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>多次遍历输入参数的时候应该多加小心。如果参数是迭代器的话你可能看到奇怪的现象或者缺少值现象的发生。</li>\n<li><code>Python</code>的<code>iterator</code>协议定义了容器和迭代器在<code>iter</code>和<code>next</code>下对于循环和相关表达式的关系。</li>\n<li>只要实现了<code>__iter__</code>方法，你就可以很容易的定义一个可迭代的容器类。</li>\n<li>通过连续调用两次<code>iter</code>方法，你就可以预先检测一个值是不是迭代器而不是容器。两次结果一致那就是迭代器，否则就是容器了。</li>\n</ul>\n<p>generator不能重用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_visits</span><span class=\"params\">(data_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(data_path,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> int(line)</span><br><span class=\"line\"></span><br><span class=\"line\">it = read_visits(<span class=\"string\">'tmp/my_numbers.txt'</span>)</span><br><span class=\"line\">print(list(it))</span><br><span class=\"line\">print(list(it)) <span class=\"comment\"># 这里其实已经执行到头了</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"number\">15</span>, <span class=\"number\">35</span>, <span class=\"number\">80</span>]</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<p>造成上述结果的原因是 一个迭代器每次只处理它本身的数据。如果你遍历一个迭代器或者生成器本身已经引发了一个<code>StopIteration</code>的异常，你就不可能获得任何数据了。</p>\n<h4 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h4><p>每次调用都创建iterator避免上面list分配内存</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">normalize_func</span><span class=\"params\">(get_iter)</span>:</span>  <span class=\"comment\"># get_iter 是函数</span></span><br><span class=\"line\">    total = sum(get_iter())    <span class=\"comment\"># New iterator</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> get_iter():   <span class=\"comment\"># New iterator</span></span><br><span class=\"line\">       percent = <span class=\"number\">100</span> * value / total</span><br><span class=\"line\">       result.append(percent)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">percentages = normalize_func(<span class=\"keyword\">lambda</span>: read_visits(path))</span><br></pre></td></tr></table></figure>\n<p>for循环会调用内置iter函数，进而调用对象的__iter__方法，__iter__会返回iterator对象（实现__next__方法）</p>\n<p>用iter函数检测iterator：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">normalize_defensive</span><span class=\"params\">(numbers)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> iter(numbers) <span class=\"keyword\">is</span> iter(numbers): <span class=\"comment\"># 是个迭代器，这样不好</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">'Must supply a container'</span>)</span><br><span class=\"line\">    total = sum(numbers)</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        percent = <span class=\"number\">100</span> * value / total</span><br><span class=\"line\">        result.append(percent)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">visits = [<span class=\"number\">15</span>, <span class=\"number\">35</span>, <span class=\"number\">80</span>]</span><br><span class=\"line\">normalize_defensive(visits)</span><br><span class=\"line\">visits = ReadVIsitors(path)</span><br><span class=\"line\">normalize_defensive(visits)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 但是如果输入值不是一个容器类的话，就会引发异常了</span></span><br><span class=\"line\">it = iter(visits)</span><br><span class=\"line\">normalize_defensive(it)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">TypeError: Must supply a container</span><br></pre></td></tr></table></figure>\n<h3 id=\"第18条-减少位置参数上的干扰\"><a href=\"#第18条-减少位置参数上的干扰\" class=\"headerlink\" title=\"第18条: 减少位置参数上的干扰\"></a>第18条: 减少位置参数上的干扰</h3><h4 id=\"备忘录-9\"><a href=\"#备忘录-9\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>通过使用<code>*args</code>定义语句，函数可以接收可变数量的位置参数。</li>\n<li>你可以通过<code>*</code>操作符来将序列中的元素作为位置变量。</li>\n<li>带有<code>*</code>操作符的生成器变量可能会引起程序的内存溢出，或者机器宕机。</li>\n<li>为可以接受<code>*args</code>的函数添加新的位置参数可以产生难于发现的问题，应该谨慎使用。</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(message, values)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> values:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        values_str = <span class=\"string\">', '</span>.join(str(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        print(<span class=\"string\">'%s: %s'</span> % (message, values_str))</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">'My numbers are'</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">log(<span class=\"string\">'Hi there'</span>, [])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(message, *values)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> values:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        values_str = <span class=\"string\">', '</span>.join(str(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        print(<span class=\"string\">'%s: %s'</span> % (message, values_str))</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">'My numbers are'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">log(<span class=\"string\">'Hi there'</span>)</span><br></pre></td></tr></table></figure>\n<p>第二个就比第一个要更有弹性</p>\n<p>不过传入生成器的时候，因为变长参数在传给函数的时候，总要先转换为元组，所以如果生成器迭代的数据很大的话，可能会导致程序崩溃</p>\n<h3 id=\"第19条-使用关键字参数来提供可选行为\"><a href=\"#第19条-使用关键字参数来提供可选行为\" class=\"headerlink\" title=\"第19条: 使用关键字参数来提供可选行为\"></a>第19条: 使用关键字参数来提供可选行为</h3><h4 id=\"备忘录-10\"><a href=\"#备忘录-10\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>函数的参数值即可以通过位置被指定，也可以通过关键字来指定。</li>\n<li>相较于使用位置参数赋值，使用关键字来赋值会让你的赋值语句逻辑变得更加的清晰。</li>\n<li>带有默认参数的关键字参数函数可以很容易的添加新的行为，尤其适合向后兼容。</li>\n<li>可选的关键字参数应该优于位置参数被考虑使用。</li>\n</ul>\n<p>关键字参数的好处:</p>\n<ol>\n<li>代码可读性的提高</li>\n<li>以在定义的时候初始化一个默认值</li>\n<li>在前面的调用方式不变的情况下可以很好的拓展函数的参数，不用修改太多的代码</li>\n</ol>\n<p>如果本來的函数如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flow_rate</span><span class=\"params\">(weight_diff, time_diff, period=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (weight_diff / time_diff) * period</span><br></pre></td></tr></table></figure>\n<p>如果后来函数修改了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flow_rate</span><span class=\"params\">(weight_diff, time_diff,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              period=<span class=\"number\">1</span>, units_per_kg=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((weight_diff / units_per_kg) / time_diff) * period</span><br></pre></td></tr></table></figure>\n<p>那么可以如下使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">flow_per_second = flow_rate(weight_diff, time_diff)</span><br><span class=\"line\">flow_per_hour = flow_rate(weight_diff, time_diff, period=<span class=\"number\">3600</span>)</span><br><span class=\"line\">pounds_per_hour = flow_rate(weight_diff, time_diff, period=<span class=\"number\">3600</span>, units_per_kg=<span class=\"number\">2.2</span>)</span><br><span class=\"line\">pounds_per_hour = flow_rate(weight_diff, time_diff, <span class=\"number\">3600</span>, <span class=\"number\">2.2</span>) <span class=\"comment\"># 不推荐</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第20条-使用None和文档说明动态的指定默认参数\"><a href=\"#第20条-使用None和文档说明动态的指定默认参数\" class=\"headerlink\" title=\"第20条: 使用None和文档说明动态的指定默认参数\"></a>第20条: 使用None和文档说明动态的指定默认参数</h3><h4 id=\"备忘录-11\"><a href=\"#备忘录-11\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>默认参数只会被赋值一次：在其所在模块被加载的过程中,这有可能导致一些奇怪的现象。</li>\n<li>使用<code>None</code>作为关键字参数的默认值会有一个动态值。要在该函数的说明文档中详细的记录一下。</li>\n</ul>\n<h4 id=\"第一个例子：-1\"><a href=\"#第一个例子：-1\" class=\"headerlink\" title=\"第一个例子：\"></a>第一个例子：</h4><p>not:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(message, when=datetime.now<span class=\"params\">()</span>)</span>:</span></span><br><span class=\"line\">    print(‘%s: %s’ % (when, message))</span><br><span class=\"line\">    </span><br><span class=\"line\">log(‘Hi there!’)</span><br><span class=\"line\">sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">log(‘Hi again!’)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">2014</span><span class=\"number\">-11</span><span class=\"number\">-15</span> <span class=\"number\">21</span>:<span class=\"number\">10</span>:<span class=\"number\">10.371432</span>: Hi there!</span><br><span class=\"line\"><span class=\"number\">2014</span><span class=\"number\">-11</span><span class=\"number\">-15</span> <span class=\"number\">21</span>:<span class=\"number\">10</span>:<span class=\"number\">10.371432</span>: Hi again!</span><br></pre></td></tr></table></figure>\n<p>prefer:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(message, when=None)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Log a message with a timestamp.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        message: Message to print</span></span><br><span class=\"line\"><span class=\"string\">        when: datetime of when the message occurred.</span></span><br><span class=\"line\"><span class=\"string\">            Default to the present time.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    when = datetime.now() <span class=\"keyword\">if</span> when <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">else</span> when</span><br><span class=\"line\">    print(<span class=\"string\">\"%s: %s\"</span> %(when, message))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">'Hi there!'</span>)</span><br><span class=\"line\">sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">log(<span class=\"string\">'Hi again!'</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">2014</span><span class=\"number\">-11</span><span class=\"number\">-15</span> <span class=\"number\">21</span>:<span class=\"number\">10</span>:<span class=\"number\">10.472303</span>: Hi there!</span><br><span class=\"line\"><span class=\"number\">2014</span><span class=\"number\">-11</span><span class=\"number\">-15</span> <span class=\"number\">21</span>:<span class=\"number\">10</span>:<span class=\"number\">10.473395</span>: Hi again!</span><br></pre></td></tr></table></figure>\n<p>上述方法造成 when 第一次被赋值之后便不会再重新赋值</p>\n<h4 id=\"第二个例子：-1\"><a href=\"#第二个例子：-1\" class=\"headerlink\" title=\"第二个例子：\"></a>第二个例子：</h4><p>not:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(data, default=&#123;&#125;)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> json.loads(data)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> default</span><br><span class=\"line\"></span><br><span class=\"line\">foo = decode(<span class=\"string\">'bad data'</span>)</span><br><span class=\"line\">foo[<span class=\"string\">'stuff'</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">bar = decode(<span class=\"string\">'also bad'</span>)</span><br><span class=\"line\">bar[<span class=\"string\">'meep'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">'Foo:'</span>, foo)</span><br><span class=\"line\">print(<span class=\"string\">'Bar:'</span>, bar)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Foo: &#123;<span class=\"string\">'stuff'</span>: <span class=\"number\">5</span>, <span class=\"string\">'meep'</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">Bar: &#123;<span class=\"string\">'stuff'</span>: <span class=\"number\">5</span>, <span class=\"string\">'meep'</span>: <span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>prefer:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(data, default=None)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Load JSON data from string.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        data: JSON data to be decoded.</span></span><br><span class=\"line\"><span class=\"string\">        default: Value to return if decoding fails.</span></span><br><span class=\"line\"><span class=\"string\">            Defaults to an empty dictionary.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> default <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        default = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> json.loads(data)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 现在测试一下</span></span><br><span class=\"line\">foo = decode(<span class=\"string\">'bad data'</span>)</span><br><span class=\"line\">foo[<span class=\"string\">'stuff'</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">bar = decode(<span class=\"string\">'also bad'</span>)</span><br><span class=\"line\">bar[<span class=\"string\">'meep'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">'Foo:'</span>, foo)</span><br><span class=\"line\">print(<span class=\"string\">'Bar:'</span>, bar)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Foo: &#123;<span class=\"string\">'stuff'</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">Bar: &#123;<span class=\"string\">'meep'</span>: <span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第21条-仅强调关键字参数\"><a href=\"#第21条-仅强调关键字参数\" class=\"headerlink\" title=\"第21条: 仅强调关键字参数\"></a>第21条: 仅强调关键字参数</h3><h4 id=\"备忘录-12\"><a href=\"#备忘录-12\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>关键字参数使得函数调用的意图更加的清晰，明显。</li>\n<li>使用<code>keyword-only</code>参数可以强迫函数调用者提供关键字来赋值，这样对于容易使人疑惑的函数参数很有效，尤其适用于接收多个布尔变量的情况。</li>\n<li><code>Python3</code>中有明确的<code>keyword-only</code>函数语法。</li>\n<li><code>Python2</code>中可以通过<code>**kwargs</code>模拟实现<code>keyword-only</code>函数语法,并且人工的触发<code>TypeError</code>异常。</li>\n<li><code>keyword-only</code>在函数参数列表中的位置很重要，这点大家尤其应该明白！</li>\n</ul>\n<p>下面的程式使用上不方便，因为容易忘记 ignore_overflow 和 ignore_zero_division 的顺序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">safe_division</span><span class=\"params\">(number, divisor, ignore_overflow,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  ignore_zero_division)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number / divisor</span><br><span class=\"line\">    <span class=\"keyword\">except</span> OverflowError:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ignore_overflow:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ignore_zero_division:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = safe_division(<span class=\"number\">1</span>, <span class=\"number\">10</span>**<span class=\"number\">500</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>)</span><br><span class=\"line\">result = safe_division(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>用 keyword 引数可解決此问题，在 Python 3 可以宣告强制接收 keyword-only 参数。</p>\n<p>下面定义的这个 safe_division_c 函数，带有两个只能以关键字形式来指定的参数。参数列表里面的 * 号，标志着位置参数就此终结，之后的那些参数，都只能以关键字的形式来指定</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">safe_division_c</span><span class=\"params\">(number, divisor, *,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    ignore_overflow=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    ignore_zero_division=False)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number / divisor</span><br><span class=\"line\">    <span class=\"keyword\">except</span> OverflowError:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ignore_overflow:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ignore_zero_division:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span></span><br><span class=\"line\"></span><br><span class=\"line\">safe_division_c(<span class=\"number\">1</span>, <span class=\"number\">10</span>**<span class=\"number\">500</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\">TypeError: safe_division_c() takes <span class=\"number\">2</span> positional arguments but <span class=\"number\">4</span> were given</span><br><span class=\"line\"></span><br><span class=\"line\">safe_division(<span class=\"number\">1</span>, <span class=\"number\">0</span>, ignore_zero_division=<span class=\"keyword\">True</span>)  <span class=\"comment\"># OK</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>Python 2 虽然没有这种语法，但可以用 <code>**</code> 操作符模拟</p>\n<p>注：<code>*</code> 操作符接收可变数量的位置参数，<code>**</code> 接受任意数量的关键字参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python 2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">safe_division</span><span class=\"params\">(number, divisor, **kwargs)</span>:</span></span><br><span class=\"line\">    ignore_overflow = kwargs.pop(<span class=\"string\">'ignore_overflow'</span>, <span class=\"keyword\">False</span>)</span><br><span class=\"line\">    ignore_zero_division = kwargs.pop(<span class=\"string\">'ignore_zero_division'</span>, <span class=\"keyword\">False</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> kwargs:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">\"Unexpected **kwargs: %r\"</span>%kwargs)</span><br><span class=\"line\">    <span class=\"comment\"># ···</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">safe_division(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">safe_division(<span class=\"number\">1</span>, <span class=\"number\">0</span>, ignore_zero_division=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">safe_division(<span class=\"number\">1</span>, <span class=\"number\">10</span>**<span class=\"number\">500</span>, ignore_overflow=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 而想通过位置参数赋值，就不会正常的运行了</span></span><br><span class=\"line\">safe_division(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">TypeError：safe_division() takes <span class=\"number\">2</span> positional arguments but <span class=\"number\">4</span> were given.</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、类和继承\"><a href=\"#三、类和继承\" class=\"headerlink\" title=\"三、类和继承\"></a>三、类和继承</h2><h3 id=\"第22条-尽量使用辅助类来维护程序的状态，避免dict嵌套dict或大tuple\"><a href=\"#第22条-尽量使用辅助类来维护程序的状态，避免dict嵌套dict或大tuple\" class=\"headerlink\" title=\"第22条: 尽量使用辅助类来维护程序的状态，避免dict嵌套dict或大tuple\"></a>第22条: 尽量使用辅助类来维护程序的状态，避免dict嵌套dict或大tuple</h3><h4 id=\"备忘录-13\"><a href=\"#备忘录-13\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>避免字典中嵌套字典，或者长度较大的元组。</li>\n<li>在一个整类（类似于前面第一个复杂类那样）之前考虑使用 <code>namedtuple</code> 制作轻量，不易发生变化的容器。</li>\n<li>当内部的字典关系变得复杂的时候将代码重构到多个工具类中。</li>\n</ul>\n<p>dictionaries 以及 tuples 拿來存简单的资料很方便，但是当资料越来越复杂时，例如多层 dictionaries 或是 n-tuples，程式的可读性就下降了。例如下面的程式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleGradebook</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._grades = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_student</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self._grades[name] = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">report_grade</span><span class=\"params\">(self, name, score)</span>:</span></span><br><span class=\"line\">        self._grades[name].append(score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">average_grade</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        grades = self._grades[name]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum(grades) / len(grades)</span><br></pre></td></tr></table></figure>\n<p>正是由于字典很容易被使用，以至于对字典过度的拓展会导致代码越来越脆弱。例如：你想拓展一下<code>SimpleGradebook</code>类来根据科目保存成绩的学生的集合,而不再是整体性的存储。你就可以通过修改<code>_grade</code>字典来匹配学生姓名，使用另一个字典来包含成绩。而最里面的这个字典将匹配科目（<code>keys</code>)和成绩(<code>values</code>)。你还想根据班级内总体的成绩来追踪每个门类分数所占的比重，所以期中，期末考试相比于平时的测验而言更为重要。实现这个功能的一个方式是改变最内部的那个字典，而不是让其关联着科目（<code>key</code>)和成绩（<code>values</code>)。我们可以使用元组（<code>tuple</code>)来作为成绩（<code>values</code>)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightedGradebook</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._grades = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_student</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self._grades[name] = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">report_grade</span><span class=\"params\">(self, name, subject, score, weight)</span>:</span></span><br><span class=\"line\">        by_subject = self._grades[name]</span><br><span class=\"line\">        grade_list = by_subject.setdefault(subject, [])</span><br><span class=\"line\">        grade_list.append((score, weight))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">average_grade</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        by_subject = self._grades[name]</span><br><span class=\"line\">        score_sum, score_count = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> subject, scores <span class=\"keyword\">in</span> by_subject.items():</span><br><span class=\"line\">            subject_avg, total_weight = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> score, weight <span class=\"keyword\">in</span> scores:</span><br><span class=\"line\">                subject_avg += score * weight</span><br><span class=\"line\">                total_weight += weight</span><br><span class=\"line\">            score_sum += subject_avg / total_weight</span><br><span class=\"line\">            score_count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> score_sum / score_count</span><br></pre></td></tr></table></figure>\n<p>这个类使用起来貌似也变的超级复杂了，并且每个位置参数代表了什么意思也不明不白的。</p>\n<h4 id=\"重构成多个类\"><a href=\"#重构成多个类\" class=\"headerlink\" title=\"重构成多个类\"></a>重构成多个类</h4><p>你可以从依赖树的底端开始，将其划分成多个类：一个单独的成绩类好像对于如此一个简单的信息权重太大了。一个元组，使用元组似乎很合适，因为成绩是不会改变的了，这刚好符合元组的特性。这里，我使用一个元组（<code>score</code>, <code>weight</code>)来追踪列表中的成绩信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"></span><br><span class=\"line\">Grade = collections.namedtuple(<span class=\"string\">'Grade'</span>, (<span class=\"string\">'score'</span>, <span class=\"string\">'weight'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._grades = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">report_grade</span><span class=\"params\">(self, score, weight)</span>:</span></span><br><span class=\"line\">        self._grades.append(Grade(score, weight))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">average_grade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        total, total_weight = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> grade <span class=\"keyword\">in</span> self._grades:</span><br><span class=\"line\">            total += grade.score * grade.weight</span><br><span class=\"line\">            total_weight += grade.weight</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / total_weight</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._subjects = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subject</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self._subjects:</span><br><span class=\"line\">            self._subjects[name] = Subject()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._subjects[name]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">average_grade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        total, count = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> subject <span class=\"keyword\">in</span> self._subjects.values():</span><br><span class=\"line\">            total += subject.average_grade()</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gradebook</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._students = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self._students:</span><br><span class=\"line\">            self._students[name] = Student()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._students[name]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第23条-对于简单接口使用函数而不是类的实例\"><a href=\"#第23条-对于简单接口使用函数而不是类的实例\" class=\"headerlink\" title=\"第23条: 对于简单接口使用函数而不是类的实例\"></a>第23条: 对于简单接口使用函数而不是类的实例</h3><h4 id=\"备忘录-14\"><a href=\"#备忘录-14\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>在<code>Python</code>中，不需要定义或实现什么类，对于简单接口组件而言，函数就足够了。</li>\n<li><code>Python</code>中引用函数和方法的原因就在于它们是<code>first-class</code>，可以直接的被运用在表达式中。</li>\n<li>特殊方法<code>__call__</code>允许你像调用函数一样调用一个对象实例。</li>\n<li>当你需要一个函数来维护状态信息的时候，考虑一个定义了<code>__call__</code>方法的状态闭包类哦（详见第<code>15</code>项：了解闭包是怎样与变量作用域的联系）。</li>\n</ul>\n<p><code>Python</code>中的许多内置的<code>API</code>都允许你通过向函数传递参数来自定义行为。这些被<code>API</code>使用的<code>hooks</code>将会在它们运行的时候回调给你的代码。例如：<code>list</code>类型的排序方法中有一个可选的<code>key</code> 参数来决定排序过程中每个下标的值。这里，我使用一个<code>lambda</code>表达式作为这个键钩子，根据名字中字符的长度来为这个集合排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Socrates'</span>, <span class=\"string\">'Archimedes'</span>, <span class=\"string\">'Plato'</span>, <span class=\"string\">'Aristotle'</span>]</span><br><span class=\"line\">names.sort(key=<span class=\"keyword\">lambda</span> x: len(x))</span><br><span class=\"line\">print(names)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"string\">'Plato'</span>, Socrates<span class=\"string\">', '</span>Aristotle<span class=\"string\">', '</span>Archimedes<span class=\"string\">']</span></span><br></pre></td></tr></table></figure>\n<p>在其他的编程语言中，你可能期望一个抽象类作为这个<code>hooks</code>。但是在<code>Python</code>中，许多的<code>hooks</code>都是些无状态的有良好定义参数和返回值的函数。而对于<code>hooks</code>而言，使用函数是很理想的。因为更容易藐视，相对于类而言定义起来也更加的简单。函数可以作为钩子来工作是因为<code>Python</code>有<code>first-class</code>函数：在编程的时候函数，方法可以像其他的变量值一样被引用，或者被传递给其他的函数。</p>\n<p><code>Python</code>允许类来定义<code>__call__</code>这个特殊的方法。它允许一个对象像被函数一样来被调用。这样的一个实例也引起了<code>callable</code>这个内<code>True</code>的事实。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">current = &#123;<span class=\"string\">'green'</span>: <span class=\"number\">12</span>, <span class=\"string\">'blue'</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">incremetns = [</span><br><span class=\"line\">    (<span class=\"string\">'red'</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">    (<span class=\"string\">'blue'</span>, <span class=\"number\">17</span>),</span><br><span class=\"line\">    (<span class=\"string\">'orange'</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BetterCountMissing</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.added = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.added += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">counter = BetterCountMissing()</span><br><span class=\"line\">counter()</span><br><span class=\"line\"><span class=\"keyword\">assert</span> callable(counter)</span><br><span class=\"line\"><span class=\"comment\"># 这里我使用一个BetterCountMissing实例作为defaultdict函数的默认的hook值来追踪缺省值被添加的次数。</span></span><br><span class=\"line\">counter = BetterCountMissing()</span><br><span class=\"line\">result = defaultdict(counter, current)</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, amount <span class=\"keyword\">in</span> increments:</span><br><span class=\"line\">    result[key] += amount</span><br><span class=\"line\"><span class=\"keyword\">assert</span> counter.added == <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第24条-使用-classmethod多态性构造对象\"><a href=\"#第24条-使用-classmethod多态性构造对象\" class=\"headerlink\" title=\"第24条: 使用@classmethod多态性构造对象\"></a>第24条: 使用@classmethod多态性构造对象</h3><h4 id=\"备忘录-15\"><a href=\"#备忘录-15\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li><code>Python</code>的每个类只支持单个的构造方法，<code>__init__</code>。</li>\n<li>使用<code>@classmethod</code>可以为你的类定义可替代构造方法的方法。</li>\n<li>类的多态为具体子类的组合提供了一种更加通用的方式。</li>\n</ul>\n<p>使用 <code>@classmethod</code>起到多态的效果：一个对于分层良好的类树中，不同类之间相同名称的方法却实现了不同的功能的体现。</p>\n<p>下面的函数 generate_inputs() 不够一般化，只能使用 PathInputData ，如果想使用其它 InputData 的子类，必须改变函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputData</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PathInputData</span><span class=\"params\">(InputData)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, path)</span>:</span></span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        self.path = path</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> open(self.path).read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_inputs</span><span class=\"params\">(data_dir)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(data_dir):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> PathInputData(os.path.join(data_dir, name))</span><br></pre></td></tr></table></figure>\n<p>问题在于建立 <code>InputData</code> 子类的物件不够一般化，如果你想要编写另一个 <code>InputData</code> 的子类就必须重写 <code>read</code> 方法幸好有 <code>@classmethod</code>，可以达到一样的效果。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericInputData</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_inputs</span><span class=\"params\">(cls, config)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PathInputData</span><span class=\"params\">(GenericInputData)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, path)</span>:</span></span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        self.path = path</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> open(self.path).read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_inputs</span><span class=\"params\">(cls, config)</span>:</span></span><br><span class=\"line\">        data_dir = config[<span class=\"string\">'data_dir'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(data_dir):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> cls(os.path.join(data_dir, name))</span><br></pre></td></tr></table></figure>\n<h3 id=\"第25条-使用super关键字初始化父类\"><a href=\"#第25条-使用super关键字初始化父类\" class=\"headerlink\" title=\"第25条: 使用super关键字初始化父类\"></a>第25条: 使用super关键字初始化父类</h3><h4 id=\"备忘录-16\"><a href=\"#备忘录-16\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li><code>Python</code>的解决实例化次序问题的方法<code>MRO</code>解决了菱形继承中超类多次被初始化的问题。</li>\n<li>总是应该使用<code>super</code>来初始化父类。</li>\n</ul>\n<p>先看一个还行的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBaseClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimesTwo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.value *= <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlusFive</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.value += <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多继承实例,注意继承的次序哦</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneWay</span><span class=\"params\">(MyBaseClass, TimesTwo, PlusFive)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        MyBaseClass.__init__(self, value)</span><br><span class=\"line\">        TimesTwo.__init__(self)</span><br><span class=\"line\">        PlusFive.__init__(self)</span><br><span class=\"line\"></span><br><span class=\"line\">foo = OneWay(<span class=\"number\">5</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"First ordering is ( 5 * 2 ) + 5 = \"</span>, foo.value)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">First ordering <span class=\"keyword\">is</span> (<span class=\"number\">5</span> * <span class=\"number\">2</span> ) + <span class=\"number\">2</span> = <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<p>不使用 <strong>super() </strong>在多重继承时可能会造成意想不到的问题，下面的程式造成所谓的 <strong>diamond inheritance </strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBaseClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimesFive</span><span class=\"params\">(MyBaseClass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        MyBaseClass.__init__(self, value)</span><br><span class=\"line\">        self.value *= <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlusTwo</span><span class=\"params\">(MyBaseClass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        MyBaseClass.__init__(self, value)</span><br><span class=\"line\">        self.value += <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThisWay</span><span class=\"params\">(TimesFive, PlusTwo)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        TimesFive.__init__(self, value)</span><br><span class=\"line\">        PlusTwo.__init__(self, value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">foo = ThisWay(<span class=\"number\">5</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Should be (5 * 5) + 2 = 27 but is'</span>, foo.value)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Should be (<span class=\"number\">5</span> * <span class=\"number\">5</span>) + <span class=\"number\">2</span> = <span class=\"number\">27</span> but <span class=\"keyword\">is</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>注：foo.value 的值是 7 ，而不是 27。因为 <code>PlusTwo.__init__(self, value)</code> 将值重设为 5 了。</p>\n<p>使用 <code>super()</code>可以正确得到 27</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 现在，菱形继承的超类，也就是最顶上的那个`MyBaseClass`只会被初始化一次，而其他的两个父类会按照被声明的顺序来初始化了。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodWay</span><span class=\"params\">(TimesFiveCorrect, PlusTwoCorrect)</span>:</span><span class=\"comment\"># Python 2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBaseClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimesFiveCorrect</span><span class=\"params\">(MyBaseClass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        super(TimesFiveCorrect, self).__init__(value)</span><br><span class=\"line\">        self.value *= <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlusTwoCorrect</span><span class=\"params\">(MyBaseClass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        super(PlusTwoCorrect, self).__init__(value)</span><br><span class=\"line\">        self.value += <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodWay</span><span class=\"params\">(PlusTwoCorrect, TimesFiveCorrect)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        super(GoodWay, self).__init__(value)</span><br><span class=\"line\"></span><br><span class=\"line\">foo = GoodWay(<span class=\"number\">5</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"Should be 5 * (5 + 2) = 35 and is \"</span> , foo.value)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Should be <span class=\"number\">5</span> * (<span class=\"number\">5</span> + <span class=\"number\">2</span>) = <span class=\"number\">35</span> <span class=\"keyword\">and</span> <span class=\"keyword\">is</span> <span class=\"number\">35</span></span><br></pre></td></tr></table></figure>\n<p>python中父类实例化的规则是按照<code>MRO</code>标准来进行的，MRO 的执行顺序是 DFS </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python 2</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\">pprint(GoodWay.mro())</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&lt;class '__main__.GoodWay'&gt;,</span><br><span class=\"line\">&lt;class '__main__.TimesFiveCorrect'&gt;,</span><br><span class=\"line\">&lt;class '__main__.PlusTwoCorrect'&gt;,</span><br><span class=\"line\">&lt;class '__main__.MyBaseClass'&gt;,</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">object</span>'&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>最开始初始化<code>GoodWay</code>的时候，程序并没有真正的执行，而是走到这条继承树的树根，从树根往下才会进行初始化。于是我们会先初始化<code>MyBaseClass</code>的<code>value</code>为<code>5</code>，然后是<code>PlusTwoCorrect</code>的<code>value</code>会变成<code>7</code>，接着<code>TimesFiveCorrect</code>的<code>value</code>就自然的变成<code>35</code>了。</p>\n<p>Python 3 简化了 <strong>super() </strong>的使用方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Implicit</span><span class=\"params\">(MyBaseClass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        super().__init__(value * <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第26条-只在用编写Max-in组件的工具类的时候使用多继承\"><a href=\"#第26条-只在用编写Max-in组件的工具类的时候使用多继承\" class=\"headerlink\" title=\"第26条: 只在用编写Max-in组件的工具类的时候使用多继承\"></a>第26条: 只在用编写Max-in组件的工具类的时候使用多继承</h3><h4 id=\"备忘录-17\"><a href=\"#备忘录-17\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>如果可以使用<code>mix-in</code>实现相同的结果输出的话，就不要使用多继承了。</li>\n<li>当<code>mix-in</code>类需要的时候，在实例级别上使用可插拔的行为可以为每一个自定义的类工作的更好。</li>\n<li>从简单的行为出发，创建功能更为灵活的<code>mix-in</code>。</li>\n</ul>\n<p>如果你发现自己渴望随继承的便利和封装,那么考虑<code>mix-in</code>吧。它是一个只定义了几个类必备功能方法的很小的类。<code>Mix-in</code>类不定义以自己的实例属性，也不需要它们的初始化方法<code>__init__</code>被调用。<code>Mix-in</code>可以被分层和组织成最小化的代码块，方便代码的重用。</p>\n<p>mix-in 是可以替换的 class ，通常只定义 methods ，虽然本质上上还是通过继承的方式，但因为 mix-in 沒有自己的 state ，也就是说沒有定义 attributes ，使用上更有弹性。</p>\n<p>范例1:</p>\n<p>注：hasattr 函数动态访问属性，isinstance 函数动态检测对象类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToDictMixin</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_dict</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._traverse_dict(self.__dict__)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_traverse_dict</span><span class=\"params\">(self, instance_dict)</span>:</span></span><br><span class=\"line\">        output = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> instance_dict.items():</span><br><span class=\"line\">            output[key] = self._traverse(key, value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_traverse</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(value, ToDictMixin):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value.to_dict()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(value, dict):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self._traverse_dict(value)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(value, list):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [self._traverse(key, i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> value]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(value, <span class=\"string\">'__dict__'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self._traverse_dict(value.__dict__)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure>\n<p>使用示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span><span class=\"params\">(ToDIctMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value, left=None, right=None)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = left</span><br><span class=\"line\">        self.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这下把大量的Python对象转换到一个字典中变得容易多了。</span></span><br><span class=\"line\">tree = BinaryTree(<span class=\"number\">10</span>, left=BinaryTree(<span class=\"number\">7</span>, right=BinaryTree(<span class=\"number\">9</span>)),</span><br><span class=\"line\">    right=BinaryTree(<span class=\"number\">13</span>, left=BinaryTree(<span class=\"number\">11</span>)))</span><br><span class=\"line\">print(tree.to_dict())</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&#123;<span class=\"string\">'left'</span>: &#123;<span class=\"string\">'left'</span>: <span class=\"keyword\">None</span>,</span><br><span class=\"line\">         <span class=\"string\">'right'</span>: &#123;<span class=\"string\">'left'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'right'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'value'</span>: <span class=\"number\">9</span>&#125;,</span><br><span class=\"line\">         <span class=\"string\">'value'</span>: <span class=\"number\">7</span>&#125;,</span><br><span class=\"line\"> <span class=\"string\">'right'</span>: &#123;<span class=\"string\">'left'</span>: &#123;<span class=\"string\">'left'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'right'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'value'</span>: <span class=\"number\">11</span>&#125;,</span><br><span class=\"line\">         <span class=\"string\">'right'</span>: <span class=\"keyword\">None</span>,</span><br><span class=\"line\">         <span class=\"string\">'value'</span>: <span class=\"number\">13</span>&#125;,</span><br><span class=\"line\">  <span class=\"string\">'value'</span>: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>范例2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在这个例子中，唯一的必须条件就是类中必须有一个to_dict方法和接收关键字参数的__init__构造方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonMixin</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">from_json</span><span class=\"params\">(cls, data)</span>:</span></span><br><span class=\"line\">        kwargs = json.loads(data)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_json</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> json.dumps(self.to_dict())</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DatacenterRack</span><span class=\"params\">(ToDictMixin, JsonMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, switch=None, machines=None)</span>:</span></span><br><span class=\"line\">        self.switch = Switch(**switch)</span><br><span class=\"line\">        self.machines = [Machine(**kwargs) <span class=\"keyword\">for</span> kwargs <span class=\"keyword\">in</span> machines]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Switch</span><span class=\"params\">(ToDictMixin, JsonMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, ports=None, speed=None)</span>:</span></span><br><span class=\"line\">        self.ports = ports</span><br><span class=\"line\">        self.speed = speed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Machine</span><span class=\"params\">(ToDictMixin, JsonMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cores=None, ram=None, disk=None)</span>:</span></span><br><span class=\"line\">        self.cores = cores</span><br><span class=\"line\">        self.ram = ram</span><br><span class=\"line\">        self.disk = disk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将这些类从JSON传中序列化也是简单的。这里我校验了一下，保证数据可以在序列化和反序列化正常的转换。</span></span><br><span class=\"line\">serialized = <span class=\"string\">\"\"\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"switch\": &#123;\"ports\": 5, \"speed\": 1e9&#125;,</span></span><br><span class=\"line\"><span class=\"string\">    \"machines\": [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;\"cores\": 8, \"ram\": 32e9, \"disk\": 5e12&#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;\"cores\": 4, \"ram\": 16e9, \"disk\": 1e12&#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;\"cores\": 2, \"ram\": 4e9, \"disk\": 500e9&#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">deserialized = DatacenterRack.from_json(serialized)</span><br><span class=\"line\">roundtrip = deserialized.to_json()</span><br><span class=\"line\"><span class=\"keyword\">assert</span> json.loads(serialized) == json.loads(roundtrip)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第27条-多使用公共属性，而不是私有属性\"><a href=\"#第27条-多使用公共属性，而不是私有属性\" class=\"headerlink\" title=\"第27条: 多使用公共属性，而不是私有属性\"></a>第27条: 多使用公共属性，而不是私有属性</h3><h4 id=\"备忘录-18\"><a href=\"#备忘录-18\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>Python 编译器无法严格保证 private 字段的私密性</li>\n<li>不要盲目将属性设置为 private，而是应该从一开始就做好规划，并允子类更多地访问超类的内部的API</li>\n<li>应该多用 protected 属性，并且在文档中把这些字段的合理用法告诉子类的开发者，而不要试图用 private 属性来限制子类的访问</li>\n<li>只有当子类不受自己控制的收，才可以考虑使用 private 属性来避免名称冲突</li>\n</ul>\n<p>Python 里面沒有真正的 “private variable”，想存取都可以存取得到。</p>\n<p>下面的程式看起來我们没办法得到 <code>__private_field</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObject</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.public_field = <span class=\"number\">5</span></span><br><span class=\"line\">        self.__private_field = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_private_field</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__private_field</span><br><span class=\"line\"></span><br><span class=\"line\">foo = MyObject()</span><br><span class=\"line\">print(foo.__private_field) <span class=\"comment\"># AttributeError</span></span><br></pre></td></tr></table></figure>\n<p>但其实只是名称被改掉而已</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(foo.__dict__)</span><br><span class=\"line\"># &#123;&apos;_MyObject__private_field&apos;: 10, &apos;public_field&apos;: 5&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(foo._MyObject__private_field)</span><br></pre></td></tr></table></figure>\n<p>一般来说 Python 惯例是在变数前加一个底线代表 <strong>protected variable </strong>，作用在于提醒开发者使用上要注意。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># This stores the user-supplied value for the object.</span></span><br><span class=\"line\">        <span class=\"comment\"># It should be coercible to a string. Once assigned for</span></span><br><span class=\"line\">        <span class=\"comment\"># the object it should be treated as immutable.</span></span><br><span class=\"line\">        self._value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str(self._value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIntegerSubclass</span><span class=\"params\">(MyClass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._value</span><br><span class=\"line\"></span><br><span class=\"line\">foo = MyIntegerSubclass(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> foo.get_value() == <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>双底线的命名方式是为了避免父类和子类间的命名冲突，除此之外尽量避免使用这种命名。</p>\n<h3 id=\"第28条-自定义容器类型要从collections-abc来继承\"><a href=\"#第28条-自定义容器类型要从collections-abc来继承\" class=\"headerlink\" title=\"第28条:自定义容器类型要从collections.abc来继承\"></a>第28条:自定义容器类型要从collections.abc来继承</h3><h4 id=\"备忘录-19\"><a href=\"#备忘录-19\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>如果要定制的子类比较简单，那就可以直接从Python的容器类型（如list或dict）中继承</li>\n<li>想正确实现自定义的容器类型，可能需要编写大量的特殊方法</li>\n<li>编写自制的容器类型时，可以从collection.abc 模块的抽象类基类中继承，那些基类能确保我们的子类具备适当的接口及行为</li>\n</ul>\n<p><code>collections.abc</code> 里面的 abstract classes 的作用是让开发者方便地开发自己的 container ，例如 list。一般情況下继承list 就ok了，但是当结构比较复杂的时候就需要自己自定义，例如 list 有许多 方法，要一一实现有点麻烦。</p>\n<p>下面程式中 SequenceNode 是想要拥有 list 功能的 binary tree。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value, left=None, right=None)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = left</span><br><span class=\"line\">        self.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexableNode</span><span class=\"params\">(BinaryNode)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_search</span><span class=\"params\">(self, count, index)</span>:</span></span><br><span class=\"line\">        found = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.left:</span><br><span class=\"line\">            found, count = self.left._search(count, index)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found <span class=\"keyword\">and</span> count == index:</span><br><span class=\"line\">            found = self</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found <span class=\"keyword\">and</span> self.right:</span><br><span class=\"line\">            found, count = self.right._search(count, index)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> found, count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">        found, _ = self._search(<span class=\"number\">0</span>, index)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">'Index out of range'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> found.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequenceNode</span><span class=\"params\">(IndexableNode)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        _, count = self._search(<span class=\"number\">0</span>, <span class=\"keyword\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br></pre></td></tr></table></figure>\n<p>以下是 SequenceNode的一些 list 常用的操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree = SequenceNode(</span><br><span class=\"line\">\t<span class=\"number\">10</span>,</span><br><span class=\"line\">    left=SequenceNode(</span><br><span class=\"line\">    \t<span class=\"number\">5</span>,</span><br><span class=\"line\">        left=SequenceNode(<span class=\"number\">2</span>),</span><br><span class=\"line\">        right=SequenceNode(</span><br><span class=\"line\">        \t<span class=\"number\">6</span>, </span><br><span class=\"line\">        \tright=SequenceNode(<span class=\"number\">7</span>))),</span><br><span class=\"line\">    right=SequenceNode(</span><br><span class=\"line\">\t\t<span class=\"number\">15</span>, </span><br><span class=\"line\">\t\tleft=SequenceNode(<span class=\"number\">11</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'Index 0 ='</span>, tree[<span class=\"number\">0</span>]) </span><br><span class=\"line\">print(<span class=\"string\">'11 in the tree?'</span>, <span class=\"number\">11</span> <span class=\"keyword\">in</span> tree)</span><br><span class=\"line\">print(<span class=\"string\">'Tree has %d nodes'</span> % len(tree))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Index <span class=\"number\">0</span> = <span class=\"number\">2</span></span><br><span class=\"line\">11 in the tree? True</span><br><span class=\"line\">Tree has <span class=\"number\">7</span> nodes</span><br></pre></td></tr></table></figure>\n<p>但是使用者可能想使用像 <code>count()</code>以及 <code>index()</code>等 list 的 方法 ，这时候可以使用 <code>collections.abc</code>的 <strong>Sequence </strong>。子类只要实现 <code>__getitem__</code>以及 <code>__len__</code>， <strong>Sequence </strong>以及提供<code>count()</code>以及 <code>index()</code>了，而且如果子类没有实现类似 <strong>Sequence</strong> 的抽象基类所要求的每个方法，<code>collections.abc</code> 模块就会指出这个错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections.abc <span class=\"keyword\">import</span> Sequence</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BetterNode</span><span class=\"params\">(SequenceNode, Sequence)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">tree = BetterNode(</span><br><span class=\"line\">   <span class=\"comment\"># ...</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'Index of 7 is'</span>, tree.index(<span class=\"number\">7</span>))</span><br><span class=\"line\">print(<span class=\"string\">'Count of 10 is'</span>, tree.count(<span class=\"number\">10</span>))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Index of <span class=\"number\">7</span> <span class=\"keyword\">is</span> <span class=\"number\">3</span></span><br><span class=\"line\">Count of <span class=\"number\">10</span> <span class=\"keyword\">is</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"四、元类和属性\"><a href=\"#四、元类和属性\" class=\"headerlink\" title=\"四、元类和属性\"></a>四、元类和属性</h2><h3 id=\"第29条-用纯属性取代-get-和-set-方法\"><a href=\"#第29条-用纯属性取代-get-和-set-方法\" class=\"headerlink\" title=\"第29条: 用纯属性取代 get 和 set 方法\"></a>第29条: 用纯属性取代 get 和 set 方法</h3><h4 id=\"备忘录-20\"><a href=\"#备忘录-20\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>使用public属性避免set和get方法，@property定义一些特别的行为</li>\n<li>如果访问对象的某个属性的时候，需要表现出特殊的行为，那就用@property来定义这种行为</li>\n<li>@property 方法应该遵循最小惊讶原则，而不应该产生奇怪的副作用</li>\n<li>确保@property方法是快速的，如果是慢或者复杂的工作应该放在正常的方法里面</li>\n</ul>\n<p>示例1：</p>\n<p>不要把 java 的那一套 getter 和 setter 带进来</p>\n<p>not:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OldResistor</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, ohms)</span>:</span></span><br><span class=\"line\">        self._ohms = ohms</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ohms</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._ohms</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_ohms</span><span class=\"params\">(self, ohms)</span>:</span></span><br><span class=\"line\">        self._ohms = ohms</span><br></pre></td></tr></table></figure>\n<p>prefer:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resistor</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, ohms)</span>:</span></span><br><span class=\"line\">        self.ohms = ohms</span><br><span class=\"line\">        self.voltage = <span class=\"number\">0</span></span><br><span class=\"line\">        self.current = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>示例2：</p>\n<p>使用@property，来绑定一些特殊操作，但是不要产生奇怪的副作用，比如在getter里面做一些赋值的操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoltageResistance</span><span class=\"params\">(Resistor)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, ohms)</span>:</span></span><br><span class=\"line\">        super().__init__(ohms)</span><br><span class=\"line\">        self._voltage = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 相当于 getter</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">voltage</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._voltage</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\"># 相当于 setter</span></span><br><span class=\"line\"><span class=\"meta\">    @voltage.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">voltage</span><span class=\"params\">(self, voltage)</span>:</span></span><br><span class=\"line\">        self._voltage = voltage</span><br><span class=\"line\">        self.current = self._voltage / self.ohms</span><br><span class=\"line\"></span><br><span class=\"line\">r2 = VoltageResistance(<span class=\"number\">1e3</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Before: %5r amps'</span> % r2.current)</span><br><span class=\"line\"><span class=\"comment\"># 会执行 setter 方法</span></span><br><span class=\"line\">r2.voltage = <span class=\"number\">10</span></span><br><span class=\"line\">print(<span class=\"string\">'After:  %5r amps'</span> % r2.current)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第30条-考虑-property来替代属性重构\"><a href=\"#第30条-考虑-property来替代属性重构\" class=\"headerlink\" title=\"第30条: 考虑@property来替代属性重构\"></a>第30条: 考虑@property来替代属性重构</h3><h4 id=\"备忘录-21\"><a href=\"#备忘录-21\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>使用@property给已有属性扩展新需求</li>\n<li>可以用 @property 来逐步完善数据模型</li>\n<li>当@property太复杂了才考虑重构</li>\n</ul>\n<p>@property可以把简单的数值属性迁移为实时计算，只定义 getter 不定义 setter 那么就是一个只读属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bucket</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, period)</span>:</span></span><br><span class=\"line\">        self.period_delta = timedelta(seconds=period)</span><br><span class=\"line\">        self.reset_time = datetime.now()</span><br><span class=\"line\">        self.max_quota = <span class=\"number\">0</span></span><br><span class=\"line\">        self.quota_consumed = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">'Bucket(max_quota=%d, quota_consumed=%d)'</span> %</span><br><span class=\"line\">                (self.max_quota, self.quota_consumed))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quota</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.max_quota - self.quota_consumed</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @quota.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quota</span><span class=\"params\">(self, amount)</span>:</span></span><br><span class=\"line\">        delta = self.max_quota - amount</span><br><span class=\"line\">        <span class=\"keyword\">if</span> amount == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Quota being reset for a new period</span></span><br><span class=\"line\">            self.quota_consumed = <span class=\"number\">0</span></span><br><span class=\"line\">            self.max_quota = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> delta &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Quota being filled for the new period</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> self.quota_consumed = <span class=\"number\">0</span></span><br><span class=\"line\">            self.max_quota = amount</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Quota being consumed during the period</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> self.max_quota &gt;= self,quota_consumed</span><br><span class=\"line\">            self.quota_consumed += delta</span><br></pre></td></tr></table></figure>\n<p>这种写法的好处就在于：从前使用的Bucket.quota 的那些旧代码，既不需要做出修改，也不需要担心现在的Bucket类是如何实现的，可以轻松无痛扩展新功能。但是@property也不能滥用，而且@property的一个缺点就是无法被复用，同一套逻辑不能在不同的属性之间重复使用如果不停的编写@property方法，那就意味着当前这个类的代码写的确实很糟糕，此时应该重构了。</p>\n<p>TODO</p>\n<h3 id=\"第31条-用描述符来改写需要复用的-property-方法\"><a href=\"#第31条-用描述符来改写需要复用的-property-方法\" class=\"headerlink\" title=\"第31条: 用描述符来改写需要复用的 @property 方法\"></a>第31条: 用描述符来改写需要复用的 @property 方法</h3><h4 id=\"备忘录-22\"><a href=\"#备忘录-22\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li><p>如果想复用 @property 方法及其验证机制，那么可以自定义描述符类</p>\n</li>\n<li><p>WeakKeyDictionary 可以保证描述符类不会泄露内存</p>\n</li>\n<li><p>通过描述符协议来实现属性的获取和设置操作时，不要纠结于<code>__getatttttribute__</code> 的方法的具体运作细节</p>\n</li>\n</ul>\n<p><code>property</code>最大的问题是可能造成 duplicated code 这种 code smell。</p>\n<p>下面的程式 <code>math_grade</code>以及 <code>math_grade</code>就有这样的问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Exam</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._writing_grade = <span class=\"number\">0</span></span><br><span class=\"line\">        self._math_grade = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_check_grade</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"number\">0</span> &lt;= value &lt;= <span class=\"number\">100</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Grade must be between 0 and 100'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writing_grade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._writing_grade</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @writing_grade.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writing_grade</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self._check_grade(value)</span><br><span class=\"line\">        self._writing_grade = value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">math_grade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._math_grade</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @math_grade.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">math_grade</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self._check_grade(value)</span><br><span class=\"line\">        self._math_grade = value</span><br></pre></td></tr></table></figure>\n<p>可以使用 <strong>descriptor </strong>解決，下面的程式将重复的逻辑封装在 Grade 里面。但是這个程式根本 <strong>不能用 </strong>，因为存取到的是 class attributes，例如 <code>exam.writing_grade = 40</code>其实是<code>Exam.__dict__[&#39;writing_grade&#39;].__set__(exam, 40)</code>，这样所有 Exam 的 instances 都是存取到一样的东西 ( <code>Grade()</code>)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grade</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._value = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, instance_type)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"number\">0</span> &lt;= value &lt;= <span class=\"number\">100</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Grade must be between 0 and 100'</span>)</span><br><span class=\"line\">        self._value = value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Exam</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    math_grade = Grade()</span><br><span class=\"line\">    writing_grade = Grade()</span><br><span class=\"line\">    science_grade = Grade()</span><br><span class=\"line\"></span><br><span class=\"line\">exam = Exam()</span><br><span class=\"line\">exam.writing_grade = <span class=\"number\">40</span></span><br></pre></td></tr></table></figure>\n<p>解決方式是用个 dictionary 存起來，这里使用 <code>WeakKeyDictionary</code>避免 memory leak。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from weakref import WeakKeyDictionary</span><br><span class=\"line\"></span><br><span class=\"line\">class Grade(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self._values = WeakKeyDictionary()</span><br><span class=\"line\">    def __get__(self, instance, instance_type):</span><br><span class=\"line\">        if instance is None: return self</span><br><span class=\"line\">        return self._values.get(instance, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __set__(self, instance, value):</span><br><span class=\"line\">        if not (0 &lt;= value &lt;= 100):</span><br><span class=\"line\">            raise ValueError(&apos;Grade must be between 0 and 100&apos;)</span><br><span class=\"line\">        self._values[instance] = value</span><br></pre></td></tr></table></figure>\n<h3 id=\"第32条-用-getattr-getattribute-和-setattr-实现按需生产的属性\"><a href=\"#第32条-用-getattr-getattribute-和-setattr-实现按需生产的属性\" class=\"headerlink\" title=\"第32条: 用 __getattr__, __getattribute__,  和__setattr__ 实现按需生产的属性\"></a>第32条: 用 <code>__getattr__</code>, <code>__getattribute__</code>,  和<code>__setattr__</code> 实现按需生产的属性</h3><h4 id=\"备忘录-23\"><a href=\"#备忘录-23\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>通过<code>__getttattr__</code> 和 <code>__setattr__</code>，我们可以用惰性的方式来加载并保存对象的属性</li>\n<li>要理解 <code>__getattr__</code> 和 <code>__getattribute__</code> 的区别：前者只会在待访问的属性缺失时触发，而后者则会在每次访问属性的时候触发</li>\n<li>如果要在<code>__getattributte__</code> 和 <code>__setattr__</code> 方法中访问实例属性，那么应该直接通过 super() 来做，以避免无限递归</li>\n</ul>\n<ul>\n<li>obj.name，getattr和hasattr都会调用<strong>getattribute</strong>方法，如果name不在obj.<strong>dict</strong>里面，还会调用<strong>getattr</strong>方法，如果没有自定义<strong>getattr</strong>方法会AttributeError异常</li>\n<li>只要有赋值操作（=，setattr）都会调用<strong>setattr</strong>方法（包括a = A()）</li>\n</ul>\n<p><code>__getattr__</code>和 <code>__getattribute__</code>都可以动态地存取 attributes ，不同点在于如果 <code>__dict__</code>找不到才会呼叫 <code>__getattr__</code>，而 <code>__getattribute__</code>每次都会被呼叫到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyDB</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.exists = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        value = <span class=\"string\">'Value for %s'</span> % name</span><br><span class=\"line\">        setattr(self, name, value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingLazyDB</span><span class=\"params\">(LazyDB)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Called __getattr__(%s)'</span> % name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> super().__getattr__(name)</span><br><span class=\"line\"></span><br><span class=\"line\">data = LoggingLazyDB()</span><br><span class=\"line\">print(<span class=\"string\">'exists:'</span>, data.exists)</span><br><span class=\"line\">print(<span class=\"string\">'foo:   '</span>, data.foo)</span><br><span class=\"line\">print(<span class=\"string\">'foo:   '</span>, data.foo)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValidatingDB</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.exists = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattribute__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Called __getattribute__(%s)'</span> % name)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> super().__getattribute__(name)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> AttributeError:</span><br><span class=\"line\">            value = <span class=\"string\">'Value for %s'</span> % name</span><br><span class=\"line\">            setattr(self, name, value)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">data = ValidatingDB()</span><br><span class=\"line\">print(<span class=\"string\">'exists:'</span>, data.exists)</span><br><span class=\"line\">print(<span class=\"string\">'foo:   '</span>, data.foo)</span><br><span class=\"line\">print(<span class=\"string\">'foo:   '</span>, data.foo)</span><br></pre></td></tr></table></figure>\n<p>可以控制什么 attributes 不应该被使用到，记得要丟 <strong>AttributeError </strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MissingPropertyDB</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> name == <span class=\"string\">'bad_name'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">'%s is missing'</span> % name)</span><br><span class=\"line\">            value = <span class=\"string\">'Value for %s'</span> % name</span><br><span class=\"line\">            setattr(self, name, value)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">    data = MissingPropertyDB()</span><br><span class=\"line\">    data.foo  <span class=\"comment\"># Test this works</span></span><br><span class=\"line\">    data.bad_name</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    logging.exception(<span class=\"string\">'Expected'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<p><code>__setattr__</code>每次都会被呼叫到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingDB</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, name, value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Save some data to the DB log</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        super().__setattr__(name, value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingSavingDB</span><span class=\"params\">(SavingDB)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, name, value)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Called __setattr__(%s, %r)'</span> % (name, value))</span><br><span class=\"line\">        super().__setattr__(name, value)</span><br></pre></td></tr></table></figure>\n<p>很重要的一点是 <code>__setattr__</code>以及 <code>__getattribute__</code>一定要呼叫父类的 <code>__getattribute__</code>，避免无限循环下去。</p>\n<p>这个会爆掉，因为存取 <code>self._data</code>又会呼叫 <code>__getattribute__</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class BrokenDictionaryDB(object):</span><br><span class=\"line\">    def __init__(self, data):</span><br><span class=\"line\">        self._data = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def __getattribute__(self, name):</span><br><span class=\"line\">        print(&apos;Called __getattribute__(%s)&apos; % name)</span><br><span class=\"line\">        return self._data[name]</span><br></pre></td></tr></table></figure>\n<p>呼叫 <code>super().__getattribute__(&#39;_data&#39;)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class DictionaryDB(object):</span><br><span class=\"line\">    def __init__(self, data):</span><br><span class=\"line\">        self._data = data</span><br><span class=\"line\"></span><br><span class=\"line\">    def __getattribute__(self, name):</span><br><span class=\"line\">        data_dict = super().__getattribute__(&apos;_data&apos;)</span><br><span class=\"line\">        return data_dict[name]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第33条-用元类来验证子类\"><a href=\"#第33条-用元类来验证子类\" class=\"headerlink\" title=\"第33条: 用元类来验证子类\"></a>第33条: 用元类来验证子类</h3><h4 id=\"备忘录-24\"><a href=\"#备忘录-24\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>通过元类，我们可以在生成子类对象之前，先验证子类的定义是否合乎规范</li>\n<li>Python2 和 Python3 指定元类的语法略有不同</li>\n</ul>\n<ul>\n<li>使用元类对类型对象进行验证</li>\n<li>Python 系统把子类的整个 class 语句体处理完毕之后，就会调用其元类的<code>__new__</code> 方法</li>\n</ul>\n<h3 id=\"第34条-用元类来注册子类\"><a href=\"#第34条-用元类来注册子类\" class=\"headerlink\" title=\"第34条: 用元类来注册子类\"></a>第34条: 用元类来注册子类</h3><h4 id=\"备忘录-25\"><a href=\"#备忘录-25\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>在构建模块化的 Python 程序时候，类的注册是一种很有用的模式</li>\n</ul>\n<ul>\n<li>开发者每次从基类中继承子类的时，基类的元类都可以自动运行注册代码</li>\n<li>通过元类来实现类的注册，可以确保所有子类都不会泄露，从而避免后续的错误</li>\n</ul>\n<p>首先，定义元类，我们要继承 type, python 默认会把那些类的 class 语句体中所含的相关内容，发送给元类的 new 方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(meta, name, bases, class_dict)</span>:</span></span><br><span class=\"line\">        print(meta, name, bases, class_dict)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.__new__(meta, name, bases, class_dict)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这是 python2 写法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClassInPython2</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    __metaclass__ = Meta</span><br><span class=\"line\">    stuff = <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python 3</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClassInPython3</span><span class=\"params\">(object, metaclass=Meta)</span>:</span></span><br><span class=\"line\">    stuff = <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValidatePolygon</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(meta, name, bases, class_dict)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Don't validate the abstract Polygon class</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> bases != (object,):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> class_dict[<span class=\"string\">'sides'</span>] &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Polygons need 3+ sides'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.__new__(meta, name, bases, class_dict)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span><span class=\"params\">(object, metaclass=ValidatePolygon)</span>:</span></span><br><span class=\"line\">    sides = <span class=\"keyword\">None</span>  <span class=\"comment\"># Specified by subclasses</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">interior_angles</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (cls.sides - <span class=\"number\">2</span>) * <span class=\"number\">180</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span><span class=\"params\">(Polygon)</span>:</span></span><br><span class=\"line\">    sides = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(Triangle.interior_angles())</span><br></pre></td></tr></table></figure>\n<h3 id=\"第35-用元类来注解类的属性\"><a href=\"#第35-用元类来注解类的属性\" class=\"headerlink\" title=\"第35: 用元类来注解类的属性\"></a>第35: 用元类来注解类的属性</h3><h4 id=\"备忘录-26\"><a href=\"#备忘录-26\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>借助元类，我们可以在某个类完全定义好之前，率先修改该类的属性</li>\n<li>描述符与元类能够有效的组合起来，以便对某种行为做出修饰，或者在程序运行时探查相关信息</li>\n</ul>\n<ul>\n<li>如果把元类与描述符相结合，那就可以在不使用 weakerf 模块的前提下避免内存泄露</li>\n</ul>\n<h2 id=\"五、并行与并发\"><a href=\"#五、并行与并发\" class=\"headerlink\" title=\"五、并行与并发\"></a>五、并行与并发</h2><h3 id=\"第36条-用-subprocess-模块来管理子进程\"><a href=\"#第36条-用-subprocess-模块来管理子进程\" class=\"headerlink\" title=\"第36条: 用 subprocess 模块来管理子进程\"></a>第36条: 用 subprocess 模块来管理子进程</h3><h4 id=\"备忘录-27\"><a href=\"#备忘录-27\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>使用 subprocess 模块运行子进程管理自己的输入和输出流</li>\n<li>subprocess 可以并行执行最大化CPU的使用</li>\n<li>communicate 的 timeout 参数避免死锁和被挂起的子进程</li>\n</ul>\n<p>最基本的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"></span><br><span class=\"line\">proc = subprocess.Popen(</span><br><span class=\"line\">    [<span class=\"string\">'echo'</span>, <span class=\"string\">'Hello from the child!'</span>],</span><br><span class=\"line\">    stdout=subprocess.PIPE)</span><br><span class=\"line\">out, err = proc.communicate()</span><br><span class=\"line\">print(out.decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure>\n<p>传入资料</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_openssl</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    env = os.environ.copy()</span><br><span class=\"line\">    env[<span class=\"string\">'password'</span>] = <span class=\"string\">b'\\xe24U\\n\\xd0Ql3S\\x11'</span></span><br><span class=\"line\">    proc = subprocess.Popen(</span><br><span class=\"line\">        [<span class=\"string\">'openssl'</span>, <span class=\"string\">'enc'</span>, <span class=\"string\">'-des3'</span>, <span class=\"string\">'-pass'</span>, <span class=\"string\">'env:password'</span>],</span><br><span class=\"line\">        env=env,</span><br><span class=\"line\">        stdin=subprocess.PIPE,</span><br><span class=\"line\">        stdout=subprocess.PIPE)</span><br><span class=\"line\">    proc.stdin.write(data)</span><br><span class=\"line\">    proc.stdin.flush()  <span class=\"comment\"># Ensure the child gets input</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> proc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_md5</span><span class=\"params\">(input_stdin)</span>:</span></span><br><span class=\"line\">    proc = subprocess.Popen(</span><br><span class=\"line\">        [<span class=\"string\">'md5'</span>],</span><br><span class=\"line\">        stdin=input_stdin,</span><br><span class=\"line\">        stdout=subprocess.PIPE)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proc</span><br></pre></td></tr></table></figure>\n<p>模擬 <strong>pipes</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">input_procs = []</span><br><span class=\"line\">hash_procs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">    data = os.urandom(<span class=\"number\">10</span>)</span><br><span class=\"line\">    proc = run_openssl(data)</span><br><span class=\"line\">    input_procs.append(proc)</span><br><span class=\"line\">    hash_proc = run_md5(proc.stdout)</span><br><span class=\"line\">    hash_procs.append(hash_proc)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> proc <span class=\"keyword\">in</span> input_procs:</span><br><span class=\"line\">    proc.communicate()</span><br><span class=\"line\"><span class=\"keyword\">for</span> proc <span class=\"keyword\">in</span> hash_procs:</span><br><span class=\"line\">    out, err = proc.communicate()</span><br><span class=\"line\">    print(out.strip())</span><br></pre></td></tr></table></figure>\n<h3 id=\"第37条-可以用线程来执行阻塞时I-O，但不要用它做平行计算\"><a href=\"#第37条-可以用线程来执行阻塞时I-O，但不要用它做平行计算\" class=\"headerlink\" title=\"第37条: 可以用线程来执行阻塞时I/O，但不要用它做平行计算\"></a>第37条: 可以用线程来执行阻塞时I/O，但不要用它做平行计算</h3><h4 id=\"备忘录-28\"><a href=\"#备忘录-28\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>因为GIL，Python thread并不能并行运行多段代码</li>\n<li>Python保留thread的两个原因：1.可以模拟多线程，2.多线程可以处理I/O阻塞的情况</li>\n<li>Python thread可以并行执行多个系统调用，这使得程序能够在执行阻塞式I/O操作的同时，执行一些并行计算</li>\n</ul>\n<h3 id=\"第38条-在线程中使用Lock来防止数据竞争\"><a href=\"#第38条-在线程中使用Lock来防止数据竞争\" class=\"headerlink\" title=\"第38条: 在线程中使用Lock来防止数据竞争\"></a>第38条: 在线程中使用Lock来防止数据竞争</h3><h4 id=\"备忘录-29\"><a href=\"#备忘录-29\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>虽然Python thread不能同时执行，但是Python解释器还是会打断操作数据的两个字节码指令，所以还是需要锁</li>\n<li>thread模块的Lock类是Python的互斥锁实现</li>\n</ul>\n<p>比较有趣的是 <strong>Barrier </strong>這个 Python 3.2 才加进来的东西，以前要用 <strong>Semaphore </strong>來做。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Barrier</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Lock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockingCounter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.lock = Lock()</span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increment</span><span class=\"params\">(self, offset)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.lock:</span><br><span class=\"line\">            self.count += offset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockingCounter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.lock = Lock()</span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increment</span><span class=\"params\">(self, offset)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.lock:</span><br><span class=\"line\">            self.count += offset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">worker</span><span class=\"params\">(sensor_index, how_many, counter)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># I have a barrier in here so the workers synchronize</span></span><br><span class=\"line\">    <span class=\"comment\"># when they start counting, otherwise it's hard to get a race</span></span><br><span class=\"line\">    <span class=\"comment\"># because the overhead of starting a thread is high.</span></span><br><span class=\"line\">    BARRIER.wait()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(how_many):</span><br><span class=\"line\">        <span class=\"comment\"># Read from the sensor</span></span><br><span class=\"line\">        counter.increment(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_threads</span><span class=\"params\">(func, how_many, counter)</span>:</span></span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        args = (i, how_many, counter)</span><br><span class=\"line\">        thread = Thread(target=func, args=args)</span><br><span class=\"line\">        threads.append(thread)</span><br><span class=\"line\">        thread.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">        thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\">BARRIER = Barrier(<span class=\"number\">5</span>)</span><br><span class=\"line\">counter = LockingCounter()</span><br><span class=\"line\">run_threads(worker, how_many, counter)</span><br><span class=\"line\">print(<span class=\"string\">'Counter should be %d, found %d'</span> %</span><br><span class=\"line\">      (<span class=\"number\">5</span> * how_many, counter.count))</span><br></pre></td></tr></table></figure>\n<h3 id=\"第39条-用-Queue-来协调各线程之间的工作\"><a href=\"#第39条-用-Queue-来协调各线程之间的工作\" class=\"headerlink\" title=\"第39条: 用 Queue 来协调各线程之间的工作\"></a>第39条: 用 Queue 来协调各线程之间的工作</h3><h4 id=\"备忘录-30\"><a href=\"#备忘录-30\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>管线是一种优秀的任务处理方式，它可以把处理流程划分为若干阶段，并使用多条Python线程同时执行这些任务</li>\n<li>构建并发式的管线时，要注意许多问题，包括：如何防止某个阶段陷入持续等待的状态之中、如何停止工作线程，以及如何防止内存膨胀等</li>\n<li>Queue类具备构建健壮并发管道的特性：阻塞操作，缓存大小和连接（join）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClosableQueue</span><span class=\"params\">(Queue)</span>:</span></span><br><span class=\"line\">    SENTINEL = object()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.put(self.SENTINEL)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            item = self.get()</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> item <span class=\"keyword\">is</span> self.SENTINEL:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>  <span class=\"comment\"># Cause the thread to exit</span></span><br><span class=\"line\">                <span class=\"keyword\">yield</span> item</span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                self.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StoppableWorker</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, in_queue, out_queue)</span>:</span></span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.in_queue = in_queue</span><br><span class=\"line\">        self.out_queue = out_queue</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.in_queue:</span><br><span class=\"line\">            result = self.func(item)</span><br><span class=\"line\">            self.out_queue.put(result)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span><span class=\"params\">(item)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resize</span><span class=\"params\">(item)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload</span><span class=\"params\">(item)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">download_queue = ClosableQueue()</span><br><span class=\"line\">resize_queue = ClosableQueue()</span><br><span class=\"line\">upload_queue = ClosableQueue()</span><br><span class=\"line\">done_queue = ClosableQueue()</span><br><span class=\"line\">threads = [</span><br><span class=\"line\">    StoppableWorker(download, download_queue, resize_queue),</span><br><span class=\"line\">    StoppableWorker(resize, resize_queue, upload_queue),</span><br><span class=\"line\">    StoppableWorker(upload, upload_queue, done_queue),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    thread.start()</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>):</span><br><span class=\"line\">    download_queue.put(object())</span><br><span class=\"line\">download_queue.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">download_queue.join()</span><br><span class=\"line\">resize_queue.close()</span><br><span class=\"line\">resize_queue.join()</span><br><span class=\"line\">upload_queue.close()</span><br><span class=\"line\">upload_queue.join()</span><br><span class=\"line\">print(done_queue.qsize(), <span class=\"string\">'items finished'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第40条-考虑用协程来并发地运行多个函数\"><a href=\"#第40条-考虑用协程来并发地运行多个函数\" class=\"headerlink\" title=\"第40条: 考虑用协程来并发地运行多个函数\"></a>第40条: 考虑用协程来并发地运行多个函数</h3><h4 id=\"备忘录-31\"><a href=\"#备忘录-31\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li><p>线程有三个大问题：</p>\n<ul>\n<li>需要特定工具去确定安全性</li>\n<li>单个线程需要8M的内存</li>\n<li>线程启动消耗</li>\n</ul>\n</li>\n<li><p>coroutine只有1kb的内存消耗</p>\n</li>\n<li><p>generator可以通过send方法把值传递给yield</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_coroutine</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        received = <span class=\"keyword\">yield</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Received:\"</span>, received)</span><br><span class=\"line\">it = my_coroutine()</span><br><span class=\"line\">next(it)</span><br><span class=\"line\">it.send(<span class=\"string\">\"First\"</span>)</span><br><span class=\"line\">(<span class=\"string\">'Received:'</span>, <span class=\"string\">'First'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Python2不支持直接yield generator，可以使用for循环yield</p>\n</li>\n</ul>\n<h3 id=\"第41条-考虑用-concurrent-futures-来实现真正的并行计算\"><a href=\"#第41条-考虑用-concurrent-futures-来实现真正的并行计算\" class=\"headerlink\" title=\"第41条: 考虑用 concurrent.futures 来实现真正的并行计算\"></a>第41条: 考虑用 concurrent.futures 来实现真正的并行计算</h3><h4 id=\"备忘录-32\"><a href=\"#备忘录-32\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>CPU瓶颈模块使用C扩展</li>\n<li>concurrent.futures的multiprocessing可以并行处理一些任务，Python2没有这个模块</li>\n<li>multiprocessing 模块所提供的那些高级功能，都特别复杂，开发者尽量不要直接使用它们</li>\n</ul>\n<p>使用 <code>concurrent.futures</code> 里面的 <strong>ProcessPoolExecutor </strong>可以很简单地平行处理 CPU-bound 的程式，省得用 <code>multiprocessing</code> 自定义。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ProcessPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\">start = time()</span><br><span class=\"line\">pool = ProcessPoolExecutor(max_workers=<span class=\"number\">2</span>)  <span class=\"comment\"># The one change</span></span><br><span class=\"line\">results = list(pool.map(gcd, numbers))</span><br><span class=\"line\">end = time()</span><br><span class=\"line\">print(<span class=\"string\">'Took %.3f seconds'</span> % (end - start))</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、内置模块\"><a href=\"#六、内置模块\" class=\"headerlink\" title=\"六、内置模块\"></a>六、内置模块</h2><h3 id=\"第42条-用-functools-wraps-定义函数修饰器\"><a href=\"#第42条-用-functools-wraps-定义函数修饰器\" class=\"headerlink\" title=\"第42条: 用 functools.wraps 定义函数修饰器\"></a>第42条: 用 functools.wraps 定义函数修饰器</h3><h4 id=\"备忘录-33\"><a href=\"#备忘录-33\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li><p>装饰器可以对函数进行封装，但是会改变函数信息</p>\n</li>\n<li><p>使用 functools 的 warps 可以解决这个问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trace</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># …</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"><span class=\"meta\">@trace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># …</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第43条-考虑用-contextlib-和with-语句来改写可复用的-try-finally-代码\"><a href=\"#第43条-考虑用-contextlib-和with-语句来改写可复用的-try-finally-代码\" class=\"headerlink\" title=\"第43条: 考虑用 contextlib 和with 语句来改写可复用的 try/finally 代码\"></a>第43条: 考虑用 contextlib 和with 语句来改写可复用的 try/finally 代码</h3><h4 id=\"备忘录-34\"><a href=\"#备忘录-34\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>使用with语句代替try/finally，增加代码可读性</li>\n<li>使用 contextlib 提供的 contextmanager 装饰函数就可以被 with 使用</li>\n<li><p>with 和 yield 返回值使用</p>\n<p><code>contextlib.contextmanager</code>，方便我们在做 <strong>context managers </strong>。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@contextmanager</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log_level</span><span class=\"params\">(level, name)</span>:</span></span><br><span class=\"line\">    logger = logging.getLogger(name)</span><br><span class=\"line\">    old_level = logger.getEffectiveLevel()</span><br><span class=\"line\">    logger.setLevel(level)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> logger</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        logger.setLevel(old_level)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> log_level(logging.DEBUG, <span class=\"string\">'my-log'</span>) <span class=\"keyword\">as</span> logger:</span><br><span class=\"line\">    logger.debug(<span class=\"string\">'This is my message!'</span>)</span><br><span class=\"line\">    logging.debug(<span class=\"string\">'This will not print'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">'my-log'</span>)</span><br><span class=\"line\">logger.debug(<span class=\"string\">'Debug will not print'</span>)</span><br><span class=\"line\">logger.error(<span class=\"string\">'Error will print'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第44条-用-copyreg-实现可靠的-pickle-操作\"><a href=\"#第44条-用-copyreg-实现可靠的-pickle-操作\" class=\"headerlink\" title=\"第44条: 用 copyreg 实现可靠的 pickle 操作\"></a>第44条: 用 copyreg 实现可靠的 pickle 操作</h3><h4 id=\"备忘录-35\"><a href=\"#备忘录-35\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>pickle 模块只能序列化和反序列化确认没有问题的对象</li>\n<li>copyreg的 pickle 支持属性丢失，版本和导入类表信息</li>\n</ul>\n<p>使用 <code>copyreg</code>這个内建的 module ，搭配 <code>pickle</code>使用。</p>\n<p><code>pickle</code>使用上很简单，假设我们有个 class:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameState</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.level = <span class=\"number\">0</span></span><br><span class=\"line\">        self.lives = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">state = GameState()</span><br><span class=\"line\">state.level += <span class=\"number\">1</span>  <span class=\"comment\"># Player beat a level</span></span><br><span class=\"line\">state.lives -= <span class=\"number\">1</span>  <span class=\"comment\"># Player had to try again</span></span><br></pre></td></tr></table></figure>\n<p>可以用 <code>pickle</code>保存 object</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">state_path = <span class=\"string\">'/tmp/game_state.bin'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(state_path, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    pickle.dump(state, f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(state_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    state_after = pickle.load(f)</span><br><span class=\"line\"><span class=\"comment\"># &#123;'lives': 3, 'level': 1&#125;</span></span><br><span class=\"line\">print(state_after.__dict__)</span><br></pre></td></tr></table></figure>\n<p>但是如果增加了新的 field， <code>game_state.bin</code>load 回來的 object 当然不会有新的 field (points)，可是它仍然是 GameState 的 instance，这会造成混乱。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameState</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.level = <span class=\"number\">0</span></span><br><span class=\"line\">        self.lives = <span class=\"number\">4</span></span><br><span class=\"line\">        self.points = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(state_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> :</span><br><span class=\"line\">    state_after = pickle.load(f)</span><br><span class=\"line\"><span class=\"comment\"># &#123;'lives': 3, 'level': 1&#125;</span></span><br><span class=\"line\">print(state_after.__dict__)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(state_after, GameState)</span><br></pre></td></tr></table></figure>\n<p>使用 <code>copyreg</code>可以解決这个问题，它可以注册用來 serialize Python 物件的函式。</p>\n<h5 id=\"Default-Attribute-Values\"><a href=\"#Default-Attribute-Values\" class=\"headerlink\" title=\"Default Attribute Values\"></a>Default Attribute Values</h5><p><code>pickle_game_state()</code> 返回一个 tuple ，包含了拿來 unpickle 的函式以及传入函式的引数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copyreg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameState</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, level=<span class=\"number\">0</span>, lives=<span class=\"number\">4</span>, points=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        self.level = level</span><br><span class=\"line\">        self.lives = lives</span><br><span class=\"line\">        self.points = points</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pickle_game_state</span><span class=\"params\">(game_state)</span>:</span></span><br><span class=\"line\">    kwargs = game_state.__dict__</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unpickle_game_state, (kwargs,)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unpickle_game_state</span><span class=\"params\">(kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> GameState(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">copyreg.pickle(GameState, pickle_game_state)</span><br></pre></td></tr></table></figure>\n<h5 id=\"Versioning-Classes\"><a href=\"#Versioning-Classes\" class=\"headerlink\" title=\"Versioning Classes\"></a>Versioning Classes</h5><p><code>copyreg</code>也可以拿來记录版本，达到向后相容的目的。</p>\n<p>如果原先的 class 如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameState</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, level=<span class=\"number\">0</span>, lives=<span class=\"number\">4</span>, points=<span class=\"number\">0</span>, magic=<span class=\"number\">5</span>)</span>:</span></span><br><span class=\"line\">        self.level = level</span><br><span class=\"line\">        self.lives = lives</span><br><span class=\"line\">        self.points = points</span><br><span class=\"line\">        self.magic = magic</span><br><span class=\"line\"></span><br><span class=\"line\">state = GameState()</span><br><span class=\"line\">state.points += <span class=\"number\">1000</span></span><br><span class=\"line\">serialized = pickle.dumps(state)</span><br></pre></td></tr></table></figure>\n<p>后来修改了，拿掉 lives ，这时原先使用预设参数的做法不能用了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameState</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, level=<span class=\"number\">0</span>, points=<span class=\"number\">0</span>, magic=<span class=\"number\">5</span>)</span>:</span></span><br><span class=\"line\">        self.level = level</span><br><span class=\"line\">        self.points = points</span><br><span class=\"line\">        self.magic = magic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># TypeError: __init__() got an unexpected keyword argument 'lives'</span></span><br><span class=\"line\">pickle.loads(serialized)</span><br></pre></td></tr></table></figure>\n<p>在 serialize 时多加上版本号， deserialize 时加以判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pickle_game_state</span><span class=\"params\">(game_state)</span>:</span></span><br><span class=\"line\">    kwargs = game_state.__dict__</span><br><span class=\"line\">    kwargs[<span class=\"string\">'version'</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unpickle_game_state, (kwargs,)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unpickle_game_state</span><span class=\"params\">(kwargs)</span>:</span></span><br><span class=\"line\">    version = kwargs.pop(<span class=\"string\">'version'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> version == <span class=\"number\">1</span>:</span><br><span class=\"line\">        kwargs.pop(<span class=\"string\">'lives'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> GameState(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">copyreg.pickle(GameState, pickle_game_state)</span><br></pre></td></tr></table></figure>\n<h5 id=\"Stable-Import-Paths\"><a href=\"#Stable-Import-Paths\" class=\"headerlink\" title=\"Stable Import Paths\"></a>Stable Import Paths</h5><p>重写程式时，如果 class 改名了，想要 load  的 serialized 物件当然不能用，但还是可以使用 <code>copyreg</code>解決。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BetterGameState</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, level=<span class=\"number\">0</span>, points=<span class=\"number\">0</span>, magic=<span class=\"number\">5</span>)</span>:</span></span><br><span class=\"line\">        self.level = level</span><br><span class=\"line\">        self.points = points</span><br><span class=\"line\">        self.magic = magic</span><br><span class=\"line\"></span><br><span class=\"line\">copyreg.pickle(BetterGameState, pickle_game_state)</span><br></pre></td></tr></table></figure>\n<p>可以发现 <code>unpickle_game_state()</code>的 path 进入 dump 出來的资料中，当然这样做的缺点就是 <code>unpickle_game_state()</code>所在的 module 不能改 path 了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">state = BetterGameState()</span><br><span class=\"line\">serialized = pickle.dumps(state)</span><br><span class=\"line\">print(serialized[:<span class=\"number\">35</span>])</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"string\">b'\\x80\\x03c__main__\\nunpickle_game_state\\nq\\x00&#125;'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第45条-用-datetime-替代-time-来处理本地时间\"><a href=\"#第45条-用-datetime-替代-time-来处理本地时间\" class=\"headerlink\" title=\"第45条: 用 datetime 替代 time 来处理本地时间\"></a>第45条: 用 datetime 替代 time 来处理本地时间</h3><h4 id=\"备忘录-36\"><a href=\"#备忘录-36\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>不要使用time模块在转换不同时区的时间</li>\n<li>而用datetime配合 pytz 转换</li>\n<li>总数保持UTC时间，最后面再输出本地时间</li>\n</ul>\n<h3 id=\"第46条-使用内置算法与数据结构\"><a href=\"#第46条-使用内置算法与数据结构\" class=\"headerlink\" title=\"第46条: 使用内置算法与数据结构\"></a>第46条: 使用内置算法与数据结构</h3><h4 id=\"备忘录-37\"><a href=\"#备忘录-37\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>使用 Python 内置的模块来描述各种算法和数据结构</li>\n<li>开发者不应该自己去重新实现他们，因为我们很难把它写好</li>\n</ul>\n<p>内置算法和数据结构</p>\n<ul>\n<li><p>collections.deque</p>\n</li>\n<li><p>collections.OrderedDict</p>\n</li>\n<li><p>collection.defaultdict</p>\n</li>\n<li><p>heapq模块操作list（优先队列）：heappush，heappop和nsmallest</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = []</span><br><span class=\"line\">heappush(a, <span class=\"number\">5</span>)</span><br><span class=\"line\">heappush(a, <span class=\"number\">3</span>)</span><br><span class=\"line\">heappush(a, <span class=\"number\">7</span>)</span><br><span class=\"line\">heappush(a, <span class=\"number\">4</span>)</span><br><span class=\"line\">print(heappop(a), heappop(a), heappop(a), heappop(a))</span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 3 4 5 7</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bisect模块：bisect_left可以对有序列表进行高效二分查找</p>\n</li>\n<li><p>itertools模块（Python2不一定支持）：</p>\n<ul>\n<li>连接迭代器：chain，cycle，tee和zip_longest</li>\n<li>过滤：islice，takewhile，dropwhile，filterfalse</li>\n<li>组合不同迭代器：product，permutations和combination</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第47-条-在重视-精确度的场合，应该使用-decimal\"><a href=\"#第47-条-在重视-精确度的场合，应该使用-decimal\" class=\"headerlink\" title=\"第47 条: 在重视 精确度的场合，应该使用 decimal\"></a>第47 条: 在重视 精确度的场合，应该使用 decimal</h3><h4 id=\"备忘录-38\"><a href=\"#备忘录-38\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>高精度要求的使用 Decimal 处理，如对舍入行为要求很严的场合，eg: 涉及货币计算的场合</li>\n</ul>\n<h3 id=\"第48条-学会安装由-Python-开发者社区所构建的模块\"><a href=\"#第48条-学会安装由-Python-开发者社区所构建的模块\" class=\"headerlink\" title=\"第48条: 学会安装由 Python 开发者社区所构建的模块\"></a>第48条: 学会安装由 Python 开发者社区所构建的模块</h3><ul>\n<li>在 <a href=\"https://pypi.python.org\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org</a> 查找通用模块，并且用pip安装</li>\n</ul>\n<h2 id=\"七、协作开发\"><a href=\"#七、协作开发\" class=\"headerlink\" title=\"七、协作开发\"></a>七、协作开发</h2><h3 id=\"第49条-为每个函数、类和模块编写文档字符串\"><a href=\"#第49条-为每个函数、类和模块编写文档字符串\" class=\"headerlink\" title=\"第49条: 为每个函数、类和模块编写文档字符串\"></a>第49条: 为每个函数、类和模块编写文档字符串</h3><h3 id=\"第50条-用包来安排模块，并提供稳固的-API\"><a href=\"#第50条-用包来安排模块，并提供稳固的-API\" class=\"headerlink\" title=\"第50条: 用包来安排模块，并提供稳固的 API\"></a>第50条: 用包来安排模块，并提供稳固的 API</h3><h3 id=\"第51条-为自编的模块定义根异常，以便将调用者与-API-相隔离\"><a href=\"#第51条-为自编的模块定义根异常，以便将调用者与-API-相隔离\" class=\"headerlink\" title=\"第51条: 为自编的模块定义根异常，以便将调用者与 API 相隔离\"></a>第51条: 为自编的模块定义根异常，以便将调用者与 API 相隔离</h3><h3 id=\"第52条-用适当的方式打破循环依赖问题\"><a href=\"#第52条-用适当的方式打破循环依赖问题\" class=\"headerlink\" title=\"第52条: 用适当的方式打破循环依赖问题\"></a>第52条: 用适当的方式打破循环依赖问题</h3><h3 id=\"第53条-用虚拟环境隔离项目，并重建其依赖关系\"><a href=\"#第53条-用虚拟环境隔离项目，并重建其依赖关系\" class=\"headerlink\" title=\"第53条: 用虚拟环境隔离项目，并重建其依赖关系\"></a>第53条: 用虚拟环境隔离项目，并重建其依赖关系</h3><h2 id=\"八、部署\"><a href=\"#八、部署\" class=\"headerlink\" title=\"八、部署\"></a>八、部署</h2><h3 id=\"第54条-考虑用模块级别的代码来配置不同的部署环境\"><a href=\"#第54条-考虑用模块级别的代码来配置不同的部署环境\" class=\"headerlink\" title=\"第54条: 考虑用模块级别的代码来配置不同的部署环境\"></a>第54条: 考虑用模块级别的代码来配置不同的部署环境</h3><h3 id=\"第55条-通过-repr-字符串来输出调试信息\"><a href=\"#第55条-通过-repr-字符串来输出调试信息\" class=\"headerlink\" title=\"第55条: 通过 repr 字符串来输出调试信息\"></a>第55条: 通过 repr 字符串来输出调试信息</h3><h4 id=\"备忘录-39\"><a href=\"#备忘录-39\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>repr作用于内置类型会产生可打印的字符串，eval可以获得这个字符串的原始值</li>\n<li><strong>repr</strong>自定义上面输出的字符串</li>\n</ul>\n<h3 id=\"第56条-用-unittest-来测试全部代码\"><a href=\"#第56条-用-unittest-来测试全部代码\" class=\"headerlink\" title=\"第56条: 用 unittest 来测试全部代码\"></a>第56条: 用 unittest 来测试全部代码</h3><h4 id=\"备忘录-40\"><a href=\"#备忘录-40\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>使用unittest编写测试用例，不光是单元测试，集成测试也很重要</li>\n<li>继承TestCase，并且每个方法名都以test开始</li>\n</ul>\n<h3 id=\"第57条-考虑用-pdb-实现交互调试\"><a href=\"#第57条-考虑用-pdb-实现交互调试\" class=\"headerlink\" title=\"第57条: 考虑用 pdb 实现交互调试\"></a>第57条: 考虑用 pdb 实现交互调试</h3><h4 id=\"备忘录-41\"><a href=\"#备忘录-41\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>启用pdb，然后在配合shell命令调试 import pdb; pdb.set_trace();</li>\n</ul>\n<h3 id=\"第58条-先分析性能再优化\"><a href=\"#第58条-先分析性能再优化\" class=\"headerlink\" title=\"第58条: 先分析性能再优化\"></a>第58条: 先分析性能再优化</h3><ul>\n<li>cProfile 比 profile更精准<ul>\n<li>ncalls:调用次数</li>\n<li>tottime:函数自身耗时，不包括调用函数的耗时</li>\n<li>cumtime:包括调用的函数耗时</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第59条-用-tracemaloc-来掌握内存的使用及泄露情况\"><a href=\"#第59条-用-tracemaloc-来掌握内存的使用及泄露情况\" class=\"headerlink\" title=\"第59条: 用 tracemaloc 来掌握内存的使用及泄露情况\"></a>第59条: 用 tracemaloc 来掌握内存的使用及泄露情况</h3><h4 id=\"备忘录-42\"><a href=\"#备忘录-42\" class=\"headerlink\" title=\"备忘录\"></a>备忘录</h4><ul>\n<li>gc模块可以知道有哪些对象存在，但是不知道怎么分配的</li>\n<li>tracemalloc可以得到内存的使用情况，但是只在Python3.4及其以上版本提供</li>\n</ul>\n<h3 id=\"参考书籍\"><a href=\"#参考书籍\" class=\"headerlink\" title=\"参考书籍\"></a>参考书籍</h3><p><a href=\"https://github.com/ihongChen/Effective-python-ex\" target=\"_blank\" rel=\"noopener\">代码</a></p>\n<p><a href=\"https://pan.baidu.com/s/19nMcvcWgPMe8Ayo1hqCj9w\" target=\"_blank\" rel=\"noopener\">Effective Python(英文版) PDF</a>  密码: 7v9r</p>\n<p><a href=\"https://pan.baidu.com/s/1tgvmcKLSIHuG37jLpbyQMg\" target=\"_blank\" rel=\"noopener\">Effecttive Python(中文不完整非扫描版) PDF</a>  密码: 86bm</p>\n<p><a href=\"https://pan.baidu.com/s/1_1oXO_Dd2Kvl7qPYdPeJ6g\" target=\"_blank\" rel=\"noopener\">Effective Python(中文扫描版) PDF</a>   密码: dg7w</p>\n","categories":["Python"],"tags":["Python","effective - 学习笔记"]},{"title":"openresty/nginx 实践","url":"http://mu-mo.top/2018/04/29/其他/nginx 实践/","content":"<p>nginx的两个很重要的优势就是反向代理和负载均衡</p>\n<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>本文nginx采用目录模板如下：</p>\n<ul>\n<li><p>nginx 配置文件</p>\n<p>将你的服务的 Nginx 配置文件目录：<em>/etc/nginx/sites-available/</em></p>\n<p>目录下，然后通过软连接链到 <em>/etc/nginx/sites-enabled/</em> </p>\n</li>\n<li><p>SSL 证书</p>\n<p>使用 letsencrypt 签发的证书，目录位置：<em>/etc/letsencrypt/</em> </p>\n<p>ssl_dhparam 目录位置：<em>/etc/letsencrypt/</em> </p>\n<p>若为其他机构签发的证书可在<em>/etc</em> 下新建一个文件夹存放</p>\n</li>\n<li><p>静态文件部署</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/mnt/var/www/&lt;your-name&gt;/&lt;your-project-name&gt;/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目部署</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/var/www/&lt;your-name&gt;/&lt;your-project-name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nginx日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/mnt/log/nginx/&lt;your-project-name&gt;/&lt;env&gt;/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-基础知识\"><a href=\"#1-基础知识\" class=\"headerlink\" title=\"1. 基础知识\"></a>1. 基础知识</h4><p><strong>反向代理</strong>（Reverse Proxy）方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p>举个例子，一个用户访问 <a href=\"http://www.example.com/readme\" target=\"_blank\" rel=\"noopener\">http://www.example.com/readme</a>，但是 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a> 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a> 获取 readme 页面一样。这里所提到的 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a> 这个域名对应的服务器就设置了反向代理功能。</p>\n<p>反向代理服务器，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。如下图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/3/18/162393ce24ce250b?w=543&amp;h=271&amp;f=png&amp;s=32894\" alt=\"proxy\"></p>\n<h4 id=\"2-实践\"><a href=\"#2-实践\" class=\"headerlink\" title=\"2. 实践\"></a>2. 实践</h4><p>假如你有多台服务器（下文中分别用代号1， 2， 3， 4表示），那么你可以只暴露1号服务器，通过在1号服务器上架设反向代理，映射到2、3、4号服务器上，同时在2、3、4号服务器上设置防火墙让2、3、4号服务器只允许通过1号服务器访问</p>\n<h3 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h3><p>服务器的nginx.conf文件：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#user  nobody;</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反向代理服务器的nginx配置文件模板：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> monitor_server &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> &lt;server1-host&gt;:&lt;port&gt;; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> &lt;server2-host&gt;:&lt;port&gt;;   <span class=\"comment\"># 可通过nginx负载均衡 </span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive</span> <span class=\"number\">2000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> hostname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect all http to https</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> hostname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/hostname/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/hostname/privkey.pem;</span><br><span class=\"line\">    <span class=\"comment\"># disable SSLv2</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ciphers' order matters</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> <span class=\"string\">\"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!aNULL\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># the Elliptic curve key used for the ECDHE cipher.</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_ecdh_curve</span> secp384r1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># use command line</span></span><br><span class=\"line\">    <span class=\"comment\"># openssl dhparam -out dhparam.pem 2048</span></span><br><span class=\"line\">    <span class=\"comment\"># to generate Diffie Hellman Ephemeral Parameters</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem;</span><br><span class=\"line\">      <span class=\"comment\"># let the server choose the cipher</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># turn on the OCSP Stapling and verify</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling_verify</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># http compression method is not secure in https</span></span><br><span class=\"line\">    <span class=\"comment\"># opens you up to vulnerabilities like BREACH, CRIME</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> <span class=\"string\">\"text/plain\"</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /mnt/var/www/&lt;your-name&gt;/hostname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://monitor_server;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto <span class=\"variable\">$scheme</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /mnt/log/nginx/hostname/access.log;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /mnt/log/nginx/hostname/error.log;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原始服务器配置模板：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">listen</span> &lt;port&gt;;</span><br><span class=\"line\">      <span class=\"attribute\">server_name</span> hostname;</span><br><span class=\"line\">      <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">          <span class=\"attribute\">root</span> /var/www/&lt;your-name&gt;/&lt;project name&gt;;</span><br><span class=\"line\">          <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> /var/log/nginx/hostname/access.log;</span><br><span class=\"line\">      <span class=\"attribute\">error_log</span> /var/log/nginx/hostname/error.log;</span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","categories":["其他"],"tags":["config","nginx","openresty"]},{"title":"python logging 模块学习","url":"http://mu-mo.top/2018/04/24/Python/python logging模块学习/","content":"<p><strong>转自</strong> <a href=\"http://www.keakon.net/2013/02/21/%E5%85%B3%E4%BA%8Elogging%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%90%E4%BA%8B\" target=\"_blank\" rel=\"noopener\">关于 logging 的一些琐事</a></p>\n<h3 id=\"1-为什么logging-info-默认不输出\"><a href=\"#1-为什么logging-info-默认不输出\" class=\"headerlink\" title=\"1. 为什么logging.info()默认不输出\"></a>1. 为什么logging.info()默认不输出</h3><p>因为默认生成的 root logger 的 level 是 logging.WARNING，低于该级别的就不输出了。可以进行如下设置来输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import logging</span><br><span class=\"line\">&gt;&gt;&gt; logging.info(&apos;test&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; root_logger = logging.getLogger()  # 或使用未公开的 logging.root</span><br><span class=\"line\">&gt;&gt;&gt; root_logger.level</span><br><span class=\"line\">30</span><br><span class=\"line\">&gt;&gt;&gt; logging.getLevelName(30)</span><br><span class=\"line\">&apos;WARNING&apos;</span><br><span class=\"line\">&gt;&gt;&gt; root_logger.level = logging.NOTSET</span><br><span class=\"line\">&gt;&gt;&gt; logging.info(&apos;test&apos;)</span><br><span class=\"line\">INFO:root:test</span><br></pre></td></tr></table></figure>\n<p>如果还没配置 handler 的话，可以用 logging.basicConfig() 来配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; root_logger.handlers</span><br><span class=\"line\">[]</span><br><span class=\"line\">&gt;&gt;&gt; logging.basicConfig(level=logging.NOTSET)</span><br><span class=\"line\">&gt;&gt;&gt; root_logger.handlers</span><br><span class=\"line\">[&lt;logging.StreamHandler object at 0x108becd10&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; logging.info(&apos;test&apos;)</span><br><span class=\"line\">INFO:root:test</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-如何指定输出格式\"><a href=\"#2-如何指定输出格式\" class=\"headerlink\" title=\"2. 如何指定输出格式\"></a>2. 如何指定输出格式</h3><p>给 logger 的 handler 设置一个 logging.Formatter 对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; root_logger.handlers[0].formatter.format</span><br><span class=\"line\">&lt;bound method Formatter.format of &lt;logging.Formatter object at 0x10c062d90&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; root_logger.handlers[0].formatter.datefmt</span><br><span class=\"line\">&gt;&gt;&gt; root_logger.handlers[0].formatter._fmt</span><br><span class=\"line\">&apos;%(levelname)s:%(name)s:%(message)s&apos;</span><br><span class=\"line\">&gt;&gt;&gt; LOGGING_FORMAT = &apos;[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d] %(message)s&apos;</span><br><span class=\"line\">&gt;&gt;&gt; DATE_FORMAT = &apos;%y%m%d %H:%M:%S&apos;</span><br><span class=\"line\">&gt;&gt;&gt; formatter = logging.Formatter(LOGGING_FORMAT, DATE_FORMAT)</span><br><span class=\"line\">&gt;&gt;&gt; root_logger.handlers[0].formatter = formatter</span><br><span class=\"line\">&gt;&gt;&gt; logging.info(&apos;test&apos;)</span><br><span class=\"line\">[I 130221 01:58:28 &lt;stdin&gt;:1] test</span><br></pre></td></tr></table></figure>\n<p>如果还没配置 handler 的话，可以用 logging.basicConfig() 来配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">logging.basicConfig(</span><br><span class=\"line\">    level=logging.NOTSET,</span><br><span class=\"line\">    format=LOGGING_FORMAT,</span><br><span class=\"line\">    datefmt=DATE_FORMAT</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>详细的格式介绍就查看<a href=\"http://docs.python.org/2/library/logging.html#logrecord-attributes\" target=\"_blank\" rel=\"noopener\">文档</a>吧。</p>\n<h3 id=\"3-为什么我重定向了stdout却看不到输出\"><a href=\"#3-为什么我重定向了stdout却看不到输出\" class=\"headerlink\" title=\"3. 为什么我重定向了stdout却看不到输出\"></a>3. 为什么我重定向了stdout却看不到输出</h3><p>因为默认生成的 root logger 的 handler 的 stream 是 stderr，不是 stdout：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; root_logger.handlers[0].stream</span><br><span class=\"line\">&lt;open file &apos;&lt;stderr&gt;&apos;, mode &apos;w&apos; at 0x1089cb270&gt;</span><br></pre></td></tr></table></figure>\n<p>可以如下分别配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">stdout_handler = logging.StreamHandler(sys.__stdout__)</span><br><span class=\"line\">stdout_handler.level = logging.DEBUG</span><br><span class=\"line\">stdout_handler.formatter = formatter</span><br><span class=\"line\">root_logger.addHandler(stdout_handler)</span><br><span class=\"line\"></span><br><span class=\"line\">stderr_handler = logging.StreamHandler(sys.__stderr__)</span><br><span class=\"line\">stderr_handler.level = logging.WARNING</span><br><span class=\"line\">stderr_handler.formatter = formatter</span><br><span class=\"line\">root_logger.addHandler(stderr_handler)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-如何将日志输出到文件\"><a href=\"#4-如何将日志输出到文件\" class=\"headerlink\" title=\"4. 如何将日志输出到文件\"></a>4. 如何将日志输出到文件</h3><p>使用 logging.FileHandler()：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">handler = logging.FileHandler(&apos;log/test.log&apos;)</span><br><span class=\"line\">root_logger.addHandler(handler)</span><br></pre></td></tr></table></figure>\n<p>其中文件名可以使用相对路径，但要保证文件夹存在。默认的文件打开方式是 append。 如果还没配置 handler 的话，可以用 logging.basicConfig() 来配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">logging.basicConfig(</span><br><span class=\"line\">    level=logging.NOTSET,</span><br><span class=\"line\">    format=LOGGING_FORMAT,</span><br><span class=\"line\">    datefmt=DATE_FORMAT,</span><br><span class=\"line\">    filename=&apos;log/test.log&apos;,</span><br><span class=\"line\">    filemode=&apos;a&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-捕捉了一个异常，如何输出执行堆栈？\"><a href=\"#5-捕捉了一个异常，如何输出执行堆栈？\" class=\"headerlink\" title=\"5. 捕捉了一个异常，如何输出执行堆栈？\"></a>5. 捕捉了一个异常，如何输出执行堆栈？</h3><p>使用 logging.exception()，或在调用 logging.debug() 等方法时加上 exc_info=True 参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; try:</span><br><span class=\"line\">...     0 / 0</span><br><span class=\"line\">... except:</span><br><span class=\"line\">...     logging.exception(&apos;Catch an exception.&apos;)</span><br><span class=\"line\">...     print &apos;-&apos; * 10</span><br><span class=\"line\">...     logging.warning(&apos;Catch an exception.&apos;, exc_info=True)</span><br><span class=\"line\">... </span><br><span class=\"line\">ERROR:root:Catch an exception.</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span><br><span class=\"line\">ZeroDivisionError: integer division or modulo by zero</span><br><span class=\"line\">----------</span><br><span class=\"line\">WARNING:root:Catch an exception.</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span><br><span class=\"line\">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-如何针对不同的模块，输出到不同的日志\"><a href=\"#6-如何针对不同的模块，输出到不同的日志\" class=\"headerlink\" title=\"6. 如何针对不同的模块，输出到不同的日志\"></a>6. 如何针对不同的模块，输出到不同的日志</h3><p>可以创建多个 logger：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console_handler = logging.StreamHandler(sys. __stdout__)</span><br><span class=\"line\">console_handler.level = logging.DEBUG</span><br><span class=\"line\">console_logger = logging.getLogger(&apos;test&apos;)</span><br><span class=\"line\">console_logger.addHandler(console_handler)</span><br><span class=\"line\"></span><br><span class=\"line\">file_handler = logging.FileHandler(&apos;log/test.log&apos;)</span><br><span class=\"line\">file_handler.level = logging.WARNING</span><br><span class=\"line\">file_logger = logging.getLogger(&apos;test.file&apos;)</span><br><span class=\"line\">file_logger.addHandler(file_handler)</span><br><span class=\"line\"></span><br><span class=\"line\">console_logger.error(&apos;test&apos;)</span><br><span class=\"line\">file_logger.error(&apos;test&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">console_logger.parent is root_logger</span><br><span class=\"line\">file_logger.parent is console_logger</span><br><span class=\"line\">console_logger.getChild(&apos;file&apos;) is file_logger</span><br></pre></td></tr></table></figure>\n<p>每个 logger 都有个名字，以 ‘.’ 来划分继承关系。名字为空的就是 root_logger，console_logger 的名字是 ‘test’，因此 root_logger 是 console_logger 的 parent；而 file_logger 的名字是 ‘test.file’，因此 console_logger 是 file_logger 的 parent。 如果 logger 的 propagate 属性为 True（默认值），则它的记录也会传到父 logger。因此，file_logger 在记录到文件的同时，也会在 stdout 输出日志。 建议每个模块都用自己的 logger。</p>\n<h3 id=\"7-如何指定某些日志不输出\"><a href=\"#7-如何指定某些日志不输出\" class=\"headerlink\" title=\"7. 如何指定某些日志不输出\"></a>7. 如何指定某些日志不输出</h3><p>使用 logging.Filter 来过滤记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mport logging</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class OddFilter(logging.Filter):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.count = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def filter(self, record):</span><br><span class=\"line\">        self.count += 1</span><br><span class=\"line\">        if record.args[0] &amp; 1:</span><br><span class=\"line\">            record.count = self.count  # 给 record 增加了 count 属性</span><br><span class=\"line\">            return True  # 为 True 的记录才输出</span><br><span class=\"line\">        return False</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root_logger = logging.getLogger()</span><br><span class=\"line\">logging.basicConfig(level=logging.NOTSET, format=&apos;%(message)s (total: %(count)d)&apos;)  # 可以使用 record.count 来格式化</span><br><span class=\"line\">root_logger.level = logging.NOTSET</span><br><span class=\"line\">root_logger.addFilter(OddFilter())</span><br><span class=\"line\"></span><br><span class=\"line\">for i in xrange(100):</span><br><span class=\"line\">    logging.error(&apos;number: %d&apos;, random.randint(0, 1000))</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-大文件分割\"><a href=\"#8-大文件分割\" class=\"headerlink\" title=\"8. 大文件分割\"></a>8. 大文件分割</h3><p>可以使用 logging.handlers.RotatingFileHandler 和 logging.handlers.TimedRotatingFileHandler。前者按文件大小来分割，后者按时间来分割。 它们会在达到分割条件时（文件达到指定大小或达到指定时间），把当前的日志重命名为备份文件，然后再打开新文件来记录。 值得一提的是，如果备份文件名已存在，就会被删除。所以在多进程时不建议使用。我是将日志输出到 stdout 和 stderr，再用 supervisor 来分割日志。 此外还有一些没考虑到的特殊情况，建议使用前读读源码，然后自行实现。</p>\n","categories":["Python"],"tags":["Python - 学习笔记","logging"]},{"title":"红黑树","url":"http://mu-mo.top/2018/04/13/数据结构/红黑树/","content":"<p>注：本文对网上一些博客进行详细与修正，并给出C语言实现</p>\n<p>红黑树是平衡二叉查找树的一种。为了深入理解红黑树，我们需要从二叉查找树开始讲起。</p>\n<h2 id=\"BST\"><a href=\"#BST\" class=\"headerlink\" title=\"BST\"></a>BST</h2><p>二叉查找树（Binary Search Tree，简称BST）是一棵二叉树，它的左子节点的值比父节点的值要小，右节点的值要比父节点的值大。它的高度决定了它的查找效率。</p>\n<p>在理想的情况下，二叉查找树增删查改的时间复杂度为O(logN)（其中N为节点数），最坏的情况下为O(N)。当它的高度为logN+1时，我们就说二叉查找树是平衡的。<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b082751906?w=492&amp;h=294&amp;f=png&amp;s=32276\" alt=\"BST\"></p>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p>当BST查找的时候，先与当前节点进行比较：</p>\n<ul>\n<li>如果相等的话就返回当前节点；</li>\n<li>如果少于当前节点则继续查找当前节点的左节点；</li>\n<li>如果大于当前节点则继续查找当前节点的右节点。</li>\n</ul>\n<p>直到当前节点指针为空或者查找到对应的节点，程序查找结束。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找某一个值</span></span><br><span class=\"line\"><span class=\"function\">BiTNode <span class=\"title\">SearchValue</span><span class=\"params\">(BiTNode root, <span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    BiTNode current = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; current-&gt;value)</span><br><span class=\"line\">            current = current-&gt;left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; current-&gt;value)</span><br><span class=\"line\">            current = current-&gt;right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>插入操作先通过循环查找到待插入的节点的父节点，和查找父节点的逻辑一样，都是比大小，小的往左，大的往右。找到父节点后，对比父节点，小的就插入到父节点的左节点，大就插入到父节点的右节点上。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入节点</span></span><br><span class=\"line\"><span class=\"function\">BiTNode <span class=\"title\">Insert</span><span class=\"params\">(BiTNode root, <span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BiTNode node = (BiTNode)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct BiTree));</span><br><span class=\"line\">    node-&gt;value = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((root) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BiTNode current = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current-&gt;value == x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;value &gt; x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;left == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                current-&gt;left = node;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current = current-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;right == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                current-&gt;right = node;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current = current-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除操作的步骤如下：</p>\n<ol>\n<li>查找到要删除的节点。</li>\n<li>如果待删除的节点是叶子节点，则直接删除。</li>\n<li>如果待删除的节点不是叶子节点，则先找到待删除节点的右节点的最小节点，用该最小节点的值替换待删除的节点的值，然后删除这个最小节点。</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0826825af?w=840&amp;h=399&amp;f=png&amp;s=78045\" alt=\"BST remove\"></p>\n<h3 id=\"BST存在的问题\"><a href=\"#BST存在的问题\" class=\"headerlink\" title=\"BST存在的问题\"></a>BST存在的问题</h3><p>BST存在的主要问题是，数在插入的时候会导致树倾斜，不同的插入顺序会导致树的高度不一样，而树的高度直接的影响了树的查找效率。理想的高度是logN，最坏的情况是所有的节点都在一条斜线上，这样的树的高度为N。</p>\n<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><p>基于BST存在的问题，一种新的树——平衡二叉查找树(Balanced BST)产生了。平衡树在插入和删除的时候，会通过旋转操作将高度保持在logN。其中两款具有代表性的平衡树分别为AVL树和红黑树。AVL树由于实现比较复杂，而且插入和删除性能差，在实际环境下的应用不如红黑树。</p>\n<p><strong>红黑树（Red-Black Tree，以下简称RBTree）</strong> 的实际应用非常广泛，比如Linux内核中的完全公平调度器、高精度计时器、ext3文件系统等等，各种语言的函数库如Java的TreeMap和TreeSet，C++ STL的map、multimap、multiset等。</p>\n<p>RBTree也是函数式语言中最常用的持久数据结构之一，在计算几何中也有重要作用。值得一提的是，Java 8中HashMap的实现也因为用RBTree取代链表，性能有所提升。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>RBTree的定义如下:</p>\n<ol>\n<li>任何一个节点都有颜色，黑色或者红色</li>\n<li>根节点是黑色的</li>\n<li>所有叶子都是黑色（叶子是NIL节点）</li>\n<li>父子节点之间不能出现两个连续的红节点（每个红色节点必须有两个黑色的子节点）</li>\n<li>从任一节点到其每个叶子的所有<a href=\"https://zh.wikipedia.org/wiki/%E9%81%93%E8%B7%AF_(%E5%9B%BE%E8%AE%BA\" target=\"_blank\" rel=\"noopener\">简单路径</a>)都包含相同数目的黑色节点。</li>\n</ol>\n<p>数据结构表示如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">parent</span>;</span> <span class=\"comment\">//父节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">left</span>;</span>   <span class=\"comment\">//左子树</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">right</span>;</span>  <span class=\"comment\">//右子树</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;           <span class=\"comment\">//value</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> color;          <span class=\"comment\">//节点颜色</span></span><br><span class=\"line\">&#125; * RBTree;</span><br></pre></td></tr></table></figure>\n<p>RBTree在理论上还是一棵BST树，但是它在对BST的插入和删除操作时会维持树的平衡，即保证树的高度在[logN,logN+1]（理论上，极端的情况下可以出现RBTree的高度达到2*logN，但实际上很难遇到）。这样RBTree的查找时间复杂度始终保持在O(logN)从而接近于理想的BST。RBTree的删除和插入操作的时间复杂度也是O(logN)。RBTree的查找操作就是BST的查找操作。</p>\n<p>图例：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0c10ef333?w=450&amp;h=217&amp;f=png&amp;s=12834\" alt=\"An example of a red-black tree\"></p>\n<h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><p>Rotate分为left-rotate（左旋）和right-rotate（右旋）</p>\n<p><strong>注：网上可能有两种版本的旋转，请注意，以下全文均采用此处定义的旋转</strong> </p>\n<h4 id=\"旋转规则：\"><a href=\"#旋转规则：\" class=\"headerlink\" title=\"旋转规则：\"></a>旋转规则：</h4><p>假设当前节点为 node</p>\n<h5 id=\"左旋：（node即为右图中的P\"><a href=\"#左旋：（node即为右图中的P\" class=\"headerlink\" title=\"左旋：（node即为右图中的P)\"></a>左旋：（node即为右图中的P)</h5><p>node节点的父节点变为node的右子树，node的右节点变为node的右子树的左子树，node节点的祖父节点的child节点（可能左可能右）变为node节点的右子树</p>\n<h5 id=\"右旋：（node即为左图中的Q\"><a href=\"#右旋：（node即为左图中的Q\" class=\"headerlink\" title=\"右旋：（node即为左图中的Q)\"></a>右旋：（node即为左图中的Q)</h5><p>node节点的父节点变为node的左子树，node的左节点变为node的左子树的右子树，node节点的祖父节点的child节点（可能左可能右）变为node节点的左子树</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0c0445656?w=612&amp;h=241&amp;f=png&amp;s=30878\" alt=\"Tree rotation.png\"></p>\n<h3 id=\"查找-1\"><a href=\"#查找-1\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p>RBTree的查找操作和BST的查找操作是一样的。请参考BST的查找操作代码。</p>\n<p>插入删除前言：</p>\n<p>在红黑树上进行插入操作和删除操作会导致不再匹配红黑树的性质。恢复红黑树的性质需要少量<img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0b1633a30\" alt=\"{\\displaystyle {\\text{O}}(\\log n)}\">的颜色变更（实际是非常快速的）和不超过三次<a href=\"https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC\" target=\"_blank\" rel=\"noopener\">树旋转</a>（对于插入操作是两次）。虽然插入和删除很复杂，但操作时间仍可以保持为<img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0b1633a30\" alt=\"{\\displaystyle {\\text{O}}(\\log n)}\">次。</p>\n<h3 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>约定：新插入的节点初始都是 <strong>红色的</strong> 。</p>\n<h4 id=\"无须修复：\"><a href=\"#无须修复：\" class=\"headerlink\" title=\"无须修复：\"></a>无须修复：</h4><ul>\n<li>新节点C位于树的 <strong>根</strong> 上，没有父节点<br>操作：初始化根节点即可，并将颜色变为黑色</li>\n<li>新节点的父节点B是黑色<br>操作：直接插入即可，易得红黑树所有性质满足，因为新插入的节点为红色的，且与原树不冲突  </li>\n</ul>\n<h4 id=\"需要修复：\"><a href=\"#需要修复：\" class=\"headerlink\" title=\"需要修复：\"></a>需要修复：</h4><p>注：以下均采用父节点为祖父节点的左节点条件，若为右节点，则只需做镜像操作即可</p>\n<p>循环条件：需要修复的节点的父节点的颜色为RED</p>\n<h5 id=\"case-1\"><a href=\"#case-1\" class=\"headerlink\" title=\"case 1\"></a>case 1</h5><p>情况：父节点B和叔父节点C二者都是红色</p>\n<p>操作：将父节点和叔叔节点与祖父节点的颜色互换，即维持了 <strong>局部的颜色符合RBTree定义的第四条和第五条。下图中，操作完成后A节点变成了新的修复节点。</strong> 如果A节点的父节点不是黑色的，则继续做修复操作。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b08528d4df?w=847&amp;h=348&amp;f=png&amp;s=62719\" alt=\"插入修复case 1\"></p>\n<h5 id=\"case-2\"><a href=\"#case-2\" class=\"headerlink\" title=\"case 2\"></a>case 2</h5><p>情况：父节点B是红色而叔父节点U是黑色(NIL节点是黑色的)，新节点C是其父节点B的左子节点，而父节点B又是其父节点A的左子节点(一条直线上)</p>\n<p>操作：将祖父节点A节点进行右旋操作，并且和父节点B互换颜色。通过该修复操作RBTRee的高度和颜色都符合红黑树的定义。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0b6f63e8d?w=453&amp;h=218&amp;f=png&amp;s=25637\" alt=\"插入修复case 2\"></p>\n<h5 id=\"case-3\"><a href=\"#case-3\" class=\"headerlink\" title=\"case 3\"></a>case 3</h5><p>父节点B是红色而叔父节点U是黑色(NIL节点是黑色的)，新节点C是其父节点B的右子节点(不在一条直线上)</p>\n<p>操作：将父节点B节点进行左旋，这样就从case 3转换成case 2了，B节点成为新的待调整的节点，然后针对case 2进行操作处理就行了。case 2操作做了一个右旋操作和颜色互换来达到目的。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0be8979dd?w=546&amp;h=247&amp;f=png&amp;s=38620\" alt=\"插入修复case 3\"></p>\n<p>循环之后：将root变黑（防止case 1中最后要调整的节点为root，而root的父节点为空，即父节点的颜色为黑，满足跳出循环条件）</p>\n<h3 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除过程：</p>\n<ul>\n<li>如果是叶子节点或者只有一个子节点就直接删除；<br>删除的图示：<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/7/162a00075de35231?w=350&amp;h=135&amp;f=png&amp;s=5375\" alt=\"img\"></li>\n<li>如果有左右节点都有，会用右节点的最小节点（记为T）顶替要删除节点(记为N)的位置，即将N的value替换为T的value，之后删除T；</li>\n<li>删除后，如果删除的节点的颜色为黑色就需要做删除修复操作，删除修复的主要思想就是从兄弟节点上 <strong>借调黑色的节点</strong> 过来或者把两边各变红一个让两边平衡(case2)，如果兄弟节点没有黑节点可以借调的话，就只能往上追溯，将每一级的黑节点数减去一个，使得整棵树符合红黑树的定义。</li>\n<li>删除修复操作在遇到被调整的节点是红色节点或者到达root节点时，修复操作完毕， <strong>修复之后要将被调整的节点颜色变为黑色（主要防止以下case 2中父节点为红色的）</strong> 。  </li>\n</ul>\n<p>删除修复操作分为四种情况(删除黑节点后)：</p>\n<p><strong>注：待调整的节点的初始节点为删除节点的子节点（优先非空子节点），以下删除修复情况只讨论待调整的节点为左节点的情况，若为右节点，则只需做相应的镜像操作即可。</strong> </p>\n<ol>\n<li>待调整的节点的兄弟节点是红色的节点；</li>\n<li>待调整的节点的兄弟节点是黑色的节点，且兄弟节点的子节点都是黑色的；</li>\n<li>待调整的节点的兄弟节点是黑色的节点，且兄弟节点的左子节点是红色的，右节点是黑色的；</li>\n<li>待调整的节点的兄弟节点是黑色的节点，且右子节点是是红色的；</li>\n</ol>\n<p>循环条件：被调整的节点是黑色节点或者到达root节点</p>\n<h4 id=\"case-1-1\"><a href=\"#case-1-1\" class=\"headerlink\" title=\"case 1\"></a>case 1</h4><p>情况：待调整的B的兄弟节点C是红色节点</p>\n<p>操作：交换此兄弟节点和父节点的颜色，再对待调整的节点的父节点A进行左旋</p>\n<p>解释：由于兄弟节点是红色节点，无法借调黑节点，所以需要将兄弟节点提升到父节点，由于兄弟节点是红色的，所以兄弟节点的子节点是黑色的，这样就可以从它的子节点借调黑节点了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0f3dc03ab?w=536&amp;h=239&amp;f=png&amp;s=38928\" alt=\"删除情况1\"></p>\n<h4 id=\"case-2-1\"><a href=\"#case-2-1\" class=\"headerlink\" title=\"case 2\"></a>case 2</h4><p>情况：待调整的节点B，兄弟节点C，及C的两个儿子节点的颜色都是黑色的</p>\n<p>操作：将兄弟节点颜色变为红色，同时将待调整的节点的父节点变为新的待调整的节点继续向上调整</p>\n<p>解释：当将兄弟节点也变红之后，达到了局部的平衡了（由于原来计算定义的第五条的时候就是多了一个黑色节点的数量），但是对于祖父节点不一定满足条件，所以继续上溯</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/14/162c43b0bf54506e?w=546&amp;h=246&amp;f=png&amp;s=36773\" alt=\"删除情况2\"></p>\n<h4 id=\"case-3-1\"><a href=\"#case-3-1\" class=\"headerlink\" title=\"case 3\"></a>case 3</h4><p>情况：待调整的节点B(B是空节点)的兄弟节点C是黑色，C的左儿子是红色，C的右儿子是黑色</p>\n<p>操作：交换兄弟节点的左儿子和兄弟节点的颜色，再对兄弟节点进行右旋</p>\n<p>解释：case 3的删除操作是一个中间步骤，目的是转换为case 4状态</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/12/162b8e49d39b5753?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"删除情况3\"></p>\n<h4 id=\"case-4\"><a href=\"#case-4\" class=\"headerlink\" title=\"case 4\"></a>case 4</h4><p>情况：待调整的B和它的兄弟节点C是黑色的，C的右儿子是红色的</p>\n<p>解决：交换兄弟节点C和父节点A的颜色（防止父节点A为红色），再对父节点进行左旋，最后将原来兄弟节点的右儿子变黑即可</p>\n<p>解释：修复完成，整棵树还是符合红黑树的定义的，因为黑色节点的个数没有改变。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/12/162b8e69e9ae5b80?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"删除情况4\"></p>\n<p>循环之后：将node(待调整节点)变黑（针对case2或者待调整节点初始化为红色直接跳出循环）</p>\n<h3 id=\"RBTree的C语言实现\"><a href=\"#RBTree的C语言实现\" class=\"headerlink\" title=\"RBTree的C语言实现\"></a>RBTree的C语言实现</h3><p><a href=\"https://github.com/tofar/RBTree/blob/master/RBTree.c\" target=\"_blank\" rel=\"noopener\">https://github.com/tofar/RBTree/blob/master/RBTree.c</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>红黑树通过引入颜色的概念，通过颜色这个约束条件的使用来保持树的高度平衡。作为平衡二叉查找树，旋转是一个必不可少的操作。通过旋转可以降低树的高度，在红黑树里面还可以转换颜色。</p>\n<p>红黑树里面的插入和删除的操作比较难理解，这时要注意记住一点：操作之前红黑树是平衡的，颜色是符合定义的。在操作的时候就需要向兄弟节点、父节点、侄子节点借调和互换颜色，要达到这个目的，就需要不断的进行旋转。所以红黑树的插入删除操作需要不停的旋转，一旦借调了别的节点，删除和插入的节点就会达到局部的平衡（局部符合红黑树的定义），但是被借调的节点就不会平衡了，这时就需要以被借调的节点为起点继续进行调整，直到整棵树都是平衡的。在整个修复的过程中，插入修复具体的分为3种情况，删除修复分为4种情况。</p>\n<p>整个红黑树的查找，插入和删除都是O(logN)的，原因就是整个红黑树的高度是logN，查找从根到叶，走过的路径是树的高度，删除和插入操作是从叶到根的，所以经过的路径都是logN。</p>\n<p>文章来源：</p>\n<p><a href=\"https://tech.meituan.com/redblack-tree.html\" target=\"_blank\" rel=\"noopener\">红黑树深入剖析及Java实现</a> </p>\n<p><a href=\"https://zh.wikipedia.org/zh-hans/%E7%BA%A2%E9%BB%91%E6%A0%91\" target=\"_blank\" rel=\"noopener\">红黑树-wikipedia</a> </p>\n<p>演示参照：</p>\n<p><a href=\"https://www.jianshu.com/p/ad5d65e7ce62\" target=\"_blank\" rel=\"noopener\">红黑树插入删除过程</a> </p>\n<p>或者 <a href=\"https://blog.csdn.net/v_JULY_v/article/details/6284050\" target=\"_blank\" rel=\"noopener\">红黑树从头至尾插入和删除结点的全程演示图</a> </p>\n","categories":["数据结构"],"tags":["数据结构","红黑树"]},{"title":"使用Let's Encrypt配置SSL证书","url":"http://mu-mo.top/2018/04/09/其他/使用Let's Encrypt配置SSL证书/","content":"<h5 id=\"1-安装-Certbot\"><a href=\"#1-安装-Certbot\" class=\"headerlink\" title=\"1. 安装 Certbot\"></a>1. 安装 Certbot</h5><p><em>Let’s Encrypt</em> 证书生成不需要手动进行，官方推荐 <a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a> 这套自动化工具来实现。</p>\n<ul>\n<li><p>Nginx on CentOS/RHEL 7</p>\n<p>Certbot is packaged in EPEL (Extra Packages for Enterprise Linux). To use Certbot, you must first <a href=\"https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F\" target=\"_blank\" rel=\"noopener\">enable the EPEL repository</a>. On RHEL or Oracle Linux, you must also enable the optional channel.</p>\n<blockquote>\n<p>Note:</p>\n<p>If you are using RHEL on EC2, you can enable the optional channel by running: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span> $ yum -y install yum-utils</span><br><span class=\"line\"><span class=\"meta\">&gt;</span> $ yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>After doing this, you can install Certbot by running:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nginx on Ubuntu 16.04 (xenial)</p>\n<p>On Ubuntu systems, the Certbot team maintains a PPA. Once you add it to your list of repositories all you’ll need to do is apt-get the following packages.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get install software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> sudo add-apt-repository ppa:certbot/certbot</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get install python-certbot-nginx</span><br></pre></td></tr></table></figure>\n<p>Certbot’s DNS plugins which can be used to automate obtaining a wildcard certificate from Let’s Encrypt’s ACMEv2 server are not available for your OS yet. This should change soon but if you don’t want to wait, you can use these plugins now by running Certbot in Docker instead of using the instructions on this page. </p>\n</li>\n</ul>\n<h5 id=\"2-生成SSL证书\"><a href=\"#2-生成SSL证书\" class=\"headerlink\" title=\"2. 生成SSL证书\"></a>2. 生成SSL证书</h5><ul>\n<li><p>编辑配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo vim /etc/letsencrypt/configs/hostname</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 写你的域名和邮箱</span><br><span class=\"line\">domains = hostname</span><br><span class=\"line\">rsa-key-size = 2048</span><br><span class=\"line\">email = your-email</span><br><span class=\"line\">text = True</span><br><span class=\"line\"></span><br><span class=\"line\"># 把下面的路径修改为 hostname 的目录位置</span><br><span class=\"line\">authenticator = webroot</span><br><span class=\"line\">webroot-path = /mnt/var/www/&lt;your-name&gt;/&lt;hostname&gt;</span><br></pre></td></tr></table></figure>\n<p>只需将 hostname 修改为你的域名即可，certbot 会自动在 <code>/mnt/var/www/&lt;your-name&gt;/&lt;hostname&gt;</code> 下面创建一个隐藏文件 <code>.well-known/acme-challenge</code> ，通过请求这个文件来验证 <code>hostname</code> 确实属于你。外网服务器访问 <code>http://hostname/.well-known/acme-challenge</code> ，如果访问成功则验证OK。</p>\n</li>\n<li><p>配置Nginx 进行 webroot 验证</p>\n<p>eg: 在<code>/etc/nginx/sites-available</code> 目录下 编辑 temp 文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span> hostname;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"attribute\">location</span> <span class=\"regexp\">~ /.well-known</span> &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span> /mnt/var/www/&lt;your-name&gt;/&lt;hostname&gt;;</span><br><span class=\"line\">       <span class=\"attribute\">default_type</span> <span class=\"string\">\"text/plain\"</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置软连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cd /etc/nginx/sites-enabled     # 必须!!!</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo ln -s ../sites-available/temp temp</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo openresty -s reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成SSL证书</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo certbot -c /etc/letsencrypt/configs/hostname certonly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span># 片刻之后，看到下面内容就是成功了</span><br><span class=\"line\">IMPORTANT NOTES:</span><br><span class=\"line\"> - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/hostname/fullchain.pem.</span><br></pre></td></tr></table></figure>\n<p><em>之后删除 之前的 temp 软连接</em> </p>\n</li>\n</ul>\n<h5 id=\"3-部署-https-反向代理\"><a href=\"#3-部署-https-反向代理\" class=\"headerlink\" title=\"3. 部署 https 反向代理\"></a>3. 部署 https 反向代理</h5><ul>\n<li><p>nginx 配置文件</p>\n<p>在<code>/etc/nginx/sites-available</code> 目录下 编辑 hostname 文件</p>\n<p>  模板如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> monitor_server &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> &lt;server-host&gt;:&lt;port&gt;; </span><br><span class=\"line\">    <span class=\"attribute\">keepalive</span> <span class=\"number\">2000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> hostname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect all http to https</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> hostname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/hostname/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/hostname/privkey.pem;</span><br><span class=\"line\">    <span class=\"comment\"># disable SSLv2</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ciphers' order matters</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> <span class=\"string\">\"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!aNULL\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># the Elliptic curve key used for the ECDHE cipher.</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_ecdh_curve</span> secp384r1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># use command line</span></span><br><span class=\"line\">    <span class=\"comment\"># openssl dhparam -out dhparam.pem 2048</span></span><br><span class=\"line\">    <span class=\"comment\"># to generate Diffie Hellman Ephemeral Parameters</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem;</span><br><span class=\"line\">      <span class=\"comment\"># let the server choose the cipher</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># turn on the OCSP Stapling and verify</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_stapling_verify</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># http compression method is not secure in https</span></span><br><span class=\"line\">    <span class=\"comment\"># opens you up to vulnerabilities like BREACH, CRIME</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> <span class=\"string\">\"text/plain\"</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /mnt/var/www/&lt;your-name&gt;/hostname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /mnt/log/nginx/hostname/access.log;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /mnt/log/nginx/hostname/error.log;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注:</p>\n<p>​      如需支持HTTP2，可将http server第一行修改为 listen 443 ssl http2; 作用是启用 Nginx 的 ngx_http_v2_module 模块支持 HTTP2，Nginx 版本需要高于 1.9.5，且编译时需要设置 –with-http_v2_module。</p>\n<p>ssl_certificate 和 ssl_certificate_key ，分别对应 fullchain.pem 和 privkey.pem，这2个文件是之前就生成好的证书和密钥。</p>\n<p>ssl_dhparam 通过下面命令生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span> $ sudo openssl dhparam -out /etc/letsencrypt/ssl-dhparams.pem 2048</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>之后</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span> $ cd /etc/nginx/sites-enabled     # 必须!!!</span><br><span class=\"line\"><span class=\"meta\">&gt;</span> $ sudo ln -s ../sites-available/hostname hostname </span><br><span class=\"line\"><span class=\"meta\">&gt;</span> $ sudo openresty -s reload</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"4-设置SSL证书自动更新\"><a href=\"#4-设置SSL证书自动更新\" class=\"headerlink\" title=\"4. 设置SSL证书自动更新\"></a>4. 设置SSL证书自动更新</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo vim /etc/systemd/system/letsencrypt.service</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Let&apos;s Encrypt renewal</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=oneshot</span><br><span class=\"line\">ExecStart=/usr/bin/certbot renew --quiet --agree-tos</span><br><span class=\"line\">ExecStartPost=/bin/systemctl reload nginx.service</span><br></pre></td></tr></table></figure>\n<p>然后增加一个 systemd timer 来触发这个服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo vim /etc/systemd/system/letsencrypt.timer</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Monthly renewal of Let&apos;s Encrypt&apos;s certificates</span><br><span class=\"line\"></span><br><span class=\"line\">[Timer]</span><br><span class=\"line\">OnCalendar=daily</span><br><span class=\"line\">Persistent=true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=timers.target</span><br></pre></td></tr></table></figure>\n<p>启用服务，开启 timer：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl enable letsencrypt.timer</span><br><span class=\"line\">$ sudo systemctl start letsencrypt.timer</span><br></pre></td></tr></table></figure>\n<p>上面两条命令执行完毕后，你可以通过 <code>systemctl list-timers</code> 列出所有 systemd 定时服务。当中可以找到 <code>letsencrypt.timer</code> 并看到运行时间是明天的凌晨12点。</p>\n<h5 id=\"5-在线工具测试SSL-安全性\"><a href=\"#5-在线工具测试SSL-安全性\" class=\"headerlink\" title=\"5. 在线工具测试SSL 安全性\"></a>5. 在线工具测试SSL 安全性</h5><p><a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\" rel=\"noopener\">Qualys SSL Labs</a> 提供了全面的 SSL 安全性测试，填写你的网站域名，给自己的 HTTPS 配置打个分。</p>\n","categories":["其他"],"tags":["SSL - https"]},{"title":"graphql 学习与REST比较","url":"http://mu-mo.top/2018/03/30/其他/Graphql学习与REST比较/","content":"<p>学习链接：</p>\n<ul>\n<li><a href=\"https://graphql.org/\" target=\"_blank\" rel=\"noopener\">官方英文文档</a></li>\n<li><a href=\"http://graphql.cn/learn/queries/\" target=\"_blank\" rel=\"noopener\">官方中文文档</a> </li>\n</ul>\n<h2 id=\"一、graphql-初体验\"><a href=\"#一、graphql-初体验\" class=\"headerlink\" title=\"一、graphql 初体验\"></a>一、graphql 初体验</h2><h5 id=\"官方定义：\"><a href=\"#官方定义：\" class=\"headerlink\" title=\"官方定义：\"></a>官方定义：</h5><p><strong>A query language for your API</strong> (API 查询语言)</p>\n<p>GraphQL is a query language for APIs and a runtime for <strong>fulfilling those queries with your existing data</strong>. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to <strong>ask for exactly what they need</strong> and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.</p>\n<p>举个例子：</p>\n<p>graphql 如下：</p>\n<p>如果请求如下（真实开发可能有点差别）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">query&#123; </span><br><span class=\"line\">\tcomment(id: &quot;1&quot;) &#123; </span><br><span class=\"line\">\t      title </span><br><span class=\"line\">\t      user &#123; </span><br><span class=\"line\">\t           nickname</span><br><span class=\"line\">               email</span><br><span class=\"line\">\t      &#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后台一部分的类型定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">type Comment &#123;</span><br><span class=\"line\">  id: ID</span><br><span class=\"line\">  user: User!</span><br><span class=\"line\">  post: Post!</span><br><span class=\"line\">  title: String</span><br><span class=\"line\">  body: String!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么将可能会返回：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;title&quot;: &quot;hello world&quot;,</span><br><span class=\"line\">  &quot;user&quot;: &#123;</span><br><span class=\"line\">    &quot;nickname&quot;: &quot;molscar&quot;,</span><br><span class=\"line\">    &quot;email&quot;: &quot;example@gmail.com&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而如果使用<code>REST</code> 来发请求的话，会是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /comment/1</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、graphql-和-REST的比较\"><a href=\"#二、graphql-和-REST的比较\" class=\"headerlink\" title=\"二、graphql 和 REST的比较\"></a>二、graphql 和 REST的比较</h2><p>RESTful 大概是这样：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/6/19/78ad4112dcd66f01524eca4c02f2ff9f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<p>那么 graphql 大概就是这样：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/6/19/217cfad3d404089c1446f18778eab810?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<p>再给一个例子感受一下：</p>\n<p>需求：有关电影和其出演人员的信息</p>\n<ul>\n<li><p>REST</p>\n<p>那么可能要先GET到有关电影的信息，再根据有关电影中的出演人员的信息来GET一次演员的信息</p>\n<p>当然如果后台愿意额外构建一个类似<code>/moviesAndActors</code> 的接口的话，也是可以的，但是经常改需求的话，后台接口会越来越多，会很臃肿</p>\n</li>\n<li><p>GraphQL</p>\n<p>graphql直接使用如下查询语句即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">query MoviesAndActors &#123;</span><br><span class=\"line\">  movies &#123;</span><br><span class=\"line\">    title</span><br><span class=\"line\">    image</span><br><span class=\"line\">    actors &#123;</span><br><span class=\"line\">      image</span><br><span class=\"line\">      name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"RESTful的一些不足：\"><a href=\"#RESTful的一些不足：\" class=\"headerlink\" title=\"RESTful的一些不足：\"></a>RESTful的一些不足：</h4><ul>\n<li><p>单个RESTful接口返回数据越来越臃肿（无法控制后台返回的数据）</p>\n<p>比如获取用户信息<code>/users/:id</code>，最初可能只有id、昵称，但随着需求的变化，用户所包含的字段可能会越来越多，年龄、性别、头像、经验、等级，等等等等。</p>\n<p>而具体到某个前端页面，可能只需要其中一小部分数据，这样就会增加网络传输量，前端获取了大量不必要的数据。</p>\n</li>\n<li><p>有时候可能需要多个请求才能获取到足够的数据</p>\n<p>比如获取一个帖子，刚开始开发的时候可能只需要将帖子的内容返回，但是后期可能还要返回发帖人的各种信息，如头像、昵称等，或者还需要获取帖子的评论，或者需求又改了。。。。</p>\n<p>那么这时候你要么在后台再加一个独立的接口，或者让前端使用多个请求来获取足够的数据</p>\n</li>\n</ul>\n<h4 id=\"GraphQL的一些优点：\"><a href=\"#GraphQL的一些优点：\" class=\"headerlink\" title=\"GraphQL的一些优点：\"></a>GraphQL的一些优点：</h4><ul>\n<li><p>可以通过请求控制返回的数据</p>\n<p>如果：请求如下，那么只会返回评论的title，以及发评论用户的nickname和email，而不会返回用户的id等其他信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">query&#123; </span><br><span class=\"line\">\tcomment(id: &quot;1&quot;) &#123; </span><br><span class=\"line\">\t      title </span><br><span class=\"line\">\t      user &#123; </span><br><span class=\"line\">\t           nickname</span><br><span class=\"line\">               email</span><br><span class=\"line\">\t      &#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求数量大减</p>\n<p>可以通过一个资源入口访问到关联的其他资源，只要事先在schema中定义好资源之间的关系即可，传输不一样的数据，而REST则提供了多个URL端点来获取相关的资源。</p>\n</li>\n<li><p>参数类型检验</p>\n<p>graphql提供自动的类型检验以及转换机制</p>\n</li>\n<li><p>文档清晰</p>\n<p>graphql可以根据代码直接生成可视化的文档界面，界面如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/3/26/16260164f49bbd23?imageView2/2/w/480/h/480/q/85/interlace/1\" alt=\"img\"></p>\n</li>\n<li><p>扩展性好</p>\n<p>可以轻松应对需求变更</p>\n</li>\n</ul>\n<h4 id=\"路由处理器（Route-Handlers）和-解析器（Resolvers）\"><a href=\"#路由处理器（Route-Handlers）和-解析器（Resolvers）\" class=\"headerlink\" title=\"路由处理器（Route Handlers）和 解析器（Resolvers）\"></a>路由处理器（Route Handlers）和 解析器（Resolvers）</h4><p>Route Handlers：</p>\n<ol>\n<li>服务器收到HTTP请求，提取出HTTP方法名与URL路径</li>\n<li>API框架找到提前注册好的、请求路径与请求方法都匹配的代码</li>\n<li>该段代码被执行，并得到相应结果</li>\n<li>API框架对数据进行序列化，添加上适当的状态码与响应头后，返回给客户端</li>\n</ol>\n<p>Resolvers：</p>\n<ol>\n<li>服务器收到HTTP请求，提取其中的GraphQL查询</li>\n<li>遍历查询语句，调用里面每个字段所对应的Resolver。</li>\n<li>Resolver函数被执行并返回相应结果</li>\n<li>GraphQL框架把结果根据查询语句的要求进行组装（匹配）</li>\n</ol>\n<h2 id=\"三、个人感受\"><a href=\"#三、个人感受\" class=\"headerlink\" title=\"三、个人感受\"></a>三、个人感受</h2><p>GraphQL使用解析器来构建API，让返回的数据不会那么臃肿，而且也非常酷啊，可以自动解析需要返回的数据，以及校验类型，graphql还有很多东西，这里就不涉及了，我也不是很了解，不过graphql和REST还是有很多相通的地方。</p>\n<p>虽然GraphQL确实有很多优点，但是个人感觉不是很好构建一个完整的API，尤其是特别复杂的项目的时候，而且现在graphql没啥轮子，最近用golang玩一玩graphql的时候，想加个装饰器都不好加，graphql没有暴露很多接口，封装很紧，而且因为graphql自己有一套语法，如果想自己解析的话，得自己写一套解析器，找了半天都没找打怎么获取request的header部分的内容等。。。想给graphql加一层装饰器，然后传一个参数给下一层都不好传。。。肯定是自己太菜了</p>\n<p>个人实战示例：<a href=\"https://github.com/tofar/golang-graphql-example\" target=\"_blank\" rel=\"noopener\">https://github.com/tofar/golang-graphql-example</a></p>\n","categories":["其他"],"tags":["golang","graphql","restful"]},{"title":"docker 学习","url":"http://mu-mo.top/2018/03/16/docker/docker learn/","content":"<p>[TOC]</p>\n<p>测试环境：Ubuntu 16.04 LTS    Linux 4.16.0-999-generic </p>\n<p>shell版本: bash</p>\n<h3 id=\"一、docker-排坑\"><a href=\"#一、docker-排坑\" class=\"headerlink\" title=\"一、docker 排坑\"></a>一、docker 排坑</h3><h5 id=\"1-network问题\"><a href=\"#1-network问题\" class=\"headerlink\" title=\"1. network问题\"></a>1. network问题</h5><p>docker-compose 会默认在docker-compose up执行的时候为compose文件里面的所有容器创建bridge network链接，所以如果在单机上操作docker无需自定义网络或者使用links</p>\n<ul>\n<li><p>使用links 来连接容器的话，举例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">links:</span><br><span class=\"line\">\t- mongo:mongo    # 后一个mongo是别名或者理解为hostname</span><br></pre></td></tr></table></figure>\n<p>然后在代码中连接mongo的话将localhost修改为mongo即可</p>\n</li>\n<li><p>使用默认的桥接网络</p>\n<p>例如：docker-compose.yml如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">    learn_docker:</span><br><span class=\"line\">    \t...</span><br><span class=\"line\">        container_name: learn_docker_app</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    mongo:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        container_name: learn_docker_mongo</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>则直接使用mongo代替localhost即可</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network ls    # list network</span><br><span class=\"line\">docker inspect [NETWORK ID]  # 查看network情况</span><br><span class=\"line\">docker network rm [NETWORK ID]  # 删除</span><br><span class=\"line\">docker network create -d bridge my-bridge-network</span><br><span class=\"line\">docker network connect [NETWORK ID | NETWORK NAME] [CONTAINER NAME | CONTAINER ID] # 将容器加入network中</span><br><span class=\"line\">docker network disconnect 。。。。。</span><br></pre></td></tr></table></figure>\n<p>更多请查看 官方文档 <a href=\"https://docs.docker.com/engine/reference/commandline/network_create/#extended-description\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/commandline/network_create/#extended-description</a> </p>\n<h5 id=\"2-alpine\"><a href=\"#2-alpine\" class=\"headerlink\" title=\"2. alpine\"></a>2. alpine</h5><p>python的alpine版本中不包含C Compile，而安装uwsgi的时候需要用到gcc，所以需要手动安装gcc，然而安装网上流行的教程发现，gcc每次都安装出错</p>\n<p>解决方案：使用Python:3.6而不是Python3.6-alpine版本（精简版），Python:3.6中自带了C Compile</p>\n<h5 id=\"3-WORKDIR\"><a href=\"#3-WORKDIR\" class=\"headerlink\" title=\"3. WORKDIR\"></a>3. WORKDIR</h5><p>官方说WORKDIR适用于 CMD、RUN、COPY、ADD、ENTRYPOINT等命令，但是发现其实有时候还是不行的，所以尽量用绝对路径，CMD、ENTRYPOINT可以用相对路径</p>\n<h3 id=\"二、Docker-CE安装\"><a href=\"#二、Docker-CE安装\" class=\"headerlink\" title=\"二、Docker CE安装\"></a>二、Docker CE安装</h3><ul>\n<li><p>卸载旧版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加使用 HTTPS 传输的软件包以及 CA 证书</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    software-properties-common</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加软件源的 <code>GPG</code> 密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 国内源</span><br><span class=\"line\"><span class=\"meta\">$</span> curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 官方源</span><br><span class=\"line\"><span class=\"meta\">#</span> $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>向 <code>source.list</code> 中添加 Docker 软件源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 国内源</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo add-apt-repository \\</span><br><span class=\"line\">    \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\</span><br><span class=\"line\">    $(lsb_release -cs) \\</span><br><span class=\"line\">    stable\"</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span> 官方源</span><br><span class=\"line\"><span class=\"meta\">#</span> $ sudo add-apt-repository \\</span><br><span class=\"line\"><span class=\"meta\">#</span> \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span><br><span class=\"line\"><span class=\"meta\">#</span> $(lsb_release -cs) \\</span><br><span class=\"line\"><span class=\"meta\">#</span> stable\"</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Docker CE</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装docker-compose</p>\n<p>pip安装:  <code>sudo pip install -U docker-compose</code> </p>\n<h3 id=\"三、准备工作\"><a href=\"#三、准备工作\" class=\"headerlink\" title=\"三、准备工作\"></a>三、准备工作</h3></li>\n</ul>\n<h5 id=\"1-建立用户组\"><a href=\"#1-建立用户组\" class=\"headerlink\" title=\"1. 建立用户组\"></a>1. 建立用户组</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo groupadd docker</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-测试\"><a href=\"#2-测试\" class=\"headerlink\" title=\"2. 测试\"></a>2. 测试</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Unable to find image 'hello-world:latest' locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">ca4f61b1923c: Pull complete</span><br><span class=\"line\">Digest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br></pre></td></tr></table></figure>\n<p>正常输出以上信息，安装成功</p>\n<h5 id=\"3-镜像加速\"><a href=\"#3-镜像加速\" class=\"headerlink\" title=\"3. 镜像加速\"></a>3. 镜像加速</h5><p>对于使用 <a href=\"https://www.freedesktop.org/wiki/Software/systemd/\" target=\"_blank\" rel=\"noopener\">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://registry.docker-cn.com\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后重新启动服务。</p>\n<h5 id=\"4-注册-Docker-Hub\"><a href=\"#4-注册-Docker-Hub\" class=\"headerlink\" title=\"4. 注册 Docker Hub\"></a>4. 注册 Docker Hub</h5><ul>\n<li><p>注册</p>\n<p>你可以在 <a href=\"https://cloud.docker.com/\" target=\"_blank\" rel=\"noopener\">https://cloud.docker.com</a> 免费注册一个 Docker 账号。</p>\n</li>\n<li><p>登录、退出</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> docker login</span><br><span class=\"line\"><span class=\"meta\">$</span> docker logout</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拉取、推送</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> docker pull [OPTIONS] HOSTNAME:PORT/USERNAME/IMAGE_NAME[:TAG|@DIGEST]</span><br><span class=\"line\"><span class=\"meta\">$</span> docker push [OPTIONS] HOSTNAME:PORT/USERNAME/IMAGE_NAME[:TAG|@DIGEST]</span><br></pre></td></tr></table></figure>\n<p><em>默认HOSTNAME为Docker Hub, USERNME默认为library, TAG默认为latest</em></p>\n<p>eg:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> docker pull python:3.6</span><br><span class=\"line\"><span class=\"meta\">$</span> docker pull openresty/openresty</span><br><span class=\"line\"><span class=\"meta\">$</span> docker pull docker.hostname.com/username/hello:v1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"四、Dockerfile\"><a href=\"#四、Dockerfile\" class=\"headerlink\" title=\"四、Dockerfile\"></a>四、Dockerfile</h3><p>常用镜像制作：</p>\n<p>build 命令：<code>docker build -t python3.6_uwsgi_flask:v1 .</code></p>\n<p>进入容器：<code>docker exec -it [container id] bash</code> （这样就能进入 进入之后使用bash操作）</p>\n<h5 id=\"python3-6-uwsgi-flask\"><a href=\"#python3-6-uwsgi-flask\" class=\"headerlink\" title=\"python3.6_uwsgi_flask\"></a>python3.6_uwsgi_flask</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.6</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Zhao Nan &lt;yun_tofar@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span> requirements.txt /app/requirements.txt</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\">RUN pip install --no-cache-dir -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>requirements.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pymongo==3.6.1</span><br><span class=\"line\">PyMySQL==0.8.0</span><br><span class=\"line\">Flask==0.12.2</span><br><span class=\"line\">PyJWT==1.3.0</span><br><span class=\"line\">requests==2.9.1</span><br><span class=\"line\">bcrypt==3.1.4</span><br><span class=\"line\">redis==2.10.6</span><br><span class=\"line\">Werkzeug==0.14.1</span><br><span class=\"line\">uWSGI==2.0.15</span><br><span class=\"line\">Flask-Mail</span><br></pre></td></tr></table></figure>\n<p><strong>!!!: 千万别用 python:3.6-alpine版本，虽然这个版本精简，但是没有C compile，导致安装uwsgi不成功，后来在python:3.6-alpine基础上安装gcc，也不一定能成功，但是官方是推荐alpine版本的</strong></p>\n<h3 id=\"五、docker-compose\"><a href=\"#五、docker-compose\" class=\"headerlink\" title=\"五、docker-compose\"></a>五、docker-compose</h3><p>启动命令：<code>docker-compose up</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">    learn_docker:</span></span><br><span class=\"line\"><span class=\"attr\">        build:</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">./logs:/app/logs</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">\"3031:3031\"</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> <span class=\"string\">learn_docker_app</span></span><br><span class=\"line\"><span class=\"attr\">        depends_on:</span> </span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">        command:</span> <span class=\"string\">uwsgi</span> <span class=\"bullet\">--ini</span> <span class=\"string\">uwsgi/uwsgi.ini</span></span><br><span class=\"line\"><span class=\"attr\">    mongo:</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"attr\">mongo:3.6.3</span></span><br><span class=\"line\"><span class=\"attr\">        expose:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">\"27017\"</span></span><br><span class=\"line\"><span class=\"attr\">        environment:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">        container_name:</span> <span class=\"string\">learn_docker_mongo</span></span><br><span class=\"line\"><span class=\"attr\">        volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">./db:/data/db</span></span><br><span class=\"line\"><span class=\"bullet\">            -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br></pre></td></tr></table></figure>\n<p>注：无需使用links 来在容器之间建立通道，docker-compose会自动创建一个bridge network包含docker-compose中创建的容器</p>\n<p><strong>！！！：代码中直接使用mongo代替localhost即可</strong> , expose: 27017使mongo只对docker内暴露</p>\n<blockquote>\n<p>桥接网络自主创建连接方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span> $ docker network create learn_docker-net</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span> $ docker-compose up</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span> $ docker network connect learn_docker-net learn_docker_app</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span> $ docker network connect learn_docker-net learn_docker_mongo</span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"六、docker最佳实践\"><a href=\"#六、docker最佳实践\" class=\"headerlink\" title=\"六、docker最佳实践\"></a>六、docker最佳实践</h3><p>主要来源：<a href=\"https://github.com/kxxoling/blog/blob/master/sa/docker-best-practice.md\" target=\"_blank\" rel=\"noopener\">https://github.com/kxxoling/blog/blob/master/sa/docker-best-practice.md</a></p>\n<h5 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h5><p>处于易读性的考虑，过长或者复杂的命令应该使用 <code>\\</code> 分割成多行，一个Dockerfile中的RUN应该尽量少，减少层数</p>\n<h5 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h5><p>CMD 命令只应该运行镜像所对应的命令。虽然允许 <code>CMD executable param1 param2</code> 的写法， 但是 <code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;…]</code> 更不容易出错。</p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CMD [&quot;apache2&quot;,&quot;-DFOREGROUND&quot;]</span><br><span class=\"line\">CMD [&quot;perl&quot;, &quot;-de0&quot;]</span><br></pre></td></tr></table></figure>\n<p>如果你熟悉 ENTRYPOINT 的话，推荐组合使用。</p>\n<h5 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h5><p>端口映射应该尽可能地使用默认端口。</p>\n<h5 id=\"ADD-COPY\"><a href=\"#ADD-COPY\" class=\"headerlink\" title=\"ADD COPY\"></a>ADD COPY</h5><p>ADD 和 COPY 的功能类似，不过 COPY 命令的功能更加直观一些，因此推荐使用。</p>\n<p>相比之下，ADD 支持添加远程资源，并且会自动 tar 打包或者解包。不过下载远程文件更推荐使用 <code>RUN wget</code> 或者 <code>curl</code>。</p>\n<h5 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h5><p>ENTRYPOINT 应该用于 镜像的主命令，并使用 CMD 作为默认设置，以 s3cmd 为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;s3cmd&quot;]</span><br><span class=\"line\">CMD [&quot;--help&quot;]</span><br></pre></td></tr></table></figure>\n<p>获取帮助：<code>docker run s3cmd</code></p>\n<p>执行命令：<code>docker run s3cmd ls s3://mybucket</code></p>\n<p>这在镜像名与程序重名时非常有用。</p>\n<p>ENTRYPOINT 也可以用于启动脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">COPY ./docker-entrypoint.sh /</span><br><span class=\"line\">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br></pre></td></tr></table></figure>\n<p>这段脚本为用户提供了多种和 Postgres 交互的途径：</p>\n<p>你可以简单地启动 Postgres： <code>docker run postgres</code>。</p>\n<p>或者运行 <code>postgres</code> 并传入参数：<code>docker run postgres postgres --help</code>。</p>\n<p>你甚至可以从镜像中启动一个完全不同的程序，比如 Bash：<code>docker run --rm -it postgres bash</code></p>\n<h5 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h5><p>VOLUME 通常用作数据卷，对于任何可变的文件，包括数据库文件、代码库、配置文件……都应该使用 VOLUME 挂载。</p>\n<h3 id=\"七、docker-常用命令列表\"><a href=\"#七、docker-常用命令列表\" class=\"headerlink\" title=\"七、docker 常用命令列表\"></a>七、docker 常用命令列表</h3><p>批量删除:</p>\n<p>使用 Docker 会遗留一大堆镜像，删除镜像又需要先把已经停止的容器删除，下面我们想办法批量干掉他们</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 删除已经Exited的容器</span><br><span class=\"line\">$ docker ps -a | grep &apos;Exited&apos; | awk &apos;&#123;print $1&#125;&apos; | xargs docker stop | xargs docker rm</span><br><span class=\"line\"># 删除none的镜像</span><br><span class=\"line\">$ docker images | grep &apos;&lt;none&gt;&apos; | awk &apos;&#123;print $3&#125;&apos; | xargs docker rmi</span><br></pre></td></tr></table></figure>\n<p><code>docker pull [name]</code>获取镜像</p>\n<p><code>docker images</code> 显示Docker镜像列表</p>\n<p><code>docker inspect [镜像ID]</code>获取镜像的详细信息</p>\n<p><code>docker search [关键词]</code>查找关键词镜像列表</p>\n<p><code>docker ps -a</code> 查看Docker后台进程</p>\n<p><code>docker rmi [镜像标签/镜像ID]</code>删除镜像</p>\n<p><code>docker cp [file] [容器ID]:/etc/</code>复制文件到容器指定位置</p>\n<p><code>docker rm [容器ID]</code>删除容器</p>\n<p><code>docker commit -m &quot;description...&quot; -a &quot;author&quot; [容器ID] [New id]</code>基于已有容器创建新的镜像</p>\n<p><code>docker run -it ubuntu /bin/bash</code>使用镜像创建一个容器，并在其中运行bash应用（-t 分配一个伪终端，-i 让容器标准输入保持打开）</p>\n<p><code>docker create -it [镜像]</code>新建一个容器</p>\n<p><code>docker start [容器ID]</code>运行处于终止状态的容器</p>\n<p><code>docker run -d ubuntu [命令]</code>后台运行容器</p>\n<p><code>docker logs [容器ID]</code>查看容器输出信息</p>\n<p><code>docker stop [-t|--time[=10]] [容器ID]</code>终止容器，默认等待10s</p>\n<p><code>docker kill [容器ID]</code>直接强制终止容器</p>\n<p><code>docker ps -a -q</code>查看处于终止状态的容器</p>\n<p><code>docker restart [容器ID]</code>重启一个容器</p>\n<p><code>docker exec -ti [容器ID] /bin/bash</code>进入到创建容器中运行交互命令</p>\n<p><code>docker save -o name.tar ubuntu:14.04</code>存出镜像到本地为name.tar</p>\n<p><code>docker load --input name.tar</code>导入镜像存储文件到本地镜像库</p>\n<p><code>docker export [容器ID] &gt; name.tar</code>导出停止或运行中的容器到文件中去</p>\n<p><code>cat name.tar | sudo docker import - test/ubuntu:v1.0</code>导入容器导出的文件成为镜像</p>\n","categories":["docker"],"tags":["docker"]},{"title":"golang 操作mgo","url":"http://mu-mo.top/2018/02/16/数据库/golang操作mgo/","content":"<p><a href=\"http://www.runoob.com/mongodb/mongodb-tutorial.html\" target=\"_blank\" rel=\"noopener\">mgo教程</a> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mgotest project main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"gopkg.in/mgo.v2\"</span></span><br><span class=\"line\">    <span class=\"string\">\"gopkg.in/mgo.v2/bson\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Id        bson.ObjectId <span class=\"string\">`bson:\"_id\"`</span></span><br><span class=\"line\">    Username  <span class=\"keyword\">string</span>        <span class=\"string\">`bson:\"name\"`</span></span><br><span class=\"line\">    Pass      <span class=\"keyword\">string</span>        <span class=\"string\">`bson:\"pass\"`</span></span><br><span class=\"line\">    Regtime   <span class=\"keyword\">int64</span>         <span class=\"string\">`bson:\"regtime\"`</span></span><br><span class=\"line\">    Interests []<span class=\"keyword\">string</span>      <span class=\"string\">`bson:\"interests\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> URL String = <span class=\"string\">\"127.0.0.1:27017\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c *mgo.Collection</span><br><span class=\"line\"><span class=\"keyword\">var</span> session *mgo.Session</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(user User)</span> <span class=\"title\">ToString</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%#v\"</span>, user)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    session, _ = mgo.Dial(URL)</span><br><span class=\"line\">    <span class=\"comment\">//切换到数据库</span></span><br><span class=\"line\">    db := session.DB(<span class=\"string\">\"blog\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//切换到collection</span></span><br><span class=\"line\">    c = db.C(<span class=\"string\">\"mgotest\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新增数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//    defer session.Close()</span></span><br><span class=\"line\">    stu1 := <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">    stu1.Id = bson.NewObjectId()</span><br><span class=\"line\">    stu1.Username = <span class=\"string\">\"stu1_name\"</span></span><br><span class=\"line\">    stu1.Pass = <span class=\"string\">\"stu1_pass\"</span></span><br><span class=\"line\">    stu1.Regtime = time.Now().Unix()</span><br><span class=\"line\">    stu1.Interests = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"象棋\"</span>, <span class=\"string\">\"游泳\"</span>, <span class=\"string\">\"跑步\"</span>&#125;</span><br><span class=\"line\">    err := c.Insert(stu1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"插入成功\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fmt.Println(err.Error())</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">find</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//    defer session.Close()</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> users []User</span><br><span class=\"line\">    <span class=\"comment\">//    c.Find(nil).All(&amp;users)</span></span><br><span class=\"line\">    c.Find(bson.M&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"stu1_name\"</span>&#125;).All(&amp;users)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> users &#123;</span><br><span class=\"line\">        fmt.Println(value.ToString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据ObjectId进行查询</span></span><br><span class=\"line\">    idStr := <span class=\"string\">\"577fb2d1cde67307e819133d\"</span></span><br><span class=\"line\">    objectId := bson.ObjectIdHex(idStr)</span><br><span class=\"line\">    user := <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">    c.Find(bson.M&#123;<span class=\"string\">\"_id\"</span>: objectId&#125;).One(user)</span><br><span class=\"line\">    fmt.Println(user)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据id进行修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">update</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    interests := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"象棋\"</span>, <span class=\"string\">\"游泳\"</span>, <span class=\"string\">\"跑步\"</span>&#125;</span><br><span class=\"line\">    err := c.Update(bson.M&#123;<span class=\"string\">\"_id\"</span>: bson.ObjectIdHex(<span class=\"string\">\"577fb2d1cde67307e819133d\"</span>)&#125;, bson.M&#123;<span class=\"string\">\"$set\"</span>: bson.M&#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>:      <span class=\"string\">\"修改后的name\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pass\"</span>:      <span class=\"string\">\"修改后的pass\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"regtime\"</span>:   time.Now().Unix(),</span><br><span class=\"line\">        <span class=\"string\">\"interests\"</span>: interests,</span><br><span class=\"line\">    &#125;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"修改失败\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"修改成功\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">del</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    err := c.Remove(bson.M&#123;<span class=\"string\">\"_id\"</span>: bson.ObjectIdHex(<span class=\"string\">\"577fb2d1cde67307e819133d\"</span>)&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"删除失败\"</span> + err.Error())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"删除成功\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    add()</span><br><span class=\"line\">    find()</span><br><span class=\"line\">    update()</span><br><span class=\"line\">    del()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["数据库"],"tags":["golang - mongodb"]},{"title":"提高 git clone 速度","url":"http://mu-mo.top/2018/01/31/其他/提高git clone速度/","content":"<h3 id=\"一、问题提出\"><a href=\"#一、问题提出\" class=\"headerlink\" title=\"一、问题提出\"></a>一、问题提出</h3><p>git clone 速度感人，通常只有 10kib/s ~ 30kib/s之间</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><ol>\n<li><p>在git内部设置代理</p>\n<p>前提：装有 shadowsocks </p>\n<p>方式：</p>\n<ul>\n<li><p>命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class=\"line\">git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接编辑</p>\n<p>输入 <code>gedit ~/.gitconfig</code> 之后，在文件中加入以下两行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[http]</span><br><span class=\"line\">        proxy = socks5://127.0.0.1:1080</span><br><span class=\"line\">[https]</span><br><span class=\"line\">        proxy = socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改 hosts 文件直接映射</p>\n<p>输入 <code>sudo gedit /etc/hosts</code> 之后，在hosts文件中加入以下两行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">151.101.72.249\tglobal-ssl.fastly.net</span><br><span class=\"line\">192.30.253.112  github.com</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>亲测有效，瞬间暴涨一二十倍</strong></p>\n","categories":["其他"],"tags":["git"]},{"title":"golang 类型别名与类型声明的区别","url":"http://mu-mo.top/2018/01/30/Golang/go 类型别名与类型声明的区别/","content":"<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> D = <span class=\"keyword\">int</span>   <span class=\"comment\">// 类型别名</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">int</span>    <span class=\"comment\">// 类型声明</span></span><br></pre></td></tr></table></figure>\n<p>注：类型别名有一个等号，类型声明没有等号</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p><strong>类型别名和原类型完全一样，只不过是另一种叫法而已，而类型声明和原类型是不同的两个类型。</strong><br>看如下例子:<br><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> D = <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d D = v    <span class=\"comment\">// 不报错</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i I = v    <span class=\"comment\">// 报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["golang"],"tags":["golang","type"]},{"title":"golang 命令学习笔记","url":"http://mu-mo.top/2018/01/30/Golang/go命令学习/","content":"<p>主要来源：<a href=\"https://astaxie.gitbooks.io/build-web-application-with-golang/zh/01.3.html\" target=\"_blank\" rel=\"noopener\">《Go Web编程》</a></p>\n<h3 id=\"1、go-build\"><a href=\"#1、go-build\" class=\"headerlink\" title=\"1、go build\"></a>1、go build</h3><p>作用：compile packages and dependencies</p>\n<p>注：在包的编译过程中，若有必要，会同时编译与之相关联的包。</p>\n<p>示例：</p>\n<ul>\n<li><p>编译多个Go源码文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go build logging/base.go logging/console_logger.go</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译包</p>\n<p>默认为当前文件夹的包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go build logging        // 从GOPAT开始寻找</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>强行对所有涉及到的代码包（包含标准库中的代码包）进行重新构建，即使它们已经是最新的了。</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>打印编译期间所用到的其它命令，但是并不真正执行它们。</td>\n</tr>\n<tr>\n<td>-p n</td>\n<td>指定编译过程中执行各任务的并行数量（确切地说应该是并发数量）。在默认情况下，该数量等于CPU的逻辑核数。但是在<code>darwin/arm</code>平台（即iPhone和iPad所用的平台）下，该数量默认是<code>1</code>。</td>\n</tr>\n<tr>\n<td>-race</td>\n<td>开启竞态条件的检测。不过此标记目前仅在<code>linux/amd64</code>、<code>freebsd/amd64</code>、<code>darwin/amd64</code>和<code>windows/amd64</code>平台下受到支持。</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印出那些被编译的代码包的名字。</td>\n</tr>\n<tr>\n<td>-work</td>\n<td>打印出编译时生成的临时工作目录的路径，并在编译结束时保留它。在默认情况下，编译结束时会删除该目录。</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>打印编译期间所用到的其它命令。注意它与<code>-n</code>标记的区别。</td>\n</tr>\n</tbody>\n</table>\n<p>参数的介绍</p>\n<ul>\n<li><code>-o</code> 指定输出的文件名，可以带上路径，例如 <code>go build -o a/b/c</code></li>\n<li><code>-i</code> 安装相应的包，编译 +<code>go install</code></li>\n<li><code>-a</code> 更新全部已经是最新的包的，但是对标准包不适用</li>\n<li><code>-n</code> 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的</li>\n<li><code>-p n</code> 指定可以并行可运行的编译数目，默认是CPU数目</li>\n<li><code>-race</code> 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器</li>\n<li><code>-v</code> 打印出来我们正在编译的包名</li>\n<li><code>-work</code> 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除</li>\n<li><code>-x</code> 打印出来执行的命令，其实就是和<code>-n</code>的结果类似，只是这个会执行</li>\n<li>———————————————–分割线———————————————————</li>\n<li><code>-ccflags &#39;arg list&#39;</code> 传递参数给5c, 6c, 8c 调用</li>\n<li><code>-compiler name</code> 指定相应的编译器，gccgo还是gc</li>\n<li><code>-gccgoflags &#39;arg list&#39;</code> 传递参数给gccgo编译连接调用</li>\n<li><code>-gcflags &#39;arg list&#39;</code> 传递参数给5g, 6g, 8g 调用</li>\n<li><code>-installsuffix suffix</code> 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，<code>-race</code>的时候默认已经是<code>-installsuffix race</code>,大家可以通过<code>-n</code>命令来验证</li>\n<li><code>-ldflags &#39;flag list&#39;</code> 传递参数给5l, 6l, 8l 调用</li>\n<li><code>-tags &#39;tag list&#39;</code> 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的 <a href=\"http://golang.org/pkg/go/build/\" target=\"_blank\" rel=\"noopener\">Build Constraints</a></li>\n</ul>\n<h3 id=\"2、go-clean\"><a href=\"#2、go-clean\" class=\"headerlink\" title=\"2、go clean\"></a>2、go clean</h3><p>这个命令是用来移除当前源码包和关联源码包里面编译生成的文件。这些文件包括</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">_obj/            旧的object目录，由Makefiles遗留</span><br><span class=\"line\">_test/           旧的test目录，由Makefiles遗留</span><br><span class=\"line\">_testmain.go     旧的gotest文件，由Makefiles遗留</span><br><span class=\"line\">test.out         旧的test记录，由Makefiles遗留</span><br><span class=\"line\">build.out        旧的test记录，由Makefiles遗留</span><br><span class=\"line\">*.[568ao]        object文件，由Makefiles遗留</span><br><span class=\"line\"></span><br><span class=\"line\">DIR(.exe)        由go build产生</span><br><span class=\"line\">DIR.test(.exe)   由go test -c产生</span><br><span class=\"line\">MAINFILE(.exe)   由go build MAINFILE.go产生</span><br><span class=\"line\">*.so             由 SWIG 产生</span><br></pre></td></tr></table></figure>\n<p>我一般都是利用这个命令清除编译文件，然后github递交源码，在本机测试的时候这些编译文件都是和系统相关的，但是对于源码管理来说没必要。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ go clean -i -n</span><br><span class=\"line\">cd /Users/astaxie/develop/gopath/src/mathapp</span><br><span class=\"line\">rm -f mathapp mathapp.exe mathapp.test mathapp.test.exe app app.exe</span><br><span class=\"line\">rm -f /Users/astaxie/develop/gopath/bin/mathapp</span><br></pre></td></tr></table></figure>\n<p>参数介绍</p>\n<ul>\n<li><code>-i</code> 清除关联的安装的包和可运行文件，也就是通过go install安装的文件</li>\n<li><code>-n</code> 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的</li>\n<li><code>-r</code> 循环的清除在import中引入的包</li>\n<li><code>-x</code> 打印出来执行的详细命令，其实就是<code>-n</code>打印的执行版本</li>\n</ul>\n<h3 id=\"3、gofmt\"><a href=\"#3、gofmt\" class=\"headerlink\" title=\"3、gofmt\"></a>3、gofmt</h3><p>gofmt -w -l src，可以格式化整个项目。</p>\n<p>gofmt的参数介绍</p>\n<ul>\n<li><code>-l</code> 显示那些需要格式化的文件</li>\n<li><code>-w</code> 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。</li>\n<li><code>-r</code> 添加形如“a[b:len(a)] -&gt; a[b:]”的重写规则，方便我们做批量替换</li>\n<li><code>-s</code> 简化文件中的代码</li>\n<li><code>-d</code> 显示格式化前后的diff而不是写入文件，默认是false</li>\n<li><code>-e</code> 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。</li>\n<li><code>-cpuprofile</code> 支持调试模式，写入相应的cpufile到指定的文件</li>\n</ul>\n<h3 id=\"4、go-get\"><a href=\"#4、go-get\" class=\"headerlink\" title=\"4、go get\"></a>4、go get</h3><p>这个命令是用来动态获取远程代码包的，目前支持的有BitBucket、GitHub、Google Code和Launchpad。这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行<code>go install</code>。下载源码包的go工具会自动根据不同的域名调用不同的源码工具，对应关系如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BitBucket (Mercurial Git)</span><br><span class=\"line\">GitHub (Git)</span><br><span class=\"line\">Google Code Project Hosting (Git, Mercurial, Subversion)</span><br><span class=\"line\">Launchpad (Bazaar)</span><br></pre></td></tr></table></figure>\n<p>所以为了<code>go get</code> 能正常工作，你必须确保安装了合适的源码管理工具，并同时把这些命令加入你的PATH中。其实<code>go get</code>支持自定义域名的功能，具体参见<code>go help remote</code>。</p>\n<p>参数介绍：</p>\n<ul>\n<li><code>-d</code> 只下载不安装</li>\n<li><code>-f</code> 只有在你包含了<code>-u</code>参数的时候才有效，不让<code>-u</code>去验证import中的每一个都已经获取了，这对于本地fork的包特别有用</li>\n<li><code>-fix</code> 在获取源码之后先运行fix，然后再去做其他的事情</li>\n<li><code>-t</code> 同时也下载需要为运行测试所需要的包</li>\n<li><code>-u</code> 强制使用网络去更新包和它的依赖包</li>\n<li><code>-v</code> 显示执行的命令</li>\n</ul>\n<h3 id=\"5、go-install\"><a href=\"#5、go-install\" class=\"headerlink\" title=\"5、go install\"></a>5、go install</h3><p>这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到<code>$GOPATH/pkg</code>或者<code>$GOPATH/bin</code>。</p>\n<p>参数支持<code>go build</code>的编译参数。大家只要记住一个参数<code>-v</code>就好了，这个随时随地的可以查看底层的执行信息。</p>\n<h3 id=\"6、go-test\"><a href=\"#6、go-test\" class=\"headerlink\" title=\"6、go test\"></a>6、go test</h3><p>遵循原则：</p>\n<ul>\n<li>文件名必须以<code>_test.go</code>结尾</li>\n<li>文件必须<code>import &quot;testing&quot;</code>这个 <strong>testing</strong> 包</li>\n<li>所有的测试用例函数名必须以<code>Test</code>开头</li>\n<li>测试函数格式：<code>func TestXxx (t *testing.T)</code>,<code>Xxx</code>部分可以为任意的字母数字的组合，但是首字母必须是大写字母[A-Z]，例如<code>Testintdiv</code>是错误的函数名。</li>\n<li>函数中通过调用<code>testing.T</code>的<code>Error</code>, <code>Errorf</code>, <code>FailNow</code>, <code>Fatal</code>, <code>FatalIf</code>方法来表明测试未通过，调用<code>Log</code>方法用来记录测试的信息。</li>\n</ul>\n<p>默认的情况下，不需要任何的参数，它会自动把你源码包下面所有test文件测试完毕，当然你也可以带上参数，详情请参考<code>go help testflag</code></p>\n<h4 id=\"常用参数：\"><a href=\"#常用参数：\" class=\"headerlink\" title=\"常用参数：\"></a>常用参数：</h4><ul>\n<li><p><code>-bench regexp</code> 执行相应的压力测试</p>\n<ul>\n<li><p>压力测试用例必须遵循如下格式，其中XXX可以是任意字母数字的组合，但是首字母不能是小写字母</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">func BenchmarkXXX(b *testing.B) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>go test</code>不会默认执行压力测试的函数，如果要执行压力测试需要带上参数 <code>-bench</code></p>\n</li>\n</ul>\n<p>执行所有测试, 使用 <code>-bench .</code> or <code>-bench=.</code></p>\n</li>\n<li><p><code>-cover</code> 开启测试覆盖率 </p>\n<p>如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Abs</span><span class=\"params\">(a <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * (<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestAbs</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> Abs(<span class=\"number\">5</span>) != <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        t.Fatal(<span class=\"string\">\"abs error, except:5, result:\"</span>, Abs(<span class=\"number\">5</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时go test -cover 会显示 <code>coverage: 50.0% of statements</code></p>\n<p>从覆盖率来看，单元测试没有覆盖全部的代码，我们可以通过如下命令将cover的详细信息保存到cover.out中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go test -cover -coverprofile=cover.out -covermode=count</span><br><span class=\"line\">注：</span><br><span class=\"line\">-cover 允许代码分析</span><br><span class=\"line\">-covermode 代码分析模式（set：是否执行；count：执行次数；atomic：次数，并发执行）</span><br><span class=\"line\">-coverprofile 输出结果文件</span><br></pre></td></tr></table></figure>\n<p>之后通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go tool cover -func=cover.out</span><br></pre></td></tr></table></figure>\n<p>查看每个方法的覆盖率。<br>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">util/compute.go:7:      Sum            100.0%</span><br><span class=\"line\">util/compute.go:15:     Abs            66.7%</span><br><span class=\"line\">total:                  (statements)   85.7%</span><br></pre></td></tr></table></figure>\n<p>这里发现是Abs方法没有覆盖完全，因为我们的用例只用到了正数的那个分支。<br>还可以使用html的方式查看具体的覆盖情况。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go tool cover -html=cover.out</span><br></pre></td></tr></table></figure>\n<p>会默认打开浏览器，将覆盖情况显示到页面中：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/29/1613fd8563ee04dc?w=1892&amp;h=890&amp;f=png&amp;s=114245\" alt=\"img\"></p>\n</li>\n<li><p><code>-run regexp</code> 只运行regexp匹配的函数，例如 <code>-run=Array</code> 那么就执行包含有Array开头的函数</p>\n</li>\n<li><p><code>-v</code> 显示测试的详细命令</p>\n</li>\n</ul>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><ol>\n<li><p>测试单个文件</p>\n<p><code>go test -v hello_test.go hello.go</code> </p>\n<p>注意此处，如果要测试某一个文件，需要把测试文件与原文件都列出来</p>\n</li>\n<li><p>测试一个函数</p>\n<p><code>go test -run TestSum</code></p>\n<p>此处可以使用正则匹配，例如 Sum 会匹配到所有包含Sum的函数</p>\n</li>\n</ol>\n<h3 id=\"7、go-tool\"><a href=\"#7、go-tool\" class=\"headerlink\" title=\"7、go tool\"></a>7、go tool</h3><p><code>go tool</code>下面下载聚集了很多命令，这里我们只介绍两个，fix和vet</p>\n<ul>\n<li><code>go tool fix .</code> 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1,例如API的变化</li>\n<li><code>go tool vet directory|files</code> 用来分析当前目录的代码是否都是正确的代码,例如是不是调用fmt.Printf里面的参数不正确，例如函数里面提前return了然后出现了无用代码之类的。</li>\n</ul>\n<h3 id=\"8、go-generate\"><a href=\"#8、go-generate\" class=\"headerlink\" title=\"8、go generate\"></a>8、go generate</h3><p>这个命令是从Go1.4开始才设计的，用于在编译前自动化生成某类代码。<code>go generate</code>和<code>go build</code>是完全不一样的命令，通过分析源码中特殊的注释，然后执行相应的命令。这些命令都是很明确的，没有任何的依赖在里面。而且大家在用这个之前心里面一定要有一个理念，这个<code>go generate</code>是给你用的，不是给使用你这个包的人用的，是方便你来生成一些代码的。</p>\n<p>这里我们来举一个简单的例子，例如我们经常会使用<code>yacc</code>来生成代码，那么我们常用这样的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go tool yacc -o gopher.go -p parser gopher.y</span><br></pre></td></tr></table></figure>\n<p>-o 指定了输出的文件名， -p指定了package的名称，这是一个单独的命令，如果我们想让<code>go generate</code>来触发这个命令，那么就可以在当然目录的任意一个<code>xxx.go</code>文件里面的任意位置增加一行如下的注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//go:generate go tool yacc -o gopher.go -p parser gopher.y</span><br></pre></td></tr></table></figure>\n<p>这里我们注意了，<code>//go:generate</code>是没有任何空格的，这其实就是一个固定的格式，在扫描源码文件的时候就是根据这个来判断的。</p>\n<p>所以我们可以通过如下的命令来生成，编译，测试。如果<code>gopher.y</code>文件有修改，那么就重新执行<code>go generate</code>重新生成文件就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ go generate</span><br><span class=\"line\">$ go build</span><br><span class=\"line\">$ go test</span><br></pre></td></tr></table></figure>\n<h3 id=\"9、godoc\"><a href=\"#9、godoc\" class=\"headerlink\" title=\"9、godoc\"></a>9、godoc</h3><p>在Go1.2版本之前还支持<code>go doc</code>命令，但是之后全部移到了godoc这个命令下，需要这样安装<code>go get golang.org/x/tools/cmd/godoc</code></p>\n<p>很多人说go不需要任何的第三方文档，例如chm手册之类的（其实我已经做了一个了，<a href=\"https://github.com/astaxie/godoc\" target=\"_blank\" rel=\"noopener\">chm手册</a>），因为它内部就有一个很强大的文档工具。</p>\n<p>如何查看相应package的文档呢？ 例如builtin包，那么执行<code>godoc builtin</code> 如果是http包，那么执行<code>godoc net/http</code> 查看某一个包里面的函数，那么执行<code>godoc fmt Printf</code> 也可以查看相应的代码，执行<code>godoc -src fmt Printf</code></p>\n<p>通过命令在命令行执行 godoc -http=:端口号 比如<code>godoc -http=:8080</code>。然后在浏览器中打开<code>127.0.0.1:8080</code>，你将会看到一个golang.org的本地copy版本，通过它你可以查询pkg文档等其它内容。如果你设置了GOPATH，在pkg分类下，不但会列出标准包的文档，还会列出你本地<code>GOPATH</code>中所有项目的相关文档，这对于经常被墙的用户来说是一个不错的选择。</p>\n<h3 id=\"10、其它命令\"><a href=\"#10、其它命令\" class=\"headerlink\" title=\"10、其它命令\"></a>10、其它命令</h3><p>go还提供了其它很多的工具，例如下面的这些工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go version 查看go当前的版本</span><br><span class=\"line\">go env 查看当前go的环境变量</span><br><span class=\"line\">go list 列出当前全部安装的package</span><br><span class=\"line\">go run 编译并运行Go程序</span><br></pre></td></tr></table></figure>\n<p>以上这些工具还有很多参数没有一一介绍，用户可以使用<code>go help 命令</code>获取更详细的帮助信息。</p>\n","categories":["golang"],"tags":["golang","command"]},{"title":"Ubuntu wifi问题记录","url":"http://mu-mo.top/2018/01/30/Ubuntu/Ubuntu wifi问题记录/","content":"<h3 id=\"问题：Ubuntu下无法检测到WiFi\"><a href=\"#问题：Ubuntu下无法检测到WiFi\" class=\"headerlink\" title=\"问题：Ubuntu下无法检测到WiFi\"></a>问题：Ubuntu下无法检测到WiFi</h3><ul>\n<li>电脑：Lenovo</li>\n<li>Subsystem: Lenovo RTL8723BE PCIe Wireless Network Adapter [17aa:b736]</li>\n<li>Ubuntu 16.04LTS内核版本：4.13.0-26-generic</li>\n</ul>\n<h3 id=\"解决经历\"><a href=\"#解决经历\" class=\"headerlink\" title=\"解决经历\"></a>解决经历</h3><ol>\n<li><p>首先检测是否有阻塞</p>\n<p>命令：<em>rfkill list all</em></p>\n<p>结果：无阻塞</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0: tpacpi_bluetooth_sw: Bluetooth</span><br><span class=\"line\">\tSoft blocked: no</span><br><span class=\"line\">\tHard blocked: no</span><br><span class=\"line\">3: hci0: Bluetooth</span><br><span class=\"line\">\tSoft blocked: no</span><br><span class=\"line\">\tHard blocked: no</span><br><span class=\"line\">4: phy0: Wireless LAN</span><br><span class=\"line\">\tSoft blocked: no</span><br><span class=\"line\">\tHard blocked: no</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果存在Soft blocked 阻塞 可使用 <em>rfkill unblock all</em> 解锁，如果存在 Hard blocked阻塞自行Google。</p>\n</blockquote>\n</li>\n<li><p>查看网卡及内核相关信息</p>\n<p>命令：<em>lspci -vvnn |grep -A 9 Network</em></p>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">04:00.0 Network controller [0280]: Realtek Semiconductor Co., Ltd. RTL8723BE PCIe Wireless Network Adapter [10ec:b723]</span><br><span class=\"line\">\tSubsystem: Lenovo RTL8723BE PCIe Wireless Network Adapter [17aa:b736]</span><br><span class=\"line\">\tControl: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-</span><br><span class=\"line\">\tStatus: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- &lt;MAbort- &gt;SERR- &lt;PERR- INTx-</span><br><span class=\"line\">\tLatency: 0, Cache Line Size: 32 bytes</span><br><span class=\"line\">\tInterrupt: pin A routed to IRQ 49</span><br><span class=\"line\">\tRegion 0: I/O ports at 1000 [size=256]</span><br><span class=\"line\">\tRegion 2: Memory at f0800000 (64-bit, non-prefetchable) [size=16K]</span><br><span class=\"line\">\tCapabilities: &lt;access denied&gt;</span><br><span class=\"line\">\tKernel driver in use: rtl8723be</span><br><span class=\"line\">\tKernel modules: rtl8723be</span><br></pre></td></tr></table></figure>\n<p>重点：最后两行</p>\n</li>\n<li><p>解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-headers-generic build-essential git  //没有有线网就算了</span><br><span class=\"line\">git clone https://github.com/lwfinger/rtlwifi_new.git     </span><br><span class=\"line\">cd rtlwifi_new</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">sudo modprobe -r rtl8723be    //&lt;&lt;YOUR WIRELESS DRIVER CODE&gt;&gt;</span><br><span class=\"line\">sudo modprobe rtl8723be      //&lt;&lt;YOUR WIRELESS DRIVER CODE&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","categories":["Ubuntu"],"tags":["Ubuntu","wifi"]},{"title":"HEXO 建站指南","url":"http://mu-mo.top/2018/01/30/其他/HEXO建站指南/","content":"<p>系统配置：Ubuntu</p>\n<h2 id=\"一、配置ssh\"><a href=\"#一、配置ssh\" class=\"headerlink\" title=\"一、配置ssh\"></a>一、配置ssh</h2><ul>\n<li><strong>本地生成密钥对</strong><br><code>ssh-keygen -t rsa -C &quot;你的邮件地址&quot;</code>，注意命令中的大小写不要搞混。按提示指定保存文件夹，不设置密码。</li>\n<li><strong>添加公钥到Github</strong></li>\n</ul>\n<ol>\n<li>根据上一步的提示，找到公钥文件（默认为id_rsa.pub），用编辑器打开，全选并复制。</li>\n<li>登录Github，右上角 头像 -&gt; <code>Settings</code> —&gt; <code>SSH keys</code> —&gt; <code>Add SSH</code> key。把公钥粘贴到key中，填好title并点击 Add key。</li>\n<li>git bash中输入命令<code>ssh -T git@github.com</code>，选yes，等待片刻可看到成功提示。</li>\n</ol>\n<ul>\n<li><strong>修改本地的ssh remote url，不用https协议，改用git协议</strong></li>\n</ul>\n<ol>\n<li>Github仓库中获取ssh协议相应的url</li>\n<li>本地仓库执行命令<code>git remote set-url origin SSH对应的url</code>，配置完后可用<code>git remote -v</code>查看结果</li>\n</ol>\n<p>这样<code>git push</code>或<code>hexo d</code>时不再需要输入账号密码。</p>\n<h2 id=\"二、环境准备\"><a href=\"#二、环境准备\" class=\"headerlink\" title=\"二、环境准备\"></a>二、环境准备</h2><h4 id=\"1-安装node-js\"><a href=\"#1-安装node-js\" class=\"headerlink\" title=\"1. 安装node.js\"></a>1. 安装node.js</h4><ul>\n<li><p>下载源码，<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">官网下载地址</a> ，选择source code下载即可，但是下载速度感人，这里贡献一下我的 <a href=\"https://pan.baidu.com/s/1kVVLSAb\" target=\"_blank\" rel=\"noopener\">百度网盘nodejs</a> </p>\n</li>\n<li><p>环境配置</p>\n<p>将源码解压之后 mv 到/usr/local/node (经过改名)，输入<code>gedit ~/.bashrc</code> ，在最后两行加上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export NODE_HOME=/usr/local/node  # 你的node安装目录</span><br><span class=\"line\">export PATH=$PATH:$NODE_HOME/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检测</p>\n<p>在bash下输入 <code>source ~/.bashrc</code> ，之后输入 <code>node -v</code> ，如果显示你的node 版本则表示安装成功</p>\n</li>\n</ul>\n<h4 id=\"2-安装-HEXO\"><a href=\"#2-安装-HEXO\" class=\"headerlink\" title=\"2. 安装 HEXO\"></a>2. 安装 HEXO</h4><p>命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、开始搭建\"><a href=\"#三、开始搭建\" class=\"headerlink\" title=\"三、开始搭建\"></a>三、开始搭建</h2><h4 id=\"1-建立-your-name-github-io-仓库-和-blog仓库\"><a href=\"#1-建立-your-name-github-io-仓库-和-blog仓库\" class=\"headerlink\" title=\"1. 建立 your_name.github.io 仓库 和 blog仓库\"></a>1. 建立 your_name.github.io 仓库 和 blog仓库</h4><p>   将your_name改成你的github账号名字就行了</p>\n<p>   注：blog 是为了方便放博客</p>\n<h4 id=\"2-博客初始化\"><a href=\"#2-博客初始化\" class=\"headerlink\" title=\"2. 博客初始化\"></a>2. 博客初始化</h4><ul>\n<li><p>将 blog clone下来</p>\n<p>命令： <code>git clone git@github.com:your_name/blog.git</code> </p>\n</li>\n<li><p>cd 进去之后，初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>在浏览器中打开<code>http://localhost:4000/</code>，你将会看到：</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e10acad8d86b468d0c61ffbdb18c58513f7cad82/9e1c1/imgs/opinion/hexo-first-time.png\" alt=\"hexo初体验\"></p>\n</li>\n</ul>\n<h4 id=\"3-HEXO-详解\"><a href=\"#3-HEXO-详解\" class=\"headerlink\" title=\"3. HEXO 详解\"></a>3. HEXO 详解</h4><h6 id=\"1-常用命令\"><a href=\"#1-常用命令\" class=\"headerlink\" title=\"1. 常用命令\"></a>1. 常用命令</h6><ul>\n<li><p>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</p>\n</li>\n<li><p>hexo server (hexo s) 启动本地web服务，用于博客的预览</p>\n</li>\n<li><p>hexo deploy (hexo d) 部署播客到远端（比如github等平台）</p>\n</li>\n<li><p>hexo new (hexo n) 新建文章和页面</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new \"postName\" #新建文章</span><br><span class=\"line\">hexo new page \"pageName\" #新建页面</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>常用组合：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g #生成部署</span><br><span class=\"line\">hexo s -g #生成预览</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-发文章\"><a href=\"#2-发文章\" class=\"headerlink\" title=\"2. 发文章\"></a>2. 发文章</h6><ul>\n<li><p>直接创建</p>\n<p>在 <strong>source/_posts/</strong>下新建一个<code>.md</code>文件，头部加上类似以下内容（格式）</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo 建站指南</span><br><span class=\"line\">data: 2018-1-31 12:48:25</span><br><span class=\"line\">tags: </span><br><span class=\"line\"><span class=\"code\">\t- hexo</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"code\">\t- 其他</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令方式</p>\n<p>命令： <code>hexo new hello</code> </p>\n<p>之后编辑 hello.md 即可</p>\n</li>\n</ul>\n<h6 id=\"3-新建标签页面\"><a href=\"#3-新建标签页面\" class=\"headerlink\" title=\"3.  新建标签页面\"></a>3.  新建标签页面</h6><ul>\n<li><p>两个确认</p>\n<ul>\n<li>确认站点配置文件有</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tag_dir: tags</span><br></pre></td></tr></table></figure>\n<ul>\n<li>确认主题配置文件有</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tags: tags</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>新建tags页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<p>此时会在<code>source/</code>下生成<code>tags/index.md</code>文件</p>\n</li>\n</ul>\n<ul>\n<li>修改 source/tags/index.md</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2018-1-31 16:49:50</span><br><span class=\"line\">type: &quot;tags&quot;        &lt;!-- 必须 --&gt;</span><br><span class=\"line\">comments: false     &lt;!-- 必须 --&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里 date 会自动生成</p>\n</blockquote>\n<ul>\n<li><p>在文章中添加tags</p>\n<p>在文章<code>xx.md</code>中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tags: </span><br><span class=\"line\">\t- Tag1</span><br><span class=\"line\">\t- Tag2</span><br></pre></td></tr></table></figure>\n<p>多个Tag可按上面的格式添加。</p>\n<p>其文件头部类似：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: </span><br><span class=\"line\">date: 2018-1-31 10:44:25</span><br><span class=\"line\">tags: </span><br><span class=\"line\">\t- Tag1</span><br><span class=\"line\">\t- Tag2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"4-新建目录页面\"><a href=\"#4-新建目录页面\" class=\"headerlink\" title=\"4. 新建目录页面\"></a>4. 新建目录页面</h6><ul>\n<li><p>两个确认</p>\n<ul>\n<li>确认站点配置文件打开了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">category_dir: categories</span><br></pre></td></tr></table></figure>\n<ul>\n<li>确认主题配置文件打开了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">categories: /categories</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>新建categories文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<p>此时会在<code>source</code>目录下生成<code>categories/index.md</code>文件</p>\n</li>\n</ul>\n<ul>\n<li><p>修改categories/index.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2018-1-31 16:49:50</span><br><span class=\"line\">type: &quot;categories&quot;     &lt;!-- 必须 --&gt;</span><br><span class=\"line\">comments: false        &lt;!-- 必须 --&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里 date 会自动生成</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>在文章中添加categories</p>\n<p>在文章xx.md中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">categories: </span><br><span class=\"line\">\t- cate</span><br></pre></td></tr></table></figure>\n<p>其文件头部类似：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: TagEditText</span><br><span class=\"line\">date: 2018-1-31 10:44:25</span><br><span class=\"line\">categories: </span><br><span class=\"line\">\t- cate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"5-添加about页面\"><a href=\"#5-添加about页面\" class=\"headerlink\" title=\"5. 添加about页面\"></a>5. 添加about页面</h6><p>命令： <code>hexo new page &quot;about&quot;</code> </p>\n<p>之后在\\source\\about\\index.md目录下会生成一个index.md文件，打开输入个人信息即可</p>\n<h6 id=\"6-添加搜索页面\"><a href=\"#6-添加搜索页面\" class=\"headerlink\" title=\"6. 添加搜索页面\"></a>6. 添加搜索页面</h6><p>注明：此处以next主题为例</p>\n<ul>\n<li><p>命令：<code>npm install hexo-generator-search --save</code></p>\n</li>\n<li><p>在博客根目录下的 _config.yml 中添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml</span><br><span class=\"line\">  field: all</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>path</strong> - file path. Default is <code>search.xml</code> .</li>\n<li>field - the search scope you want to search, you can chose:<ul>\n<li><strong>post</strong> (Default) - will only covers all the posts of your blog.</li>\n<li><strong>page</strong> - will only covers all the pages of your blog.</li>\n<li><strong>all</strong> - will covers all the posts and pages of your blog.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>更多配置说明可到插件页面查看：<a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a> </p>\n<ul>\n<li><p>在 themes/next/layout/_partials/search 目录下修改 localsearch.swig 文件</p>\n<p>原始文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var search_path = &quot;&lt;%= config.search.path %&gt;&quot;;</span><br><span class=\"line\">    if (search_path.length == 0) &#123;</span><br><span class=\"line\">    \tsearch_path = &quot;search.xml&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var path = &quot;&lt;%= config.root %&gt;&quot; + search_path;</span><br><span class=\"line\">    searchFunc(path, &apos;local-search-input&apos;, &apos;local-search-result&apos;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>修改后的文件内容为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;popup&quot;&gt;</span><br><span class=\"line\"> &lt;span class=&quot;search-icon fa fa-search&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\"> &lt;input type=&quot;text&quot; id=&quot;local-search-input&quot; placeholder=&quot;search my blog...&quot;&gt;</span><br><span class=\"line\"> &lt;div id=&quot;local-search-result&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> &lt;span class=&quot;popup-btn-close&quot;&gt;close&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>注：部分主题中此处已经配置好了，无需更改</p>\n</li>\n<li><p>效果演示</p>\n<p>主题： next</p>\n<p><img src=\"https://cdn.rawgit.com/qanno/qanno.github.io/master/images/hexo-localsearch.gif\" alt=\"hexo-theme-next 本地搜索效果演示\"></p>\n<p>​                                     <em>hexo-theme-next 本地搜索效果演示</em> </p>\n</li>\n</ul>\n<h4 id=\"4-配置\"><a href=\"#4-配置\" class=\"headerlink\" title=\"4. 配置\"></a>4. 配置</h4><h6 id=\"1-简单配置\"><a href=\"#1-简单配置\" class=\"headerlink\" title=\"1. 简单配置\"></a>1. 简单配置</h6><p>网站的设置大部分都在 <strong>_config.yml</strong> 文件中，详细配置可以查看<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>  </p>\n<p>下面只列出简单常用配置    </p>\n<ul>\n<li><strong>title</strong> -&gt; 网站标题</li>\n<li><strong>subtitle</strong> -&gt; 网站副标题</li>\n<li><strong>description</strong> -&gt; 网站描述</li>\n<li><strong>author</strong> -&gt; 您的名字</li>\n<li><strong>language</strong> -&gt; 网站使用的语言</li>\n</ul>\n<p>注意：<strong>进行配置时，需要在冒号:后加一个英文空格</strong> </p>\n<h6 id=\"2-deploy\"><a href=\"#2-deploy\" class=\"headerlink\" title=\"2. deploy\"></a>2. deploy</h6><p>输入命令： <code>npm install hexo-deployer-git --save</code> </p>\n<p>在博客根目录下的<code>_config.yml</code>文件，末尾添加如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:your_name/your_name.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>然后执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>即可部署到github上</p>\n<h6 id=\"3-添加评论功能\"><a href=\"#3-添加评论功能\" class=\"headerlink\" title=\"3. 添加评论功能\"></a>3. 添加评论功能</h6><ul>\n<li><p>注册 <a href=\"https://link.jianshu.com/?t=https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> 账号</p>\n</li>\n<li><p>配置 Disqus</p>\n<p>登录后，点击首页的 GET STARTED 按钮，之后选择 I want to install Disqus on my site 选项，完成相关配置</p>\n<blockquote>\n<p>Websit Name 就是 short name 自己填写，但是要求全网唯一，设定后不可改变，比如我的是 wangkunlin，这个在配置 Hexo 的时候需要用到<br>Category 选择种类，可以随便选<br>Language 语言选 Chinese 或者 English<br>然后点 Create Site 等待界面跳转<br>接下来在页面的左侧点击 Configure Disqus</p>\n<p>​</p>\n<p>在 Website URL 那里填写自己的博客地址，Description 可以不写，然后点 Complete Setup，Disqus 基本的设置已经完成</p>\n</blockquote>\n</li>\n<li><p>配置 HEXO</p>\n<p>在博客根目录下的_config.yml 中添加如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Disqus</span><br><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  shortname: your_count</span><br><span class=\"line\">  count: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改相应文件</p>\n<p>进入 theme 你的主题目录，找到 comment.ejs，我的是在blog/themes/next/layout/_partials/comments.swig，不同主题请自行查找，替换为下面的内容</p>\n<p>注：部分主题无需修改，已修改好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;% if (page.comments)&#123; %&gt;</span><br><span class=\"line\">&lt;section id=&quot;comment&quot;&gt;</span><br><span class=\"line\">  &lt;% if(config.disqus_shortname) &#123; %&gt;</span><br><span class=\"line\">  &lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class=\"line\">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>######　5. 使用图床</p>\n<p>博客中的图片文件可以直接放在source文件夹下，但是访问速度较慢，把图片放在国内的图床上是个更好的选择。</p>\n<p>这里选用: <a href=\"https://portal.qiniu.com/signup?code=3lgo2c4fgwv9u\" target=\"_blank\" rel=\"noopener\">七牛云存储</a> </p>\n<p>免费用户实名审核之后，可以获取10GB永久免费存储空间、每月10GB下载流量、每月10万次Put请求、每月100万次Get请求，做图床绰绰有余。</p>\n<p>注册账号，新建空间，我的新空间名是<code>blog</code>，专门用来放置博客上引用的资源。</p>\n<p>进入空间后点击「内容管理」，再点击「上传」：<br><a href=\"http://7xo8t2.com1.z0.glb.clouddn.com/img/Hexo%203.1.1%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/%E4%B8%83%E7%89%9B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%A1%86.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://7xo8t2.com1.z0.glb.clouddn.com/img/Hexo%203.1.1%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/%E4%B8%83%E7%89%9B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%A1%86.png\" alt=\"img\"></a></p>\n<p>七牛空间没有文件夹的概念，但是允许为文件添加带斜杠<code>/</code>的前缀，用来给资源分类。这里我设置前缀为<code>img/Hexo 3.1.1 静态博客搭建指南/</code>。上传了一张图片：<br><a href=\"http://7xo8t2.com1.z0.glb.clouddn.com/img/Hexo%203.1.1%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/%E4%B8%83%E7%89%9B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%90%8E.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://7xo8t2.com1.z0.glb.clouddn.com/img/Hexo%203.1.1%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/%E4%B8%83%E7%89%9B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%90%8E.png\" alt=\"img\"></a></p>\n<p>在右侧可以找到外链，复制地址：<br><a href=\"http://7xo8t2.com1.z0.glb.clouddn.com/img/Hexo%203.1.1%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/%E4%B8%83%E7%89%9B%E5%9B%BE%E7%89%87%E5%A4%96%E9%93%BE.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://7xo8t2.com1.z0.glb.clouddn.com/img/Hexo%203.1.1%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/%E4%B8%83%E7%89%9B%E5%9B%BE%E7%89%87%E5%A4%96%E9%93%BE.png\" alt=\"img\"></a></p>\n<p>Markdown 插入图片的语法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](图片网址)</span><br></pre></td></tr></table></figure>\n<p>上传图片 -&gt; 获取外链 -&gt; 写入Markdown，就这么简单！</p>\n<p>由于七牛防盗链的白名单无法添加<code>localhost</code>，暂时不设置防盗链，否则<code>hexo s</code>调试的时候，看不到图片。</p>\n<p>以上操作每插入一张图片就要做一次，相当繁琐，于是写了个脚本简化，详见这篇文章<a href=\"http://lovenight.github.io/2015/11/17/%E6%8B%96%E6%9B%B3%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%83%E7%89%9B%E7%9A%84%E8%84%9A%E6%9C%AC/\" target=\"_blank\" rel=\"noopener\">《拖曳文件上传到七牛的Python脚本》</a> </p>\n<h6 id=\"6-更换主题\"><a href=\"#6-更换主题\" class=\"headerlink\" title=\"6. 更换主题\"></a>6. 更换主题</h6><p>这里我选用了<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a> 主题，更多主题请前往 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">HEXO</a> 官网</p>\n<ul>\n<li><p>安装：在博客根目录下执行<code>git clone https://github.com/iissnan/hexo-theme-next.git themes/next</code>  ，或者自行前往 github 上下载，然后mv至博客相关位置</p>\n</li>\n<li><p>启用：修改博客根目录下的<code>_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>next</code></p>\n</li>\n<li><p>修改 主题的_config.yml</p>\n<ul>\n<li><p>修改 scheme</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\"># scheme: Muse</span><br><span class=\"line\">scheme: Mist</span><br><span class=\"line\"># scheme: Pisces</span><br><span class=\"line\"># scheme: Gemini</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"7-绑定独立域名\"><a href=\"#7-绑定独立域名\" class=\"headerlink\" title=\"7. 绑定独立域名\"></a>7. 绑定独立域名</h6><ul>\n<li><a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"noopener\">购买域名</a></li>\n<li>设置域名解析，添加一个 CNAME记录，指向你的github.io页面</li>\n<li>在source目录下，添加CNAME文件（没有后缀）,在文件里面写上你的域名（只能写一个）</li>\n</ul>\n<h6 id=\"8-设置阅读全文\"><a href=\"#8-设置阅读全文\" class=\"headerlink\" title=\"8. 设置阅读全文\"></a>8. 设置阅读全文</h6><p>效果请看 <a href=\"http://tofar.github.io\" target=\"_blank\" rel=\"noopener\">tofar</a> </p>\n<ul>\n<li><p>方法一：在文章中使用<code>&lt; !--more--&gt;</code> 手动进行截断</p>\n<p>这种方法可以根据文章的内容，自己在合适的位置添加 <code>&lt; !--more--&gt;</code> 标签，使用灵活，也是Hexo推荐的方法。</p>\n</li>\n<li><p>方法二：在文章中的<code>front-matter</code>中添加description</p>\n<p>提供文章摘录这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</p>\n</li>\n<li><p>自动形成摘要，在<strong>主题配置文件</strong>中添加</p>\n<ol>\n<li>默认截取的长度为 150 字符，可以根据需要自行设定</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  length: 150</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"8-字体配置\"><a href=\"#8-字体配置\" class=\"headerlink\" title=\"8. 字体配置\"></a>8. 字体配置</h6><ul>\n<li><p>修改字体大小</p>\n<p>文件位置：～blog/themes/next/source/css/_variables/base.styl</p>\n<p><code>font-size-base           = 16px</code></p>\n</li>\n<li><p>配置文件位置：blog/themes/next/source/css/_variables/base.styl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Font families.</span><br><span class=\"line\">$font-family-chinese      = -apple-system, BlinkMacSystemFont, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Heiti SC&quot;, &quot;STHeiti&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Droid Sans Fallback&quot;, &quot;Microsoft YaHei&quot;, source-han-sans-simplified-c</span><br><span class=\"line\">$font-family-base         = $font-family-chinese, sans-serif</span><br><span class=\"line\">$font-family-base         = get_font_family(&apos;global&apos;), $font-family-chinese, sans-serif if get_font_family(&apos;global&apos;)</span><br><span class=\"line\">$font-family-logo         = $font-family-base</span><br><span class=\"line\">$font-family-logo         = get_font_family(&apos;logo&apos;), $font-family-base if get_font_family(&apos;logo&apos;)</span><br><span class=\"line\">$font-family-headings     = $font-family-base</span><br><span class=\"line\">$font-family-headings     = get_font_family(&apos;headings&apos;), $font-family-base if get_font_family(&apos;headings&apos;)</span><br><span class=\"line\">$font-family-posts        = $font-family-base</span><br><span class=\"line\">$font-family-posts        = get_font_family(&apos;posts&apos;), $font-family-base if get_font_family(&apos;posts&apos;)</span><br><span class=\"line\">$font-family-monospace    = $font-family-chinese, monospace</span><br><span class=\"line\">$font-family-monospace    = Menlo, Monaco, Consolas, get_font_family(&apos;codes&apos;), $font-family-chinese, monospace if get_font_family(&apos;codes&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主题配置文件：blog/themes/next/_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">font:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span><br><span class=\"line\">  # 亲测这个可用，如果不可用，自己搜索 [Google 字体 国内镜像]，找个能用的就行</span><br><span class=\"line\">  host: https://fonts.cat.net</span><br><span class=\"line\">  # Global font settings used on &lt;body&gt; element.</span><br><span class=\"line\">  global:</span><br><span class=\"line\">    # external: true will load this font family from host.</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">    family: Lato</span><br><span class=\"line\">  # Font settings for Headlines (h1, h2, h3, h4, h5, h6)</span><br><span class=\"line\">  # Fallback to `global` font settings.</span><br><span class=\"line\">  headings:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">    family: Roboto Slab</span><br><span class=\"line\">  # Font settings for posts</span><br><span class=\"line\">  # Fallback to `global` font settings.</span><br><span class=\"line\">  posts:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">    family:</span><br><span class=\"line\">  # Font settings for Logo</span><br><span class=\"line\">  # Fallback to `global` font settings.</span><br><span class=\"line\">  # The `size` option use `px` as unit</span><br><span class=\"line\">  logo:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">    family:</span><br><span class=\"line\">    size:</span><br><span class=\"line\">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class=\"line\">  codes:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">    family: Roboto Mono</span><br><span class=\"line\">    size:</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5-更多配置\"><a href=\"#5-更多配置\" class=\"headerlink\" title=\"5. 更多配置\"></a>5. 更多配置</h4><h6 id=\"1-更改上一篇，下一篇的顺序\"><a href=\"#1-更改上一篇，下一篇的顺序\" class=\"headerlink\" title=\"1. 更改上一篇，下一篇的顺序\"></a>1. 更改上一篇，下一篇的顺序</h6><p>进入一篇文章，在文章底部，有上下篇的链接（&lt; &gt;），但是点 &gt; 发现进入的是页面中的的上面那篇文章，与操作习惯不符，别扭。</p>\n<p>我猜这是从时间角度设计的，&gt; 英语叫 next ，而 next 是更新的。不过别扭就改成习惯的好了，从空间位置角度设计。<a href=\"https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#fn:1\" target=\"_blank\" rel=\"noopener\">1</a></p>\n<p>方法就是修改文件：</p>\n<p><strong>注意下面文件中的加减</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">文件位置：~/blog/themes/next/layout/_macro/post.swig</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if not is_index and (post.prev or post.next) %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;post-nav&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;post-nav-next post-nav-item&quot;&gt;</span><br><span class=\"line\">-      &#123;% if post.next %&#125;</span><br><span class=\"line\">+      &#123;% if post.prev %&#125;</span><br><span class=\"line\">-        &lt;a href=&quot;&#123;&#123; url_for(post.next.path) &#125;&#125;&quot; rel=&quot;next&quot; title=&quot;&#123;&#123; post.next.title &#125;&#125;&quot;&gt;</span><br><span class=\"line\">+        &lt;a href=&quot;&#123;&#123; url_for(post.prev.path) &#125;&#125;&quot; rel=&quot;prev&quot; title=&quot;&#123;&#123; post.prev.title &#125;&#125;&quot;&gt;</span><br><span class=\"line\">-          &lt;i class=&quot;fa fa-chevron-left&quot;&gt;&lt;/i&gt; &#123;&#123; post.next.title &#125;&#125;</span><br><span class=\"line\">+          &lt;i class=&quot;fa fa-chevron-left&quot;&gt;&lt;/i&gt; &#123;&#123; post.prev.title &#125;&#125;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span class=&quot;post-nav-divider&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;post-nav-prev post-nav-item&quot;&gt;</span><br><span class=\"line\">-      &#123;% if post.prev %&#125;</span><br><span class=\"line\">+      &#123;% if post.next %&#125;</span><br><span class=\"line\">-        &lt;a href=&quot;&#123;&#123; url_for(post.prev.path) &#125;&#125;&quot; rel=&quot;prev&quot; title=&quot;&#123;&#123; post.prev.title &#125;&#125;&quot;&gt;</span><br><span class=\"line\">+        &lt;a href=&quot;&#123;&#123; url_for(post.next.path) &#125;&#125;&quot; rel=&quot;next&quot; title=&quot;&#123;&#123; post.next.title &#125;&#125;&quot;&gt;</span><br><span class=\"line\">-          &#123;&#123; post.prev.title &#125;&#125; &lt;i class=&quot;fa fa-chevron-right&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">+          &#123;&#123; post.next.title &#125;&#125; &lt;i class=&quot;fa fa-chevron-right&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-移动端显示-back-to-top-按钮和侧栏\"><a href=\"#2-移动端显示-back-to-top-按钮和侧栏\" class=\"headerlink\" title=\"2. 移动端显示 back-to-top 按钮和侧栏\"></a>2. 移动端显示 back-to-top 按钮和侧栏</h6><p>前提: 主题的设计模版是 Muse 或 Mist</p>\n<p>文件位置：主题_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Enable sidebar on narrow view (only for Muse | Mist).</span><br><span class=\"line\">  onmobile: true</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-侧边栏社交链接\"><a href=\"#3-侧边栏社交链接\" class=\"headerlink\" title=\"3.  侧边栏社交链接\"></a>3.  侧边栏社交链接</h6>","categories":["其他"],"tags":["hexo"]},{"title":"前后端分离有感（转）","url":"http://mu-mo.top/2018/01/27/随笔/前后端分离实践有感（转）/","content":"<p>前后端分离并不是什么新鲜事，到处都是前后端分离的实践。然而一些历史项目在从一体化 Web 设计转向前后端分离的架构时，仍然不可避免的会遇到各种各样的问题。由于层出不穷的问题，甚至会有团队质疑，一体化好好的，为什么要前后端分离？</p>\n<p>说到底，并不是前后分离不好，只是可能不适合，或者说……设计思维还没有转变过来……</p>\n<blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-4fcc5e811049d0d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2018-01-09 22-24-01屏幕截图.png\"></p>\n</blockquote>\n<blockquote>\n<p>一体式 Web 架构示意</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-ef418a4f06f46a3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2018-01-09 22-24-16屏幕截图.png\"></p>\n</blockquote>\n<blockquote>\n<p>前后分离式 Web 架构示意</p>\n</blockquote>\n<h2 id=\"为什么要前后端分离\"><a href=\"#为什么要前后端分离\" class=\"headerlink\" title=\"为什么要前后端分离\"></a>为什么要前后端分离</h2><p>比为什么要前后端分离更现实的问题是什么时候需要前后端分离，即前后端分离的应用场景。</p>\n<p>说起这个问题，我想到了 2011 年左右，公司在以 .NET 开发团队为主的基础上扩展了 Java 团队，两个团队虽然是在做不同的产品，但是仍然存在大量重复性的开发，比如用 ASP.NET WebPage 写了组织机构相关的页面，用 JSP 又要再写一遍。在这种情况下，团队就开始思考这样一个方案：如果前端实现与后端技术无关，那页面呈现的部分就可以共用，不同的后端技术只需要实现后端业务逻辑就好。</p>\n<p>方案根本要解决的问题是把数据和页面剥离开来。应对这种需求的技术是现成的，前端采用静态网页相关的技术，HTML + CSS + JavaScript，通过 AJAX 技术调用后端提供的业务接口。前后端协商好接口方式通过 HTTP 提供，统一使用 POST 谓词。接口数据结构使用 XML 实现，前端 jQuery 解析 XML 很方便，后端对 XML 的处理工具就更多了……后来由于后端 JSON库（比如 Newtonsoft JSON.NET、jackson、Gson 等）崛起，前端处理 JSON 也更容易（<code>JSON.parse()</code> 和 <code>JSON.stringify()</code>），就将数据结构换成了 JSON 实现。</p>\n<p>这种架构从本质上来说就是 SOA（面向服务的架构）。当后端不提供页面，只是纯粹的通过 Web API 来提供数据和业务交互能力之后，Web 前端就成了纯粹的客户端角色，与 WinForm、移动终端应用属于同样的角色，可以把它们合在一起，统称为<strong>前端</strong>。以前的一体化架构需要定制页面来实现 Web 应用，同时又定义一套 WebService/WSDL 来对 WinForm 和移动终端提供服务。转换为新的架构之后，可以统一使用 Web API 形式为所有类型的前端提供服务。至于某些类型的前端对这个 Web API 进行的 RPC 封装，那又是另外一回事了。</p>\n<p>通过这样的架构改造，前后端实际就已经分离开了。抛开其它类型的前端不提，这里只讨论 Web 前端和后端。由于分离，Web 前端在开发的时候压根不需要了解后端是用的什么技术，只需要后端提供了什么样的接口可以用来做什么事情就好，什么 C#/ASP.NET、Java/JEE、数据库……这些技术可以统统不去了解。而后端的 .NET 团队和 Java 团队也脱离了逻辑无关的美学思维，不需要面对美工精细的界面设计约束，也不需要在思考逻辑实现的同时还要去考虑页面上怎么布局的问题，只需要处理自己擅长的逻辑和数据就好。</p>\n<p>前后端分离之后，两端的开发人员都轻松不少，由于技术和业务都更专注，开发效率也提高了。分离带来的好处渐渐体现出来：</p>\n<h3 id=\"1-前后职责分离\"><a href=\"#1-前后职责分离\" class=\"headerlink\" title=\"1. 前后职责分离\"></a>1. 前后职责分离</h3><p>前端倾向于呈现，着重处理用户体验相关的问题；后端则倾处于业务逻辑、数据处理和持久化等。在设计清晰的情况下，后端只需要以数据为中心对业务处理算法负责，并按约定为前端提供 API 接口；而前端使用这些接口对用户体验负责。</p>\n<h3 id=\"2-前后技术分离\"><a href=\"#2-前后技术分离\" class=\"headerlink\" title=\"2. 前后技术分离\"></a>2. 前后技术分离</h3><p>前端可以不用了解后端技术，也不关心后端具体用什么技术来实现，只需要会 HTML/CSS/JavaScript 就能入手；而后端只需要关心后端开发技术，除了省去学习前端技术的麻烦，连 Web 框架的学习研究都只需要关注 Web API 就好，而不用去关注基于页面视图的 MVC 技术（并不是说不需要 MVC，Web API 的接口部分的数据结构呈现也是 View），不用考虑特别复杂的数据组织和呈现。</p>\n<h3 id=\"3-前后分离带来了用户用户体验和业务处理解耦\"><a href=\"#3-前后分离带来了用户用户体验和业务处理解耦\" class=\"headerlink\" title=\"3. 前后分离带来了用户用户体验和业务处理解耦\"></a>3. 前后分离带来了用户用户体验和业务处理解耦</h3><p>前端可以根据用户不同时期的体验需求迅速改版，后端对此毫无压力。同理，后端进行的业务逻辑升级，数据持久方案变更，只要不影响到接口，前端可以毫不知情。当然如果需求变更引起接口变化的时候，前后端又需要坐在一起同步信息了。</p>\n<h3 id=\"4-前后分离，可以分别归约两端的设计\"><a href=\"#4-前后分离，可以分别归约两端的设计\" class=\"headerlink\" title=\"4. 前后分离，可以分别归约两端的设计\"></a>4. 前后分离，可以分别归约两端的设计</h3><p>后端只提供 API 服务，不考虑页面呈现的问题。实现 SOA 架构的 API 可以服务于各种前端，而不仅仅是 Web 前端，可以做到一套服务，各端使用；同时对于前端来说，不依赖后端技术的前端部分可以独立部署，也可以应于 Hybrid 架构，嵌入各种“壳”（比如 Electron、Codorva 等），迅速实现多终端。</p>\n<h2 id=\"前后分离架构\"><a href=\"#前后分离架构\" class=\"headerlink\" title=\"前后分离架构\"></a>前后分离架构</h2><p>任何技术方案都不是银弹，前后分离不仅带来好处，也带来矛盾。我们在实践初期，由于前端团队力量相对薄弱，同时按照惯例，所有业务处理几乎都是由后端（原来的技术骨干）来设计和定义的，前端处理过程中常常发现接口定义不符合用户操作流程，AJAX 异步请求过多等问题。毕竟后端思维和前端思维还是有所不同——前端思维倾向于用户体验，而后端思维则更倾向于业务的技术实现。</p>\n<p>除此之外，前后分离在安全性上的要求也略有不同。由于前后分离本质上是一种 SOA 架构，所以在授权上也需要按 SOA 架构的方式来思考。Cookie/Session 的方式虽然可用，但并不是特别合适，相对来说，基于 Token 的认证则更适合一些。采用基于 Token 的认证就意味着后端的认证部分需要重写……后端当然不想重写，于是会将皮球踢给前端来让前端想办法实现基于 Cookie/Session 的认证……于是前端开始报怨（悲剧）……</p>\n<h3 id=\"谁来主导\"><a href=\"#谁来主导\" class=\"headerlink\" title=\"谁来主导\"></a>谁来主导</h3><p>这些矛盾的出现，归根结底在于设计不够清晰明确。毫无疑问，在开发过程中，主导者应该是架构师或者设计师。然而实际场景中，架构师或者设计师往往也是开发人员，所以他们的主要技术栈会极大的影响前后端在整个项目中的主次作用。这位骨干处于哪端，开发的便捷性就会向哪端倾斜。这是一个不好的现象，但是我们不得不面对这样的现状，我相信很多不太大的团队也面临着类似的问题。</p>\n<p>如果没有良好的流程规范，通常前端接触的到角色会比后端更多（多数应用型项目/产品，并非所有情况）。</p>\n<ul>\n<li>前端开发人员会受到项目/产品经理或客户的直接影响：这个地方应该放个按钮，那个操作应该这么进行……；</li>\n<li>前端还要与美工对接——这样的设计不好实现，是否可以改成那样？客户要求必须这么操作，但是这个设计做不到；</li>\n<li>前端还要跟后端对接，对于某些应用，甚至是多个后端</li>\n</ul>\n<p>换句话说，前端可以成为项目沟通的中心，所以比后端更合适承担主导的角色。</p>\n<h3 id=\"接口设计\"><a href=\"#接口设计\" class=\"headerlink\" title=\"接口设计\"></a>接口设计</h3><p>接口分后端服务实现和前端调用两个部分，技术都是成熟技术，并不难，接口设计才是难点。前面提到前后端会产生一些矛盾。从前端的角度来看，重点关注的是用户体验，包括用户在进行业务操作时的流动方向和相关处理；而从后端的角度来看，重点关注的是数据完整、有效、安全。矛盾在于双方关注点不同，信息不对称，还各有私心。解决这些矛盾的着眼点就是接口设计。</p>\n<p>接口设计时，其粒度的大小往往代表了前后端工作量的大小（非绝对，这和整体架构有关）。接口粒度太小，前端要处理的事情就多，尤其是对各种异步处理就可能会感到应接不暇；粒度太大，就会出现高耦合，降低灵活性和扩展性，当然这种情况下后端的工作就轻松不了。业务层面的东西涉及到具体的产品，这里不多做讨论。这里主要讨论一点点技术层面的东西。</p>\n<p>就形式上来说，Web API 可以定义成 REST，也可以是 RPC，只要前后端商议确定下来就行。更重要的是在输入参数和输出结果上，最好一开始就有相对固定的定义，这往往取决于前端架构或采用的 UI 框架。</p>\n<p>常见请求参数的数据形式有如下一些：</p>\n<ul>\n<li>键值对，用于 URL 中的 QueryString 或者 POST 等方法的 Payload</li>\n<li>XML/JSON/…，通常用于 POST 等方法的 Payload，也可以使用 multipart 传递</li>\n<li>ROUTE，由后端路由解析 URL 取得，在 RESTful 中常用</li>\n</ul>\n<p>而服务器响应的数据形式就五花八门各式各样了，通常一个完整的响应至少需要包含状态码、消息、数据三个部分的内容，其中</p>\n<ul>\n<li>状态码，HTTP 状态码或响应数据中特定的状态属性</li>\n<li>消息，通常是放在响应内容中，作为数据的一部分</li>\n<li>数据，根据接口协议，可能是各种格式，当前最流行的是 JSON</li>\n</ul>\n<p>我们在实践中使用 JSON 形式，最初定义了这样一种形式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;code&quot;: &quot;number&quot;,</span><br><span class=\"line\">    &quot;message&quot;: &quot;string&quot;,</span><br><span class=\"line\">    &quot;data&quot;: &quot;any&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>code</code> 主要用于指导前端进行一些特殊的操作，比如 <code>0</code> 表示 API 调用成功，<code>非0</code> 表示调用失败，其中 <code>1</code> 表示需要登录、<code>2</code> 表示未获取授权……对于这个定义，前端拿到响应之后，就可以在应用框架层进行一些常规处理，比如当 <code>code</code> 为 <code>1</code> 的时候，弹出登录窗口请用户在当前页面登录，而当 <code>code</code> 为 <code>2</code> 的时候，则弹出消息提示并后附链接引导用户获取授权。</p>\n<blockquote>\n<p>参阅：<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000012040777\" target=\"_blank\" rel=\"noopener\">前后分离模型之封装 Api 调用</a></p>\n</blockquote>\n<p>一开始这样做并没有什么问题，直到前端框架换用了 jQuery EasyUI。以 EasyUI 为例的好多 UI 库都支持为组件配置数据 URL，它会自动通过 AJAX 来获取数据，但对数据结构有要求。如果仍然采用之前设计的响应结构，就需要为组件定义数据过滤器（filter）来处理响应结果，这样做写 filter 以及为组件声明 filter 的工作量也是不小的。为了减少这部分工作量我们决定改一改接口。</p>\n<p>新的接口是一种可变结构，正常情况下返回 UI 需要的数据结构，出错的情况则响应一个类型于原定结构的数据结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;error&quot;: &#123;</span><br><span class=\"line\">        &quot;identity&quot;: &quot;special identity string&quot;,</span><br><span class=\"line\">        &quot;code&quot;: &quot;number&quot;,</span><br><span class=\"line\">        &quot;message&quot;: &quot;string&quot;,</span><br><span class=\"line\">        &quot;data&quot;: &quot;any&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于新响应数据结构，前端框架只需要判断一下是否存在 <code>error</code> 属性，如果存在，检查其 <code>identity</code> 属性是否为指定的特殊值（比如某个特定的 GUID），然后再使用其 <code>code</code> 和 <code>message</code> 属性处理错误。这个错误判断过程略为复杂一些，但可以由前端应用框架统一处理。</p>\n<p>如果使用 RESTful 风格的接口，部分状态码可以用 HTTP 状态码代替，比如 401 表示需要登录，403 就可以表示没有获得授权，500 表示程序处理过程中发生错误。当然，虽然 HTTP 状态码与 RESTful 风格更配，但是非 RESTful 风格也可以使用 HTTP 状态码来代替 <code>error.code</code>。</p>\n<h3 id=\"用户认证\"><a href=\"#用户认证\" class=\"headerlink\" title=\"用户认证\"></a>用户认证</h3><p>认证方案很多，比如 Cookie/Session 在某些环境下仍然可行、也可以使用基于 Token 和 OAuth 或者 JWT，甚至是自己实现基于 Token 的认证方式。</p>\n<h4 id=\"基于-Cookie-Session-的认证方案\"><a href=\"#基于-Cookie-Session-的认证方案\" class=\"headerlink\" title=\"基于 Cookie/Session 的认证方案\"></a>基于 Cookie/Session 的认证方案</h4><p>采用传统的 Cookie/Session 认证方案并非不可行，只不过有一些限制。如果前端部分和后端部分同源，比如页面发布在 <code>http://domain.name/</code>，而 Web API 发布在 <code>http://domain.name/api/</code>，这种情况下，原来的一体式 Web 方案所采用的 Cookie/Session 方案可以直接迁移过来，毫无压力。但是如果前面发布和 API 发布不同源，这种方法处理起来就复杂了。</p>\n<p>然后一般前后端分离的开发方式，不管是开发阶段还是发布阶段，不同源的可能性占绝大比例，所以认证方案通常会使用与 Cookie 无关的方案。</p>\n<h4 id=\"基于-OAuth-的认证方案\"><a href=\"#基于-OAuth-的认证方案\" class=\"headerlink\" title=\"基于 OAuth 的认证方案\"></a>基于 OAuth 的认证方案</h4><p>目前各大网站的开放式接口都是 SOA 架构，如果把这些开放式接口看作提供服务方（服务端），而把使用这些开放式接口的应用看作客户端，那么就可以产生这样一种和前后分离对应的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">前端 ⇌ 客户端</span><br><span class=\"line\">     ⇣</span><br><span class=\"line\">  （基于 OAuth 的认证）</span><br><span class=\"line\">     ⇡ </span><br><span class=\"line\">后端 ⇌ 服务端</span><br></pre></td></tr></table></figure>\n<p>所以，开放式接口广泛使用的 OAuth 方案用于前后分离是可行的，但在具体实施上却并不是那么容易。尤其是在安全性上，由于前端是完全暴露在外的，与 OAuth 通常实施的环境（后端⇌服务端）相比，要注意的是首次认证不是使用已注册的 AppID 和 AppToken，而是使用用户名和密码。</p>\n<h4 id=\"基于-Token-JWT-的认证方案\"><a href=\"#基于-Token-JWT-的认证方案\" class=\"headerlink\" title=\"基于 Token/JWT 的认证方案\"></a>基于 Token/JWT 的认证方案</h4><p>虽然这个方案放在最后，但这个方案却是目前前后端分离最适合的方案。基于 Token 的认证方案，各种讨论由来已久，而 JWT 是相对较为成熟，也得到多数人认可的一种。从 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fjwt.io%2F\" target=\"_blank\" rel=\"noopener\">jwt.io</a> 上可以找到各种技术栈的 JWT 实现，应用起来也比较方便。</p>\n<p>话虽如此，JWT 方案和以前使用的 Cookie/Session 在处理上还是有较大的差别，需要一定的学习成本。有人担心 JWT 的数据量太大。这确实是一个问题，但是硬件并不贵，4G 也开始进入不限流量阶段，一般应用中不用太在意这个问题。</p>\n<h2 id=\"前后分离的测试\"><a href=\"#前后分离的测试\" class=\"headerlink\" title=\"前后分离的测试\"></a>前后分离的测试</h2><p>前后分离之后，前端的测试将以用户体验测试和集成测试为主，而后端则主要是进行单元测试和 Web API 接口测试。与一体化的 Web 应用相比，多了一层接口测试，这一层测试可以完全自动化，一旦完成测试开发，就能在很大程度上控制住业务处理和数据错误。这样一来，集成测试的工作量会相对单一也容易得多。</p>\n<p>前端测试的工作相对来说减轻不了多少，前后分离之后的前端部分承担了原来的集成测试工作。但是在假设 Web API 正确的情况下进行集成测试，工作量是可以减轻不少的，用例可以只关注前端体验性的问题，比如呈现是否正确，跳转是否正确，用户的操作步骤是否符合要求以及提示信息是否准确等等。</p>\n<p>对于用户输入有效性验证这部分工作在项目时间紧迫的情况下甚至都可以完全抛给 Web API 去处理。不管是否前后端分离，Web 开发中都有一个共识：永远不要相信前端！既然后端必须保证数据的安全性和有效性，那么前端省略这一步骤并不会对后端造成什么实质性的威胁，最多只是用户体验差一点。但是，如果前后端都要做数据有效性验证，那一定要严格按照文档来进行，不然很容易出现前后端数据验证不一致的情况（这不是前后分离的问题，一体化架构同样存在这个问题）。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总的来说，前后分离所带来的好处还是很明显的。但是具体实施的时候需要一个全新的思考方式，而不是基于原有一体化 Web 开发方式来进行思考。前后分离的开放方式将开发人员从复杂的技术组合中解放出来，大家都可以更专注于自己擅长的领域来进行开发，但同时也对前后端团队的沟通交流提出了更高的要求，前后端团队必须要一同设计出相对稳定的 Web API 接口（这部分工作其实不管是否前后端分离都是少不了的，只是前后分离的架构对此要求更高，更明确地要求接口不只存在于人的记忆中，更要文档化、持久化）。</p>\n<p>转载自：<a href=\"https://juejin.im/post/5a5380a6518825733365e62a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a5380a6518825733365e62a</a></p>\n","categories":["随笔"],"tags":["随笔"]},{"title":"golang 函数间数组传值","url":"http://mu-mo.top/2018/01/25/Golang/golang-函数间数组传值/","content":"<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><p>eg: </p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sliceModify</span><span class=\"params\">(slice []<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// slice[0] = 88</span></span><br><span class=\"line\">    slice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">6</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    slice := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    sliceModify(slice)</span><br><span class=\"line\">    fmt.Println(slice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>out: <code>[1</code> <code>2</code> <code>3</code> <code>4</code> <code>5]</code></p>\n<p>虽然说数组切片在函数传递时是按照引用的语义传递的，比如说在 sliceModify 函数里面 slice[0] = 88，在方法调用的上下文中，调用函数对slice引用的改表是看得见的。</p>\n<p><em>但是在对slice进行append操作的时候，返回的是新的引用，并非原始引用。</em></p>\n<h3 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h3><p><strong>传递指针的指针</strong></p>\n<p>eg: </p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sliceModify</span><span class=\"params\">(slice *[]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    *slice = <span class=\"built_in\">append</span>(*slice, <span class=\"number\">6</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    slice := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    sliceModify(&amp;slice)</span><br><span class=\"line\">    fmt.Println(slice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> out: <code>[1</code> <code>2</code> <code>3</code> <code>4</code> <code>5</code> <code>6]</code></p>\n","categories":["golang"],"tags":["golang"]},{"title":"打印水仙花数（汇编）","url":"http://mu-mo.top/2018/01/12/其他/打印水仙花数（汇编）/","content":"<blockquote>\n<p>这里水仙花数指严格意义上的水仙花数，即若一个数满足这个数等于它的百位数、十位数、个位数的立方和，那么这个数是水仙花数。</p>\n</blockquote>\n<h3 id=\"一、设计要求\"><a href=\"#一、设计要求\" class=\"headerlink\" title=\"一、设计要求\"></a>一、设计要求</h3><p>具体的设计任务及要求：</p>\n<ol>\n<li>输入一个三位整数n；</li>\n<li>将小于n的水仙花数打印出来（各位数字的立方和等于该数本身）；</li>\n<li>程序采用子程序结构或宏指令，结构清晰；</li>\n<li>友好清晰的用户界面，能识别输入错误并控制错误的修改。</li>\n</ol>\n<h3 id=\"二、功能简述\"><a href=\"#二、功能简述\" class=\"headerlink\" title=\"二、功能简述\"></a>二、功能简述</h3><p>​    程序可以输入一个三位数，若输入有误则提示错误，并提示重新输入，若输入正确，系统将显示出所有大于等于100，并且小于等于输入数字的水仙花数。</p>\n<p>​    然后提示是否继续，若用户输入y或Y，则系统回到最开始的状态，若输入n或N,则退出系统，若为其他则提示错误，并重新输入。</p>\n<h3 id=\"三、模块说明\"><a href=\"#三、模块说明\" class=\"headerlink\" title=\"三、模块说明\"></a>三、模块说明</h3><table>\n<thead>\n<tr>\n<th>子程序名</th>\n<th>功能</th>\n<th>基本实现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET_INPUT</td>\n<td>获取键盘输入三位数字</td>\n<td>通过INT 21H号中断获取键盘输入</td>\n</tr>\n<tr>\n<td>INPUT_CHECK</td>\n<td>输入检测，判断是否为数字</td>\n<td>通过两次比较，第一次与‘0’比较，判断是否不小于，第二次与‘9’比较，判断是否不大于，都满足则ok</td>\n</tr>\n<tr>\n<td>JUDGE_lOW_BORDER</td>\n<td>判断输入数字是否是大于100的</td>\n<td>CMP与0进行比较判断即可</td>\n</tr>\n<tr>\n<td>INPUT_ERROR</td>\n<td>输入错误处理模块</td>\n<td>输出错误信息，同时自增CX，让循环仍然能够获取三位数字，在继续循环</td>\n</tr>\n<tr>\n<td>INPUT_RIGHT</td>\n<td>输入正确处理模块</td>\n<td>存储输入数字，循环继续</td>\n</tr>\n<tr>\n<td>CONTINUE</td>\n<td>循环继续</td>\n<td>通过LOOP  S2来使循环得到三位数字，同时输出三位数字以检测模块是否正确执行</td>\n</tr>\n<tr>\n<td>SWITCH_INPUT</td>\n<td>输入转换，即将输入字符转换为一个二进制数字</td>\n<td>将输入数字减去’0’即可获取输入数字（字符），的二进制（原因：ASCII码），再讲位数乘上10或者100</td>\n</tr>\n<tr>\n<td>SWITCH_NUM_SYS</td>\n<td>进制转换及存储</td>\n<td>将当前循环中的数字转化为三个数存储，如123转化为1， 2， 3分别存储，用于后面计算水仙花数</td>\n</tr>\n<tr>\n<td>CAL_CUBE</td>\n<td>计算水仙花立方</td>\n<td>将存储的三个数字分别计算立方并相加</td>\n</tr>\n<tr>\n<td>JUDGE_NARC_NUM</td>\n<td>判断水仙花数，是则显示</td>\n<td>通过CMP指令比较数字或者立方和是否相等，相等则显示</td>\n</tr>\n<tr>\n<td>IF_CONTINUE</td>\n<td>一轮之后是否继续</td>\n<td>通过获取键盘输入判断</td>\n</tr>\n<tr>\n<td>CONTINUE_CHECK</td>\n<td>是否继续输入判断</td>\n<td>通过CMP指令，让输入字符与 y,Y,n,N比较并跳转到相应模块</td>\n</tr>\n<tr>\n<td>CONTINUE_NEXT_ROUND</td>\n<td>继续下一轮</td>\n<td>跳转到ＳＴＡＲＴ</td>\n</tr>\n<tr>\n<td>CONTINUE_ERROR</td>\n<td>继续下一轮判断的时候输入错误</td>\n<td>显示输入错误信息，并JMP到IF_CONTINUE继续输入模块</td>\n</tr>\n<tr>\n<td>STOP</td>\n<td>输入ｎ退出</td>\n<td>通过MOV AX, 4C00H 和INT 21H结束程序</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四、测试用例\"><a href=\"#四、测试用例\" class=\"headerlink\" title=\"四、测试用例\"></a>四、测试用例</h3><ul>\n<li><p>测试结果说明：</p>\n<p>（1） 输入789 ，输出水仙花数407， 371， 370， 153</p>\n<p>（2） 输入y，程序继续，重新输入上限数值</p>\n<p>（3） 输入367，输出水仙花数 153</p>\n<p>（4） 输入y，程序继续，重新输入上限数值</p>\n<p>（5） 输入067，程序发现其输入数字小于100，提示输入数字太小，重新输入</p>\n<p>（6） 输入a，提示输入错误重新输入数值</p>\n<p>（7） 输入 371，输出水仙花数  371,370,153</p>\n<p>（8） 输入N，退出程序</p>\n</li>\n<li><p>测试结果：</p>\n</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/20/16112f03e942d95e?w=642&amp;h=427&amp;f=png&amp;s=19774\" alt=\"\"></p>\n<h3 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">COMMENT /**</span><br><span class=\"line\">Copyright &lt;2018&gt; &lt;Zhao Nan&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated</span><br><span class=\"line\">documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the</span><br><span class=\"line\">rights to use, copy, modify, merge, publish, distribute, sublicense, and or sell copies of the Software, and to</span><br><span class=\"line\">permit persons to whom the Software is furnished to do so, subject to the following conditions:</span><br><span class=\"line\"></span><br><span class=\"line\">The above copyright notice and this permission notice shall be included in all copies or substantial portions of the</span><br><span class=\"line\">Software.</span><br><span class=\"line\"></span><br><span class=\"line\">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE</span><br><span class=\"line\">WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS</span><br><span class=\"line\">OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR</span><br><span class=\"line\">OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span><br><span class=\"line\"></span><br><span class=\"line\">USERNAME: Zhao Nan</span><br><span class=\"line\">COMPLETE TIME: 2018-1-4</span><br><span class=\"line\">DESCRIBE: Print the number of daffodils between 100 and n(the number you input)</span><br><span class=\"line\">*/</span><br><span class=\"line\">.386</span><br><span class=\"line\">ASSUME CS:CODES, DS:DATA, SS:STACK</span><br><span class=\"line\">DATA SEGMENT  USE16</span><br><span class=\"line\">    MSG1   DB    0AH, 0DH, &apos;The shuixianhuashu is : $&apos;           ;0AH, 0DH 代表换行和回车</span><br><span class=\"line\">    MSG2   DB    0AH, 0DH, &apos;Please input a three-digit number: &apos;, &apos;$&apos;</span><br><span class=\"line\">    MSG3   DB    0AH, 0DH, &apos;Input Error, Please the number again:&apos;, &apos;$&apos;</span><br><span class=\"line\">    MSG4   DB    0AH, 0DH, &apos;The three-digit number is: &apos;, &apos;$&apos;</span><br><span class=\"line\">    MSG5   DB    0AH, 0DH, &apos;Do you want to continue(y or Y/n or N): &apos;, &apos;$&apos;</span><br><span class=\"line\">    MSG6   DB    0AH, 0DH, &apos;Input Error, Please input again:&apos;, &apos;$&apos;</span><br><span class=\"line\">    MSG7   DB    0AH, 0DH, &apos;The number you input is too little.$&apos;</span><br><span class=\"line\">    NUMS   DB    3 DUP(0), 0AH, 0DH, &apos;$&apos;    ; 存储三位数字,后续中可以存储当前的三位数字，如：循环到了456，则分别存储4,5,6</span><br><span class=\"line\">    CUBES  DW    3 DUP(0)                   ; 存储立方数字，分别是 百位，十位，个位数字的立方</span><br><span class=\"line\">DATA ENDS</span><br><span class=\"line\"></span><br><span class=\"line\">STACK SEGMENT USE16 STACK</span><br><span class=\"line\">    DB   100 DUP(0)</span><br><span class=\"line\">STACK ENDS</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CODES SEGMENT USE16        ;使用 16位</span><br><span class=\"line\">;------------------------main-----------------------------</span><br><span class=\"line\">START:</span><br><span class=\"line\">    CALL  GET_INPUT        ;获取键盘输入</span><br><span class=\"line\">    CALL  JUDGE_lOW_BORDER ;判断输入数字是否是大于100的</span><br><span class=\"line\">    CALL  SWITCH_INPUT     ;输入转换存在 CX 中，CX控制循环</span><br><span class=\"line\">    SUB   CX, 100          ;不能输出100以下，所以这里减100，注意后面使用的时候加100或者用其他操作</span><br><span class=\"line\">LOOP1:</span><br><span class=\"line\">\tCALL  SWITCH_NUM_SYS   ;将二进制转化为三个数字到 NUMS[0] NUMS[1] NUMS[2] 中</span><br><span class=\"line\">    CALL  CAL_CUBE         ;求水仙花立方</span><br><span class=\"line\">    JMP   JUDGE_NARC_NUM   ;判断水仙花数，是则显示</span><br><span class=\"line\">NEXT:</span><br><span class=\"line\">    LOOP  LOOP1            ;循环到 0为止</span><br><span class=\"line\">    JMP NEAR PTR IF_CONTINUE</span><br><span class=\"line\">    MOV   AX, 4C00H        ;程序终止</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\">;---------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">;---------------------------------------------------------</span><br><span class=\"line\">;判断是否为水仙花数</span><br><span class=\"line\">JUDGE_NARC_NUM:</span><br><span class=\"line\">    MOV   AX, CUBES[0]</span><br><span class=\"line\">    ADD   AX, CUBES[2]</span><br><span class=\"line\">    ADD   AX, CUBES[4]</span><br><span class=\"line\">    SUB   AX, 100          ;由于不能输出100,注意</span><br><span class=\"line\">    CMP   AX, CX</span><br><span class=\"line\">    JNE   NEXT</span><br><span class=\"line\">    JE    DISPLAY          ;相等则显示</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;显示水仙花数</span><br><span class=\"line\">DISPLAY:</span><br><span class=\"line\">    LEA   DX, MSG1         ;显示水仙花数</span><br><span class=\"line\">    MOV   AH, 09H</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\">    MOV   AH, 2</span><br><span class=\"line\"></span><br><span class=\"line\">    MOV   DL, NUMS[0]      ;百位数字</span><br><span class=\"line\">    ADD   DL, 30H          ;转换为数字显示, ASCII加上 48 即为字符</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\">    MOV   DL, NUMS[1]      ;十位数字</span><br><span class=\"line\">    ADD   DL, 30H</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\">    MOV   DL, NUMS[2]      ;个位数字</span><br><span class=\"line\">    ADD   DL, 30H</span><br><span class=\"line\"></span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\">    JMP   NEXT</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;键盘输入</span><br><span class=\"line\">GET_INPUT:</span><br><span class=\"line\">    MOV   CX, 3            ;三次输入数字</span><br><span class=\"line\">\tMOV   AX, DATA</span><br><span class=\"line\">    MOV   DS, AX</span><br><span class=\"line\">    MOV   BX, 0            ;输入次数</span><br><span class=\"line\"></span><br><span class=\"line\">\tLEA   DX, MSG2         ;显示提示输入</span><br><span class=\"line\">\tMOV   AH, 09H</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\"></span><br><span class=\"line\">LOOP2:</span><br><span class=\"line\">\tMOV\t  AH, 01H          ;从键盘输入一个字符, 其ASCII存放在 AL 中</span><br><span class=\"line\">  \tINT   21H</span><br><span class=\"line\"></span><br><span class=\"line\">\tJMP   INPUT_CHECK      ;输入检测判断</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;输入检测</span><br><span class=\"line\">INPUT_CHECK:</span><br><span class=\"line\">\tCMP   AL, &apos;0&apos;</span><br><span class=\"line\">\tJB    INPUT_ERROR      ;输入ASCII码小于 0 输入错误</span><br><span class=\"line\">\tCMP   AL, &apos;9&apos;</span><br><span class=\"line\">\tJA    INPUT_ERROR      ;输入ASCII码大于 9 输入错误</span><br><span class=\"line\">\tJNA   INPUT_RIGHT      ;否则输入正确</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;输入错误</span><br><span class=\"line\">INPUT_ERROR:</span><br><span class=\"line\">\tLEA   DX, MSG3         ;输出错误的信息模板</span><br><span class=\"line\">    MOV   AH, 09H</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\"></span><br><span class=\"line\">    ;INC   CX</span><br><span class=\"line\">    MOV   CX, 4</span><br><span class=\"line\">    MOV   BX, 0</span><br><span class=\"line\">    JMP   CONTINUE</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;输入正确</span><br><span class=\"line\">INPUT_RIGHT:</span><br><span class=\"line\">\tMOV   NUMS[BX], AL     ;存储输入</span><br><span class=\"line\">  \tINC   BX</span><br><span class=\"line\">  \tJMP   CONTINUE         ;继续循环</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;继续</span><br><span class=\"line\">CONTINUE:</span><br><span class=\"line\">\tLOOP  LOOP2</span><br><span class=\"line\"></span><br><span class=\"line\">  \tLEA   DX, MSG4         ;输出正确的数字</span><br><span class=\"line\">  \tMOV   AH, 09H</span><br><span class=\"line\">  \tINT   21H</span><br><span class=\"line\">  \tLEA   DX, NUMS</span><br><span class=\"line\">  \tMOV   AH, 09H</span><br><span class=\"line\">  \tINT   21H</span><br><span class=\"line\"></span><br><span class=\"line\">\tRET                    ;返回主程序，RET从堆栈中取出 IP</span><br><span class=\"line\"></span><br><span class=\"line\">;-----------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">; 判断输入数字是否是大于100的</span><br><span class=\"line\">JUDGE_lOW_BORDER:</span><br><span class=\"line\">    CMP   NUMS[0], &apos;0&apos;</span><br><span class=\"line\">    JE    NUM_IS_LIttle</span><br><span class=\"line\">    RET</span><br><span class=\"line\"></span><br><span class=\"line\">;输入数字太小</span><br><span class=\"line\">NUM_IS_LIttle:</span><br><span class=\"line\">    LEA   DX, MSG7</span><br><span class=\"line\">    MOV   AH, 09H</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\">    JMP   START</span><br><span class=\"line\"></span><br><span class=\"line\">;输入转换存在  CX 中，CX控制循环</span><br><span class=\"line\">SWITCH_INPUT:</span><br><span class=\"line\">\tMOV   CX, 0</span><br><span class=\"line\">\tMOV   CL, NUMS[2]</span><br><span class=\"line\">    SUB   CL, &apos;0&apos;</span><br><span class=\"line\">\tMOV   AL, 10</span><br><span class=\"line\">    MOV   BL, NUMS[1]</span><br><span class=\"line\">    SUB   BL, &apos;0&apos;</span><br><span class=\"line\">\tMUL   BL</span><br><span class=\"line\">\tADD   CX, AX</span><br><span class=\"line\">\tMOV   AL, 100</span><br><span class=\"line\">    MOV   BL, NUMS[0]</span><br><span class=\"line\">    SUB   BL, &apos;0&apos;</span><br><span class=\"line\">\tMUL   BL</span><br><span class=\"line\">\tADD   CX, AX</span><br><span class=\"line\">\tRET</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;----------------------------------------------------------</span><br><span class=\"line\">;进制转换存在 NUMS[0], NUMS[1], NUMS[2] 中</span><br><span class=\"line\">SWITCH_NUM_SYS:</span><br><span class=\"line\">\tMOV   AX, CX</span><br><span class=\"line\">    ADD   AX, 100</span><br><span class=\"line\">    MOV   BL, 100</span><br><span class=\"line\">    DIV   BL                    ;AL=百位数, AH=余数</span><br><span class=\"line\">    MOV   NUMS[0], AL           ;百位数字</span><br><span class=\"line\">    MOV   AL, AH</span><br><span class=\"line\">    MOV   AH, 0</span><br><span class=\"line\">    MOV   BL, 10</span><br><span class=\"line\">    DIV   BL</span><br><span class=\"line\">    MOV   NUMS[1], AL           ;十位数字</span><br><span class=\"line\">    MOV   NUMS[2], AH           ;个位数字</span><br><span class=\"line\">\tRET</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;求水仙花立方</span><br><span class=\"line\">CAL_CUBE:</span><br><span class=\"line\">    MOV   AL, NUMS[0]           ;三次连乘即可</span><br><span class=\"line\">    MOV   AH, 0</span><br><span class=\"line\">    MOV   BX, AX</span><br><span class=\"line\">    MUL   BX</span><br><span class=\"line\">    MUL   BX</span><br><span class=\"line\">    MOV   CUBES[0], AX</span><br><span class=\"line\"></span><br><span class=\"line\">    MOV   AL, NUMS[1]</span><br><span class=\"line\">    MOV   AH, 0</span><br><span class=\"line\">    MOV   BX, AX</span><br><span class=\"line\">    MUL   BX</span><br><span class=\"line\">    MUL   BX</span><br><span class=\"line\">    MOV   CUBES[2], AX</span><br><span class=\"line\"></span><br><span class=\"line\">    MOV   AL, NUMS[2]</span><br><span class=\"line\">    MOV   AH, 0</span><br><span class=\"line\">    MOV   BX, AX</span><br><span class=\"line\">    MUL   BX</span><br><span class=\"line\">    MUL   BX</span><br><span class=\"line\">    MOV   CUBES[4], AX</span><br><span class=\"line\">    RET</span><br><span class=\"line\"></span><br><span class=\"line\">;-----------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">;-----------------------------------------------------------------</span><br><span class=\"line\">;输出水仙花数之后的判断是否继续</span><br><span class=\"line\">IF_CONTINUE:</span><br><span class=\"line\">    LEA   DX, MSG5        ;显示提示输入</span><br><span class=\"line\">    MOV   AH, 09H</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\">    MOV   AH, 01H         ;从键盘输入一个字符, 其ASCII存放在 AL 中</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\"></span><br><span class=\"line\">    JMP CONTINUE_CHECK</span><br><span class=\"line\"></span><br><span class=\"line\">;是否继续输入判断</span><br><span class=\"line\">CONTINUE_CHECK:           ;判断是否输入的是 y, Y, n, N</span><br><span class=\"line\">    CMP   AL, &apos;y&apos;</span><br><span class=\"line\">    JE    CONTINUE_NEXT_ROUND</span><br><span class=\"line\">    CMP   AL, &apos;Y&apos;</span><br><span class=\"line\">    JE    CONTINUE_NEXT_ROUND</span><br><span class=\"line\">    CMP   AL, &apos;n&apos;</span><br><span class=\"line\">    JE    STOP</span><br><span class=\"line\">    CMP   AL, &apos;N&apos;</span><br><span class=\"line\">    JE    STOP</span><br><span class=\"line\">    JNE   CONTINUE_ERROR</span><br><span class=\"line\"></span><br><span class=\"line\">;继续</span><br><span class=\"line\">CONTINUE_NEXT_ROUND:</span><br><span class=\"line\">    JMP  NEAR PTR START</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;退出</span><br><span class=\"line\">STOP:</span><br><span class=\"line\">    MOV   AX, 4C00H       ;程序终止</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;继续输入错误</span><br><span class=\"line\">CONTINUE_ERROR:</span><br><span class=\"line\">    LEA   DX, MSG6        ;输出错误的信息模板</span><br><span class=\"line\">    MOV   AH, 09H</span><br><span class=\"line\">    INT   21H</span><br><span class=\"line\">    JMP   IF_CONTINUE</span><br><span class=\"line\"></span><br><span class=\"line\">;----------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">CODES ENDS</span><br><span class=\"line\">    END START</span><br></pre></td></tr></table></figure>\n<p>参考教材：王爽的《汇编语言》</p>\n","categories":["其他"],"tags":["汇编"]},{"title":"第三期任务","url":"http://mu-mo.top/2018/01/01/任务发布/第三期任务/","content":"<h1 id=\"第三期任务\"><a href=\"#第三期任务\" class=\"headerlink\" title=\"第三期任务\"></a>第三期任务</h1><p><strong>时间：寒假期间</strong></p>\n<p><strong>对象：学习通用知识的同学</strong></p>\n<p><strong>下期预告: 通用知识到此结束，下期还在考虑是否要继续</strong></p>\n<h3 id=\"任务内容：\"><a href=\"#任务内容：\" class=\"headerlink\" title=\"任务内容：\"></a>任务内容：</h3><ul>\n<li><p>数据库，推荐学习 MySQL </p>\n<p>学习教程：<a href=\"http://www.runoob.com/mysql/mysql-tutorial.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a>  </p>\n<p>在线练习网站：<a href=\"http://sqlfiddle.com/\" target=\"_blank\" rel=\"noopener\">SQL Fiddle</a>  ( <a href=\"http://wego2.com/tui-jian-yi-ge-zai-xian-lian-xi-SQL-yu-fa-de-wang-zhan.html\" target=\"_blank\" rel=\"noopener\">此网站介绍</a> )</p>\n<p>注：也可以自己下一个 MySQL 数据库在本地进行练习（推荐）</p>\n</li>\n<li><p>常识了解</p>\n<p>尝试使用 <strong>最通俗易懂的</strong> 话解释下列每一行, 然后使用 <strong>最专业的</strong> 方式解释(例如说明白 what, why, where, how, advantages, disadvantages, 运行原理, 配例子, 生动清晰明白)</p>\n<ul>\n<li>高阶函数/函数柯里化</li>\n<li>函数式编程</li>\n<li>线程/进程/协程/并行算法</li>\n<li>文件系统</li>\n<li>BSD/MIT licenses</li>\n<li>多态</li>\n<li>git/svn/版本控制</li>\n<li>像素/长度/px/分辨率/ppi</li>\n<li>全加器/半加器/提前进位加法器</li>\n<li>MVC模式</li>\n<li><strong>装饰者/装饰器模式 </strong> </li>\n<li>机器学习</li>\n</ul>\n</li>\n<li><p>学习装饰者/装饰器模式，并了解一种语言的装饰器模式的使用</p>\n<p>例如： Java 的继承和多态 和 Python 的装饰器</p>\n</li>\n</ul>\n","categories":["任务"],"tags":["任务","班级任务"]},{"title":"Python 学习传送门","url":"http://mu-mo.top/2017/12/31/Python/Python学习传送门/","content":"<p><strong>欢迎大家来补充，各种笔记、教程、电子书、精华帖子啥的都行</strong></p>\n<h4 id=\"Python-学习教程：\"><a href=\"#Python-学习教程：\" class=\"headerlink\" title=\"Python 学习教程：\"></a>Python 学习教程：</h4><ul>\n<li><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">廖雪峰的Python3教程</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000\" target=\"_blank\" rel=\"noopener\">廖雪峰的Python2教程</a></p>\n</li>\n<li><p><a href=\"http://www.pythondoc.com/pythontutorial3/\" target=\"_blank\" rel=\"noopener\">Python3入门指南-官方中文</a></p>\n<p><a href=\"http://www.pythondoc.com/pythontutorial27/index.html\" target=\"_blank\" rel=\"noopener\">Python2入门指南-官方中文</a></p>\n</li>\n<li><p><a href=\"http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/\" target=\"_blank\" rel=\"noopener\">Python 代码规范(Google 开源项目风格指南)</a></p>\n</li>\n</ul>\n<h4 id=\"Python-Web框架教程：\"><a href=\"#Python-Web框架教程：\" class=\"headerlink\" title=\"Python Web框架教程：\"></a>Python Web框架教程：</h4><ul>\n<li><p><a href=\"http://docs.jinkan.org/docs/flask/\" target=\"_blank\" rel=\"noopener\">Flask中文教程</a></p>\n</li>\n<li><p><a href=\"http://minzhulou.com/doc\" target=\"_blank\" rel=\"noopener\">民主楼-flask</a></p>\n<p>内含 flask 的各中链接</p>\n</li>\n</ul>\n<h4 id=\"uWSGI-和-Nginx\"><a href=\"#uWSGI-和-Nginx\" class=\"headerlink\" title=\"uWSGI 和 Nginx:\"></a>uWSGI 和 Nginx:</h4><ul>\n<li><a href=\"http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html\" target=\"_blank\" rel=\"noopener\">Quickstart for Python/WSGI applications</a></li>\n<li><a href=\"http://www.linuxidc.com/Linux/2016-06/132690.htm\" target=\"_blank\" rel=\"noopener\">Flask+uWSGI+Nginx+Ubuntu部署教程</a></li>\n<li><a href=\"https://showzeng.itscoder.com/nginx/2016/10/03/use-nginx-to-deploy-static-pages-easily.html\" target=\"_blank\" rel=\"noopener\">使用 Nginx 部署静态页面</a></li>\n</ul>\n<h4 id=\"前后端认证加密：\"><a href=\"#前后端认证加密：\" class=\"headerlink\" title=\"前后端认证加密：\"></a>前后端认证加密：</h4><ul>\n<li><a href=\"https://segmentfault.com/a/1190000010312468\" target=\"_blank\" rel=\"noopener\">理解JWT（JSON Web Token）认证及python实践</a></li>\n</ul>\n<h4 id=\"书籍推荐：\"><a href=\"#书籍推荐：\" class=\"headerlink\" title=\"书籍推荐：\"></a>书籍推荐：</h4><ul>\n<li><p><a href=\"https://zhiguangxiong.gitbooks.io/python/content/di-2-zhang-lie-biao-he-yuan-zu/tong-yong-xu-lie-cao-zuo.html\" target=\"_blank\" rel=\"noopener\">Python 基础教程</a></p>\n</li>\n<li><p><a href=\"https://bop.mol.uno/\" target=\"_blank\" rel=\"noopener\">简明Python教程</a></p>\n</li>\n<li><p><a href=\"https://guoruibiao.gitbooks.io/effective-python/content/\" target=\"_blank\" rel=\"noopener\">Effective Python 中文版</a></p>\n<p><a href=\"https://hacktec.gitbooks.io/effective-python/content/en/\" target=\"_blank\" rel=\"noopener\">Effective Python 原版</a></p>\n</li>\n</ul>\n<h4 id=\"实战：\"><a href=\"#实战：\" class=\"headerlink\" title=\"实战：\"></a>实战：</h4><ul>\n<li><p><a href=\"https://github.com/Coordinate36/pyWebScaffold\" target=\"_blank\" rel=\"noopener\">pyWebScaffold</a></p>\n<p>框架组件：flask、MySQL、redis、JWT、docker、uWSGI、Nginx</p>\n</li>\n</ul>\n","categories":["Python"],"tags":["portal","Python","start"]},{"title":"Sublime 配置","url":"http://mu-mo.top/2017/12/31/工具/Sublime-配置/","content":"<ul>\n<li>Sublime Text：学习资源篇](<a href=\"https://www.jianshu.com/p/d1b9a64e2e37\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d1b9a64e2e37</a>)</li>\n<li><a href=\"https://www.jianshu.com/p/5905f927d01b\" target=\"_blank\" rel=\"noopener\">Sublime插件：增强篇</a></li>\n<li><a href=\"https://www.jianshu.com/p/aa30cc25c91b\" target=\"_blank\" rel=\"noopener\">Sublime插件：Markdown篇</a></li>\n<li><a href=\"https://www.jianshu.com/p/595975a2a5f3\" target=\"_blank\" rel=\"noopener\">Sublime插件：C语言篇</a></li>\n<li><a href=\"https://www.jianshu.com/p/13fedee165f1\" target=\"_blank\" rel=\"noopener\">Sublime插件：主题篇</a></li>\n<li><a href=\"https://www.jianshu.com/p/3a8555c273d8\" target=\"_blank\" rel=\"noopener\">Sublime插件：Git篇</a></li>\n<li><a href=\"https://www.jianshu.com/p/c75d21d2e967\" target=\"_blank\" rel=\"noopener\">Sublime 小技巧：文本自动换行显示？</a></li>\n</ul>\n<p>sublime-settings - User 基本配置: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;font_size&quot;: 12,</span><br><span class=\"line\">    &quot;ignored_packages&quot;:</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &quot;Vintage&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;font_face&quot;: &quot;Consolas&quot;,</span><br><span class=\"line\">    // 设置tab的大小为4</span><br><span class=\"line\">    &quot;tab_size&quot;: 4,</span><br><span class=\"line\">    // 使用空格代替tab</span><br><span class=\"line\">    &quot;translate_tabs_to_spaces&quot;: true,</span><br><span class=\"line\">    &quot;font_face&quot;: &quot;YaHei Consolas Hybrid&quot;, //需要先安装字体，解决中文，英文不在一行问题</span><br><span class=\"line\">    &quot;save_on_focus_lost&quot;: true,     // 失去光标自动保存</span><br><span class=\"line\">    // 添加行宽标尺</span><br><span class=\"line\">    &quot;rulers&quot;: [80, 100],</span><br><span class=\"line\">    // 显示空白字符</span><br><span class=\"line\">    &quot;draw_white_space&quot;: &quot;all&quot;,</span><br><span class=\"line\">    // 保存时自动去除行末空白</span><br><span class=\"line\">    &quot;trim_trailing_white_space_on_save&quot;: true,</span><br><span class=\"line\">    // 保存时自动增加文件末尾换行</span><br><span class=\"line\">    &quot;ensure_newline_at_eof_on_save&quot;: true,</span><br><span class=\"line\">    // 默认编码格式</span><br><span class=\"line\">    &quot;default_encoding&quot;: &quot;UTF-8&quot;,</span><br><span class=\"line\">    &quot;update_check&quot;: false,   // 不检查更新</span><br><span class=\"line\">// 这个会把光标的样式从闪烁变成淡入淡出，其余的选项还有“smooth”, “phase”, “blink”, “wide”， “solid”.</span><br><span class=\"line\">\t&quot;caret_style&quot;: &quot;phase&quot;,</span><br><span class=\"line\">\t// 高亮当前行</span><br><span class=\"line\">\t&quot;highlight_line&quot;: true,</span><br><span class=\"line\">\t// 增加行间距</span><br><span class=\"line\">    &quot;line_padding_bottom&quot;: 1,</span><br><span class=\"line\">    &quot;line_padding_top&quot;: 1,</span><br><span class=\"line\">    // 一直现在代码折叠箭头</span><br><span class=\"line\">    &quot;fade_fold_buttons&quot;: false,</span><br><span class=\"line\">    &quot;word_wrap&quot;: true,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sublime 自带格式化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;&quot;keys&quot;: [&quot;ctrl+alt+l&quot;], &quot;command&quot;: &quot;reindent&quot; , &quot;args&quot;:</span><br><span class=\"line\">    &#123;&quot;single_line&quot;: false&#125;&#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"sublime-中文解决方案\"><a href=\"#sublime-中文解决方案\" class=\"headerlink\" title=\"sublime 中文解决方案\"></a>sublime 中文解决方案</h4><ul>\n<li><p>下载需要的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/lyfeyaj/sublime-text-imfix.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.将subl移动到/usr/bin/，并且将sublime-imfix.so移动到/opt/sublime_text/（sublime的安装目录）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~/sublime-text-imfix</span><br><span class=\"line\">sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/</span><br><span class=\"line\">sudo cp ./src/subl /usr/bin/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用subl命令试试能不能启动sublime，如果成功启动的话，应该就可以输入中文了。</p>\n<p>终端输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">LD_PRELOAD=./libsublime-imfix.so subl</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注：<code>如果不在终端中输入**subl**则无法输入中文，即要想输入中文则必须使用subl命令在终端中打开sublime</code></p>\n<blockquote>\n<p>如果想点击sublime图标启动也能输入中文的话，则只需将 sublime 相应的 .desktop文件 中的 Exec那一行修改为<br><code>Exec=subl</code> 即可 （.desktop文件一般位置 <code>/usr/share/applications/</code> 和 <code>~/.local/share/applications/</code>）</p>\n</blockquote>\n<p>###　主题篇</p>\n<p>Sublime Text 是一个轻量、简洁、高效、跨平台的编辑器。有些人会认为变更Sublime Text的皮肤是一件浪费时间的事情，但也许你没想过，一个漂亮的主题会提高你的工作效率。下面这9款主题都能让你的编辑器里的代码具有不同的配色效果。</p>\n<ol>\n<li>Spacegray</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-3279b3bb9aeb1c35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 1\"></p>\n<p>   一个最小化的设计可以帮你把注意力放在编写代码上，该主题在 UI 上没什么吸引人之处，但很适合编码。</p>\n<ol start=\"2\">\n<li><a href=\"http://ethanschoonover.com/solarized\" target=\"_blank\" rel=\"noopener\">Solarized</a></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-bbe350b21860e1f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 2\"></p>\n<p>   非常精确的颜色设置，这些颜色在不同的设备和不同的亮度环境下测试过。</p>\n<ol start=\"3\">\n<li><a href=\"http://glaciertheme.com/\" target=\"_blank\" rel=\"noopener\">Glacier</a></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-6dcc6a40546e3d58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 3\"></p>\n<p>   颜色很丰富，使用流行的扁平设计风格。</p>\n<ol start=\"4\">\n<li><a href=\"http://jamiewilson.io/predawn/\" target=\"_blank\" rel=\"noopener\">Predawn</a></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-fdd642f475d6a20d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 4\"></p>\n<p>   Predawn 非常漂亮，特别适合编写代码。</p>\n<ol start=\"5\">\n<li><a href=\"https://github.com/thinkpixellab/flatland\" target=\"_blank\" rel=\"noopener\">Flatland</a></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-6c910a237073ec0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 5\"></p>\n<p>   Flatland 是一个基于 Soda 构建的 Sublime Text 主题，看起来不错。</p>\n<ol start=\"6\">\n<li><a href=\"https://github.com/daylerees/colour-schemes/blob/master/sublime/legacy.tmTheme\" target=\"_blank\" rel=\"noopener\">Tron Legacy</a></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-ce43d30147ab3bba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 6\"></p>\n<p>   Tron 电影迷们可能会喜欢这一款主题，因为颜色相似。</p>\n<ol start=\"7\">\n<li><a href=\"http://itsthatguy.com/post/70191573560/sublime-text-theme-itg-flat\" target=\"_blank\" rel=\"noopener\">ITG:Flat</a></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-b6af410635f6c029.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 7\"></p>\n<p>   另外一个扁平化设计风格主题。</p>\n<ol start=\"8\">\n<li><a href=\"https://github.com/chriskempson/tomorrow-theme\" target=\"_blank\" rel=\"noopener\">Tomorrow Theme</a></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-b79089b6f9273cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 8\"></p>\n<p>   Tomorrow 主题颜色丰富，有着强烈的对比。</p>\n<ol start=\"9\">\n<li><p><a href=\"https://github.com/kenwheeler/brogrammer-theme\" target=\"_blank\" rel=\"noopener\">Brogrammar</a></p>\n<p>自带多种主题风格，可以融合<a href=\"https://link.zhihu.com/?target=https%3A//github.com/ihodev/sublime-file-icons\" target=\"_blank\" rel=\"noopener\">ihodev/sublime-file-icons</a>；</p>\n</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-32fc41650a833d50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Best sublime text 2 and 3 theme for 2014 9\"></p>\n<p>   扁平而且性感的设计。</p>\n<ol start=\"10\">\n<li><p>Boxy</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-8269fd72b9b7fc6e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"插件篇\"><a href=\"#插件篇\" class=\"headerlink\" title=\"插件篇\"></a>插件篇</h3><ol>\n<li><p>Sublime Package Control</p>\n<ul>\n<li><p>打开 Sublime Text 3，按下<code>Control + &#39;</code>调出 Console。</p>\n</li>\n<li><p>将以下代码粘贴进命令行中并回车:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Sublime Text 2 请使用以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import urllib2,os; pf=&apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &apos;wb&apos; ).write( urllib2.urlopen( &apos;http://sublime.wbond.net/&apos; +pf.replace( &apos; &apos;,&apos;%20&apos; )).read()); print( &apos;Please restart Sublime Text to finish installation&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 Sublime Text 3，如果在 <code>Preferences -&gt; Package Settings</code>中见到<code>Package Control</code>这一项，就说明安装成功了。</p>\n<p>通过Package Control 来安装插件：</p>\n</li>\n<li><p>按下<code>Shift + Command + P</code>调出命令面板。</p>\n</li>\n<li>输入install调出<code>Package Control: Install Package</code>选项，按下回车。</li>\n<li>输入插件名称并回车，稍等几秒就安装好了，有的插件可能需要重启Sublime Text才能激活。</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p><a href=\"https://link.jianshu.com/?t=https://github.com/spadgos/sublime-jsdocs\" target=\"_blank\" rel=\"noopener\">DocBlockr</a>：自动<code>生成大块的注释，并且可以用**tab**在不同内容之间切换，很爽的</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/26219-318ce98c56fdfe18.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/521\" alt=\"img\"></p>\n<p>​                                  <code>用**tab**在参数之间平滑切换</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/26219-9a58baaa98020b35.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/521\" alt=\"img\"></p>\n<p><strong>注</strong>：安装完重启一下，否则可能效果不理想，比如<code>tab</code>跳到别的地方去了</p>\n</li>\n<li><p><a href=\"https://link.jianshu.com/?t=http://theo.im/SublimeAStyleFormatter/\" target=\"_blank\" rel=\"noopener\">SublimeAStyleFormatter</a>：国人做的Astyle Sublime版，蛮不错的。</p>\n<p>安装完成之后，下面这个配置一定要打开，即保存自动格式化，这个相比于CoolFormat要简单很多。</p>\n<p>settings - user（default也行）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Auto format on file save</span><br><span class=\"line\">    &quot;autoformat_on_save&quot;: true,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SideBarEnhancements</p>\n<p>SideBarEnhancements 是一款很实用的右键菜单增强插件，有以 diff 形式式显示未保存的修改、在文件管理器中显示该文件、复制文件路径、在侧边栏中定位该文件等功能，也有基础的诸如新建文件/目录，编辑，打开/运行，显示，在选择中/上级目录/项目中查找，剪切，复制，粘贴，重命名，删除，刷新等常见功能。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-55c16b382dfc0437.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n</li>\n<li><p><a href=\"https://link.jianshu.com/?t=https://github.com/seanliang/ConvertToUTF8\" target=\"_blank\" rel=\"noopener\">ConvertToUTF8</a></p>\n<p>通过本插件，您可以编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的 GB2312，GBK，BIG5，EUC-KR，EUC-JP 等。ConvertToUTF8 同时支持 Sublime Text 2 和 3。</p>\n</li>\n<li><p><a href=\"https://link.jianshu.com/?t=https://github.com/wbond/sublime_terminal\" target=\"_blank\" rel=\"noopener\">Terminal</a></p>\n<p>这个插件可以让你在Sublime中直接使用终端打开你的项目文件夹，并支持使用快捷键<code>Ctrl + Shift + T</code>（不是 Ctrl  + Alt + T）。</p>\n</li>\n<li><p><a href=\"https://link.jianshu.com/?t=https://sublime.wbond.net/packages/Git\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n<p>将Git整合进你的SublimeText，使的你可以在SublimeText中运行Git命令，包括添加，提交文件，查看日志，文件注解以及其它Git功能。</p>\n</li>\n<li><p><a href=\"https://link.jianshu.com/?t=https://sublime.wbond.net/packages/BracketHighlighter\" target=\"_blank\" rel=\"noopener\">BracketHighlighter</a></p>\n<p>可以使括号<strong>高亮匹配</strong>，这个需要自己来配置配色方案。我的配置方案见最后（Bracket settings-User和主题文件Monokai Extended.sublime-package添加的代码）。</p>\n<p>Bracket settings-User</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;bracket_styles&quot;: &#123;</span><br><span class=\"line\">            // This particular style is used to highlight</span><br><span class=\"line\">            // unmatched bracket pairs. It is a special</span><br><span class=\"line\">            // style.</span><br><span class=\"line\">            &quot;unmatched&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;question&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.unmatched&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;highlight&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            // User defined region styles</span><br><span class=\"line\">            &quot;curly&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;curly_bracket&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.curly&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;highlight&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;round&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;round_bracket&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.round&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;outline&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;square&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;square_bracket&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.square&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;outline&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;angle&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;angle_bracket&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.angle&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;outline&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;tag&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;tag&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.tag&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;outline&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;single_quote&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;single_quote&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.quote&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;outline&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;double_quote&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;double_quote&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.quote&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;outline&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;regex&quot;: &#123;</span><br><span class=\"line\">                &quot;icon&quot;: &quot;regex&quot;,</span><br><span class=\"line\">                &quot;color&quot;: &quot;brackethighlighter.quote&quot;,</span><br><span class=\"line\">                &quot;style&quot;: &quot;outline&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://link.jianshu.com/?t=https://github.com/jonschlinkert/sublime-monokai-extended\" target=\"_blank\" rel=\"noopener\">Monokai Extended</a></p>\n<p>比较喜欢Soda Dark和Monokai，这里有Monokai Extended。这个 color scheme 是 Monokai Soda 的增强。如果再配合 Markdown Extended，将大大改善 Markdown 的语法高亮。</p>\n<p>Monokai Extended.sublime-package添加的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- BEGIN Bracket Highlighter plugin color modifications --&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;name&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;Bracket Default&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;scope&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;brackethighlighter.default&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;settings&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;foreground&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#FFFFFF&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;background&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#A6E22E&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;name&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;Bracket Unmatched&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;scope&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;brackethighlighter.unmatched&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;settings&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;foreground&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#FFFFFF&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;background&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#FF0000&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;name&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;Bracket Curly&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;scope&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;brackethighlighter.curly&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;settings&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;foreground&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#FF00FF&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;name&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;Bracket Round&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;scope&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;brackethighlighter.round&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;settings&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;foreground&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#E7FF04&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;name&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;Bracket Square&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;scope&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;brackethighlighter.square&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;settings&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;foreground&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#FE4800&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;name&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;Bracket Angle&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;scope&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;brackethighlighter.angle&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;settings&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;foreground&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#02F78E&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;name&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;Bracket Tag&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;scope&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;brackethighlighter.tag&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;settings&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;foreground&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#FFFFFF&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;background&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#0080FF&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;name&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;Bracket Quote&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;scope&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;brackethighlighter.quote&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;settings&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;foreground&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;#56FF00&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;!-- END Bracket Highlighter plugin color modifications --&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://damnwidget.github.io/anaconda/\" target=\"_blank\" rel=\"noopener\">Anaconda</a></p>\n<p>settings: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;pep8_ignore&quot;: [&quot;E501&quot;, &quot;W292&quot;, &quot;E303&quot;, &quot;W391&quot;, &quot;E225&quot;, &quot;E302&quot;, &quot;W293&quot;, &quot;E402&quot;],</span><br><span class=\"line\">    &quot;pyflakes_explicit_ignore&quot;:</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &quot;UnusedImport&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;auto_formatting&quot;: true,</span><br><span class=\"line\">    &quot;enable_signatures_tooltip&quot;: true,</span><br><span class=\"line\">    &quot;merge_signatures_and_doc&quot;:true,</span><br><span class=\"line\">    &quot;anaconda_linting&quot;: false,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","categories":["工具"],"tags":["config","工具","sublime"]},{"title":"区块链科普","url":"http://mu-mo.top/2017/12/30/分布式/区块链科普/","content":"<p><a href=\"https://bitshuo.com/topic/583405978bf98a143753b86a\" target=\"_blank\" rel=\"noopener\">区块链开发入门书籍和文档</a></p>\n<p>知乎某科普区块链链接：<a href=\"https://www.zhihu.com/question/37290469\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/37290469</a> （感觉说的挺生动）</p>\n<h2 id=\"1-区块链基础\"><a href=\"#1-区块链基础\" class=\"headerlink\" title=\"1. 区块链基础\"></a>1. 区块链基础</h2><p><strong>定义</strong>：区块链是一种新型去中心化协议，能安全地存储比特币交易或其它数据，信息不可伪造和篡改，可以自动执行智能合约，无需任何中心化机构的审核。交易既可以是比特币这样的数字货币，也可以是债权、股权、版权等数字资产，区块链技术解决了<strong>拜占庭将军问题</strong>，大大降低了现实经济的信任成本与会计成本，重新定义了互联网时代的产权制度。                </p>\n<p><strong>简单来说</strong>：区块链是一个<strong>去中心化</strong>的分布式数据库</p>\n<ul>\n<li>首先，区块链的主要作用是储存信息。任何需要保存的信息，都可以写入区块链，也可以从里面读取，所以它是数据库。</li>\n<li>其次，任何人都可以架设服务器，加入区块链网络，成为一个节点。区块链的世界里面，没有中心节点，每个节点都是平等的，都保存着整个数据库。你可以向任何一个节点，写入/读取数据，因为所有节点最后都会同步，保证区块链一致。</li>\n</ul>\n<h3 id=\"什么是去中心化呢？\"><a href=\"#什么是去中心化呢？\" class=\"headerlink\" title=\"什么是去中心化呢？\"></a>什么是去中心化呢？</h3><p><strong>中心化集中式处理</strong></p>\n<p>eg: 你要在某宝上买一部手机，交易流程是：</p>\n<ul>\n<li>你将钱打给支付宝</li>\n<li>支付宝收款后通知卖家发货</li>\n<li>卖家发货</li>\n<li>你确认收货</li>\n<li>支付宝把钱打给卖家。</li>\n</ul>\n<blockquote>\n<p> 在这个过程中，虽然你是在和卖家交易，但是这笔交易还牵扯到了除了你和卖家的第三方，即支付宝，你和卖家的交易都是围绕支付宝展开。因此，如果支付宝系统出了问题便会造成这笔交易的失败。并且虽然你只是简单的买了一个手机，但是你和卖家都要向第三方提供多余的信息。因此考虑极端情况，如果支付宝跑路了或者是拿了钱不却不承认你的交易或者是支付宝所在的城市因为开G20把所有人都赶走了(?)，那么你就悲剧了。</p>\n</blockquote>\n<p><strong>去中心化</strong></p>\n<p>对于上面的例子：去中心化的处理方式就要显得简单很多，你只需要和卖家交换钱和手机，然后双方都<strong>声称完成了这笔交易</strong>，就OK了，同时也无须担心自己的与交易无关的信息泄漏给第三方或者被控制。</p>\n<p>去中心化是区块链技术的颠覆性特点，它无需中心化代理，实现了一种<strong>点对点的直接交互</strong>，使得高效率、大规模、无中心化代理的信息交互方式成为了现实。</p>\n<p>但是，没有一个中心管理，人人都可以往里面写入数据，那怎么来保证数据可信？被坏人改了怎么办？这就是区块链奇妙的地方。</p>\n<h3 id=\"拜占庭问题\"><a href=\"#拜占庭问题\" class=\"headerlink\" title=\"拜占庭问题\"></a>拜占庭问题</h3><p><strong>引言</strong>：又叫拜占庭将军（ Byzantine Generals Problem） 问题，是 Leslie Lamport 1982 年提出用来解释一致性问题的一个虚构模型。拜占庭是古代东罗马帝国的首都，由于地域宽广，守卫边境的多个将军（ 系统中的多个节点） 需要通过信使来传递消息，达成某些一致的决定。但由于将军中可能存在叛徒（ 系统中节点出错） ，这些叛徒将努力向不同的将军发送不同的消息，试图会干扰一致性的达成。拜占庭问题即为在此情况下，如何让忠诚的将军们能达成行动的一致。</p>\n<p>两个问题：</p>\n<ul>\n<li>拜占庭问题：允许存在少数节点作恶（ 消息可能被伪造） 场景下的一致性达成问题。</li>\n<li>非拜占庭问题：分布式的系统中存在故障（ fault） ，但不存在恶意（ corrupt） 节点场景（ 即可能消息丢失或重复，但无错误消息） 下的一致性达成 问题。</li>\n</ul>\n<h3 id=\"什么是一致性呢？\"><a href=\"#什么是一致性呢？\" class=\"headerlink\" title=\"什么是一致性呢？\"></a>什么是一致性呢？</h3><p>在分布式系统中，一致性(Consistency，早期也叫 Agreement)是指对于系统中的多个服务节点，给定一系列操作，在协议（ 往往通过某种共识算法） 保障下，试图使得它们对处理结果达成某种程度的一致。</p>\n<p>eg: **某影视公司旗下有西单和中关村的两个电影院，都出售某电影票，票一共就一万张。那么，顾客到达某个电影院买票的时候，售票员该怎么决策是否该卖这张票，才能避免超售呢？当电影院个数更多的时候呢？</p>\n<p>一些问题：</p>\n<ul>\n<li>如果两个影院各自卖出去一千张，那么达成的结果就是还剩八千张，而不能是其他的结果。</li>\n<li>现在就剩一张票了，中关村和西单的电影院也分别刚确认过这张票的存在，然后两个电影院同时来了一个顾客要买票，从各自“观察”看来，自己的顾客都是第一个到的……怎么能达成结果的共识呢？</li>\n</ul>\n<h2 id=\"2-区块链的核心优势\"><a href=\"#2-区块链的核心优势\" class=\"headerlink\" title=\"2. 区块链的核心优势\"></a>2. 区块链的核心优势</h2><ol>\n<li>任何节点都可以创建交易，在经过一段时间的确认之后，就可以合理地确认该交易是否为有效，区块链可有效地防止双花问题的发生。</li>\n<li>对于试图重写或者修改交易记录而言，它的成本是非常高的。</li>\n<li>区块链实现了两种记录：交易（transactions）以及区块（blocks）。交易是被存储在区块链上的实际数据，而区块则是记录确认某些交易是在何时，以及以何种顺序成为区块链数据库的一部分。交易是由参与者在正常过程中使用系统所创建的（在加密数字货币的例子中，一笔交易是由bob将代币发送给alice所创建的），而区块则是由我们称之为矿工（miners）的单位负责创建。</li>\n</ol>\n<h2 id=\"3-区块链的工作原理\"><a href=\"#3-区块链的工作原理\" class=\"headerlink\" title=\"3. 区块链的工作原理\"></a>3. 区块链的工作原理</h2><p>####　１. 什么是区块</p>\n<p>数据通过称之为<strong>区块(block)</strong>的文件，永久记录在数字货币网络上。它们好比是一个股票交易账本。新的区块会被添加到记录（区块链）的末端，而且一旦书写就很难修改或移除。区块很像数据库的记录，每次写入数据，就是创建一个区块。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-21e2db6ece302d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Blockchain\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-9191f39f65210938.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p>每个区块包含两个部分:</p>\n<ul>\n<li>区块头（Head）：记录当前区块的元信息<ul>\n<li>生成时间戳</li>\n<li>实际数据（即区块体）的<strong>哈希值</strong></li>\n<li>上一个区块的 <strong>哈希值</strong></li>\n<li>…</li>\n</ul>\n</li>\n<li>区块体（Body）：实际数据</li>\n</ul>\n<h4 id=\"2-Hash-不可修改性\"><a href=\"#2-Hash-不可修改性\" class=\"headerlink\" title=\"2. Hash 不可修改性\"></a>2. Hash 不可修改性</h4><p>Hash: 所谓 Hash 就是计算机可以对任意内容，计算出一个长度相同的特征值。区块链的 Hash 长度是256位，这就是说，不管原始内容是什么，最后都会计算出一个256位的二进制数字。而且可以保证，只要原始内容不同，对应的 Hash 一定是不同的。</p>\n<p>举例来说，字符串<code>123</code>的 Hash 是<code>a8fdc205a9f19cc1c7507a60c4f01b13d11d7fd0</code>（十六进制），转成二进制就是256位，而且只有<code>123</code>能得到这个 Hash。</p>\n<p>因此，就有两个重要的推论：</p>\n<ul>\n<li>推论1：每个区块的 Hash 都是不一样的，区块与 Hash 是一一对应的。</li>\n<li>推论2：如果区块的内容变了，它的 Hash 一定会改变。</li>\n</ul>\n<p>区块Hash计算公式：</p>\n<blockquote>\n<p>Hash = SHA256(区块头)</p>\n</blockquote>\n<p><code>SHA256</code>是区块链的 Hash 算法。</p>\n<p>前面说过，区块头包含很多内容，其中有当前区块体的 Hash（注意是”区块体”的 Hash，而不是整个区块），还有<strong>上一个区块的 Hash</strong>。这意味着，如果当前区块的内容变了，或者上一个区块的 Hash 变了，一定会引起当前区块的 Hash 改变。</p>\n<p>这一点对区块链有重大意义。如果有人修改了一个区块，该区块的 Hash 就变了。为了让后面的区块还能连到它，该人必须同时修改后面所有的区块，否则被改掉的区块就脱离区块链了。由于后面要提到的原因，Hash 的计算很耗时，同时修改多个区块几乎不可能发生，除非有人掌握了全网51%以上的计算能力。</p>\n<p>正是通过这种联动机制，区块链保证了自身的可靠性，数据一旦写入，就无法被篡改。</p>\n<h4 id=\"3-区块链分叉\"><a href=\"#3-区块链分叉\" class=\"headerlink\" title=\"3. 区块链分叉\"></a>3. 区块链分叉</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-cec738aca4b518e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Blockchain\"></p>\n<p>即使区块链是可靠的，那么有一个问题是：如果两个人同时向区块链写入数据，也就是说，同时有两个区块加入，因为它们都连着前一个区块，就形成了分叉。这时应该采纳哪一个区块呢？</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-3263453fd65e045e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<blockquote>\n<p>“长度”（Length）指区块链的累计计算难度，而不是是区块数目。当包括在链中的所有区块以及交易都有效，且是从创世区块开始的链，才是被我们承认的有效区块链。</p>\n</blockquote>\n<p>解决的办法是，每一个节点总是选择并尝试延长<strong>最长的或最大累计难度的链</strong>(累计了最大工作量证明的区块链)。节点通过将记录在每个区块中的难度加总起来，得到建立这个链所要付出的工作量证明的总量。只要所有的节点选择最长累计难度的区块链，整个比特币网络最终会收敛到一致的状态。分叉即在不同区块链间发生的临时差异，当更多的区块添加到了某个分叉中，这个问题便会迎刃而解。</p>\n<h2 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4. 小结\"></a>4. 小结</h2><p>区块链作为无人管理的分布式数据库，从2009年开始已经运行了8年，没有出现大的问题。这证明它是可行的。</p>\n<p>但是，为了保证数据的可靠性，区块链也有自己的代价。</p>\n<ul>\n<li>效率，数据写入区块链，最少要等待十分钟，所有节点都同步数据，则需要更多的时间；</li>\n<li>能耗，区块的生成需要矿工进行无数无意义的计算，这是非常耗费能源的。</li>\n</ul>\n<p>因此，区块链的适用场景，其实非常有限。</p>\n<blockquote>\n<ol>\n<li>不存在所有成员都信任的管理当局</li>\n<li>写入的数据不要求实时使用</li>\n<li>挖矿的收益能够弥补本身的成本</li>\n</ol>\n</blockquote>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html\" target=\"_blank\" rel=\"noopener\">区块链入门教程</a></li>\n<li><a href=\"http://www.8btc.com/what-is-blockchain\" target=\"_blank\" rel=\"noopener\">区块链是什么</a></li>\n</ul>\n","categories":["分布式"],"tags":["分布式","区块链","blockchain","科普"]},{"title":"golang 学习传送门","url":"http://mu-mo.top/2017/12/29/Golang/golang-学习传送门/","content":"<p>参考  <a href=\"https://golang.org/doc/effective_go.html\" target=\"_blank\" rel=\"noopener\">effective_go</a></p>\n<h3 id=\"项目目录结构规范\"><a href=\"#项目目录结构规范\" class=\"headerlink\" title=\"项目目录结构规范\"></a>项目目录结构规范</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PROJECT_NAME</span><br><span class=\"line\">├── README.md 介绍软件及文档入口</span><br><span class=\"line\">├── bin 编译好的二进制文件,执行./build.sh自动生成，该目录也用于程序打包</span><br><span class=\"line\">├── build.sh 自动编译的脚本</span><br><span class=\"line\">├── doc 该项目的文档</span><br><span class=\"line\">├── pack 打包后的程序放在此处</span><br><span class=\"line\">├── pack.sh 自动打包的脚本，生成类似xxxx.20170713_14:45:35.tar.gz的文件，放在pack文件下</span><br><span class=\"line\">└── src 该项目的源代码</span><br><span class=\"line\">    ├── main 项目主函数</span><br><span class=\"line\">    ├── model 项目代码</span><br><span class=\"line\">    ├── research 在实现该项目中探究的一些程序</span><br><span class=\"line\">    └── vendor 存放go的库</span><br><span class=\"line\">        ├── github.com/xxx 第三方库</span><br><span class=\"line\">        └── xxx.com/obc 公司内部的公共库</span><br></pre></td></tr></table></figure>\n<p>项目的目录结构尽量做到简明、层次清楚</p>\n<h4 id=\"文件名命名规范\"><a href=\"#文件名命名规范\" class=\"headerlink\" title=\"文件名命名规范\"></a>文件名命名规范</h4><p>用小写，尽量见名思义，看见文件名就可以知道这个文件下的大概内容，对于源代码里的文件，文件名要很好的代表了一个模块实现的功能。</p>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><h4 id=\"包名\"><a href=\"#包名\" class=\"headerlink\" title=\"包名\"></a>包名</h4><p>包名用小写,使用短命名,尽量和标准库不要冲突</p>\n<h4 id=\"接口名\"><a href=\"#接口名\" class=\"headerlink\" title=\"接口名\"></a>接口名</h4><p>单个函数的接口名以”er”作为后缀，如Reader,Writer</p>\n<p>接口的实现则去掉“er”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">type Reader interface &#123;</span><br><span class=\"line\">        Read(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个函数的接口名综合两个函数名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">type WriteFlusher interface &#123;</span><br><span class=\"line\">    Write([]byte) (int, error)</span><br><span class=\"line\">    Flush() error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>三个以上函数的接口名，类似于结构体名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">type Car interface &#123;</span><br><span class=\"line\">    Start([]byte) </span><br><span class=\"line\">    Stop() error</span><br><span class=\"line\">    Recover()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>全局变量：采用驼峰命名法，仅限在包内的全局变量，包外引用需要写接口，提供调用 局部变量：驼峰式，小写字母开头</p>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><p>常量：大写，采用下划线</p>\n<h3 id=\"import-规范\"><a href=\"#import-规范\" class=\"headerlink\" title=\"import 规范\"></a>import 规范</h3><p>import在多行的情况下，goimports会自动帮你格式化，在一个文件里面引入了一个package，建议采用如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import (</span><br><span class=\"line\">    &quot;encoding/json&quot;</span><br><span class=\"line\">    &quot;strings&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;myproject/models&quot;</span><br><span class=\"line\">    &quot;myproject/controller&quot;</span><br><span class=\"line\">    &quot;git.obc.im/obc/utils&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;git.obc.im/dep/beego&quot;</span><br><span class=\"line\">    &quot;git.obc.im/dep/mysql&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>在项目中不要使用相对路径引入包：</p>\n<p>// 这是不好的导入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import “../net”</span><br></pre></td></tr></table></figure>\n<p>// 这是正确的做法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import “xxxx.com/proj/net”</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数名\"><a href=\"#函数名\" class=\"headerlink\" title=\"函数名\"></a>函数名</h4><p>函数名采用驼峰命名法，尽量不要使用下划线</p>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>error作为函数的值返回,必须尽快对error进行处理<br>采用独立的错误流进行处理<br>不要采用这种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    // error handling</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // normal code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而要采用下面的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    // error handling</span><br><span class=\"line\">    return // or continue, etc.</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// normal code</span><br></pre></td></tr></table></figure>\n<p>如果返回值需要初始化，则采用下面的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">x, err := f()</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    // error handling</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// use x</span><br></pre></td></tr></table></figure>\n<h3 id=\"Panic\"><a href=\"#Panic\" class=\"headerlink\" title=\"Panic\"></a>Panic</h3><p>在逻辑处理中禁用panic<br>在main包中只有当实在不可运行的情况采用panic，例如文件无法打开，数据库无法连接导致程序无法 正常运行，但是对于其他的package对外的接口不能有panic，只能在包内采用。 建议在main包中使用log.Fatal来记录错误，这样就可以由log来结束程序。</p>\n<h3 id=\"Recover\"><a href=\"#Recover\" class=\"headerlink\" title=\"Recover\"></a>Recover</h3><p>recover用于捕获runtime的异常，禁止滥用recover，在开发测试阶段尽量不要用recover，recover一般放在你认为会有不可预期的异常的地方。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">func server(workChan &lt;-chan *Work) &#123;</span><br><span class=\"line\">    for work := range workChan &#123;</span><br><span class=\"line\">        go safelyDo(work)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func safelyDo(work *Work) &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        if err := recover(); err != nil &#123;</span><br><span class=\"line\">            log.Println(&quot;work failed:&quot;, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    // do 函数可能会有不可预期的异常</span><br><span class=\"line\">    do(work)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Defer\"><a href=\"#Defer\" class=\"headerlink\" title=\"Defer\"></a>Defer</h3><p>defer在函数return之前执行，对于一些资源的回收用defer是好的，但也禁止滥用defer，defer是需要消耗性能的,所以频繁调用的函数尽量不要使用defer。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Contents returns the file&apos;s contents as a string.</span><br><span class=\"line\">func Contents(filename string) (string, error) &#123;</span><br><span class=\"line\">    f, err := os.Open(filename)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return &quot;&quot;, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer f.Close()  // f.Close will run when we&apos;re finished.</span><br><span class=\"line\"></span><br><span class=\"line\">    var result []byte</span><br><span class=\"line\">    buf := make([]byte, 100)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := f.Read(buf[0:])</span><br><span class=\"line\">        result = append(result, buf[0:n]...) // append is discussed later.</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            if err == io.EOF &#123;</span><br><span class=\"line\">                break</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return &quot;&quot;, err  // f will be closed if we return here.</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(result), nil // f will be closed if we return here.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制结构\"><a href=\"#控制结构\" class=\"headerlink\" title=\"控制结构\"></a>控制结构</h3><h4 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h4><p>if接受初始化语句，约定如下方式建立局部变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if err := file.Chmod(0664); err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h4><p>采用短声明建立局部变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sum := 0</span><br><span class=\"line\">for i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h4><p>如果只需要第一项（key），就丢弃第二个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for key := range m &#123;</span><br><span class=\"line\">    if key.expired() &#123;</span><br><span class=\"line\">        delete(m, key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果只需要第二项，则把第一项置为下划线</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sum := 0</span><br><span class=\"line\">for _, value := range array &#123;</span><br><span class=\"line\">    sum += value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h4><p>尽早return：一旦有错误发生，马上返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">f, err := os.Open(name)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">d, err := f.Stat()</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    f.Close()</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">codeUsing(f, d)</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法的接收器\"><a href=\"#方法的接收器\" class=\"headerlink\" title=\"方法的接收器\"></a>方法的接收器</h3><p>名称 一般采用strcut的第一个字母且为小写，而不是this，me或者self</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">type T struct&#123;&#125; </span><br><span class=\"line\">func (p *T)Get()&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>如果接收者是map,slice或者chan，不要用指针传递</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//Map</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type mp map[string]string</span><br><span class=\"line\"></span><br><span class=\"line\">func (m mp) Set(k, v string) &#123;</span><br><span class=\"line\">    m[k] = v</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    m := make(mp)</span><br><span class=\"line\">    m.Set(&quot;k&quot;, &quot;v&quot;)</span><br><span class=\"line\">    fmt.Println(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//Channel</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type ch chan interface&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c ch) Push(i interface&#123;&#125;) &#123;</span><br><span class=\"line\">    c &lt;- i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c ch) Pop() interface&#123;&#125; &#123;</span><br><span class=\"line\">    return &lt;-c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    c := make(ch, 1)</span><br><span class=\"line\">    c.Push(&quot;i&quot;)</span><br><span class=\"line\">    fmt.Println(c.Pop())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要对slice进行修改，通过返回值的方式重新赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//Slice</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type slice []byte</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    s := make(slice, 0)</span><br><span class=\"line\">    s = s.addOne(42)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (s slice) addOne(b byte) []byte &#123;</span><br><span class=\"line\">    return append(s, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果接收者是含有sync.Mutex或者类似同步字段的结构体，必须使用指针传递避免复制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;sync&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type T struct &#123;</span><br><span class=\"line\">    m sync.Mutex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (t *T) lock() &#123;</span><br><span class=\"line\">    t.m.Lock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">Wrong !!!</span><br><span class=\"line\">func (t T) lock() &#123;</span><br><span class=\"line\">    t.m.Lock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    t := new(T)</span><br><span class=\"line\">    t.lock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果接收者是大的结构体或者数组，使用指针传递会更有效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type T struct &#123;</span><br><span class=\"line\">    data [1024]byte</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (t *T) Get() byte &#123;</span><br><span class=\"line\">    return t.data[0]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    t := new(T)</span><br><span class=\"line\">    fmt.Println(t.Get())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：转载自：<a href=\"https://sheepbao.github.io/post/golang_code_specification/\" target=\"_blank\" rel=\"noopener\">https://sheepbao.github.io/post/golang_code_specification/</a></p>\n","categories":["golang"],"tags":["golang","portal"]},{"title":"学习笔记6","url":"http://mu-mo.top/2017/12/28/学习笔记/学习笔记6/","content":"<h2 id=\"1-分布式系统核心问题\"><a href=\"#1-分布式系统核心问题\" class=\"headerlink\" title=\"1. 分布式系统核心问题\"></a>1. 分布式系统核心问题</h2><p>   参考书籍：《<a href=\"https://item.jd.com/12159265.html\" target=\"_blank\" rel=\"noopener\">区块链原理、设计与应用</a>》</p>\n<ol>\n<li><p>一致性问题</p>\n<p>例子：两个不同的电影院买同一种电影票，如何避免超售？如何保持两个电影院数据一致？</p>\n<p><strong>挑战</strong></p>\n<ul>\n<li>节点之间的网络通讯是不可靠的，包括任意延迟和内容故障；</li>\n<li>节点的处理可能是错误的，甚至节点自身随时可能宕机；</li>\n<li>同步调用会让系统变得不具备可扩展性。</li>\n</ul>\n<p><strong>要求</strong></p>\n<ul>\n<li><p>可终止性（Termination）：一致的结果在有限时间内能完成；</p>\n</li>\n<li><p>共识性（Consensus）：不同节点最终完成决策的结果应该相同；</p>\n<blockquote>\n<p>eg：现在就剩一张票了，两个电影院也分别刚确认过这张票的存在，然后两个电影院同时来了一个顾客要买票，从各自“观察”看来，自己的顾客都是第一个到的……怎么能达成结果的共识呢？记住我们的唯一秘诀：核心在于需要<strong>把两件事情进行排序，而且这个顺序还得是大家都认可的</strong>。</p>\n</blockquote>\n</li>\n<li><p>合法性（Validity）：决策的结果必须是其它进程提出的提案。</p>\n</li>\n</ul>\n</li>\n<li><p>共识算法</p>\n<blockquote>\n<p> 保障分布式系统的一致性，需要通过共识算法来实现。</p>\n</blockquote>\n<p>简述：对某个提案，大家达成一致的过程。</p>\n</li>\n<li><p>FLP 不可能性原理</p>\n<blockquote>\n<p> FLP 不可能原理：在网络可靠，存在节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性算法。</p>\n</blockquote>\n<p>eg: 三个人在不同房间，进行投票（投票结果是 0 或者 1）。三个人彼此可以通过电话进行沟通，但经常会有人时不时地睡着。比如某个时候，A 投票 0，B 投票 1，C 收到了两人的投票，然后 C 睡着了。A 和 B 则永远无法在有限时间内获知最终的结果。</p>\n<p>FLP原理只是最坏的情况下，但是我们可以付出一些代价来提高成功的概率。</p>\n</li>\n<li><p>CAP 原理</p>\n<p>分布式计算系统不可能同时确保一致性（Consistency）、可用性（Availablity）和分区容忍性（Partition），设计中往往需要<strong>弱化对某个特性的保证</strong>。</p>\n<ul>\n<li><p>一致性（Consistency）：任何操作应该都是原子的，发生在后面的事件能看到前面事件发生导致的结果，注意这里指的是强一致性；</p>\n</li>\n<li><p>可用性（Availablity）：在有限时间内，任何非失败节点都能应答请求；</p>\n</li>\n<li><p>分区容忍性（Partition）：集群中的某些节点在无法联系后，集群整体是否还能继续进行服务。</p>\n<blockquote>\n<p>分隔容忍(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)</p>\n</blockquote>\n</li>\n</ul>\n<p>应用：</p>\n<p>网络中会经常会出现延迟丢包等问题，所以分区容忍性一般不会弱化。</p>\n<ul>\n<li><p>弱化一致性</p>\n<p>对结果一致性不敏感的应用，可以允许在新版本上线后过一段时间才更新成功，期间不保证一致性。</p>\n</li>\n<li><p>弱化可用性</p>\n<p>对结果一致性很敏感的应用，例如银行取款机，当系统故障时候会拒绝服务。</p>\n</li>\n</ul>\n</li>\n<li><p>ACID 原则</p>\n<p>ACID 原则描述了对分布式数据库的一致性需求，同时付出了可用性的代价。</p>\n<ul>\n<li>原子性（Atomicity）：每次操作是原子的，要么成功，要么不执行；</li>\n<li>一致性（Consistency）：数据库的状态是一致的，无中间状态；</li>\n<li>隔离性（Isolation）：各种操作彼此互相不影响；</li>\n<li>持久性（Durability）：状态的改变是持久的，不会失效。</li>\n</ul>\n<blockquote>\n<p>一个与之相对的原则是 BASE（Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）），牺牲掉对一致性的约束（最终一致性），来换取一定的可用性。</p>\n</blockquote>\n</li>\n<li><p>Paxos 与 Raft</p>\n<ul>\n<li><p>Paxos</p>\n<blockquote>\n<p> 问题背景：古希腊 Paxon 岛上的多个法官在一个大厅内对一个议案进行表决，如何达成统一的结果。他们之间通过服务人员来传递纸条，但法官可能离开或进入大厅，服务人员可能偷懒去睡觉。</p>\n</blockquote>\n<p>算法中将节点分为三种类型：</p>\n<ul>\n<li>proposer：提出一个提案，等待大家批准为结案。往往是客户端担任该角色；</li>\n<li>acceptor：负责对提案进行投票。往往是服务端担任该角色；</li>\n<li>learner：被告知结案结果，并与之统一，不参与投票过程。可能为客户端或服务端。</li>\n</ul>\n<p>算法需要满足 safety 和 liveness 两方面的约束要求：</p>\n<ul>\n<li>safety：保证决议结果是对的，无歧义的，不会出现错误情况。<ul>\n<li>决议（value）只有在被 proposers 提出的 proposal 才能被最终批准；</li>\n<li>在一次执行实例中，只批准（chosen）一个最终决议，意味着多数接受（accept）的结果能成为决议；</li>\n</ul>\n</li>\n<li>liveness：保证决议过程能在有限时间内完成。<ul>\n<li>决议总会产生，并且 learners 能获得被批准（chosen）的决议。</li>\n</ul>\n</li>\n</ul>\n<p><strong>基本过程</strong>包括 proposer 提出提案，先争取大多数 acceptor 的支持，超过一半支持时，则发送结案结果给所有人进行确认。一个潜在的问题是 proposer 在此过程中出现故障，可以通过超时机制来解决。极为凑巧的情况下，每次新的一轮提案的 proposer 都恰好故障，系统则永远无法达成一致（概率很小）。</p>\n<p>Paxos 能保证在超过 <img src=\"http://upload-images.jianshu.io/upload_images/7109326-b50ffd7b915fcef9.latex?imageMogr2/auto-orient/strip\" alt=\"img\"> 的正常节点存在时，系统能达成共识。</p>\n</li>\n<li><p>Raft</p>\n<p>Raft 算法是Paxos 算法的一种简化实现。</p>\n<p>包括三种角色：leader、candidate 和 follower，其基本过程为：</p>\n<ol>\n<li>Leader 选举：每个 candidate 随机经过一定时间都会提出选举方案，最近阶段中得票最多者被选为 leader；</li>\n<li>同步事件记录 log：leader 会找到系统中 log 最新的记录，并强制所有的 follower 来刷新到这个记录。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>拜占庭问题</p>\n<blockquote>\n<p>拜占庭是古代东罗马帝国的首都，由于地域宽广，守卫边境的多个将军（系统中的多个节点）需要通过信使来传递消息，达成某些一致的决定。但由于将军中可能存在叛徒（系统中节点出错），这些叛徒将努力向不同的将军发送不同的消息，试图会干扰一致性的达成。</p>\n<p><em>拜占庭问题即为在此情况下，如何让忠诚的将军们能达成行动的一致?</em></p>\n</blockquote>\n<p><strong>Byzantine Fault Tolerant (BFT) 算法</strong> </p>\n<p>​    BFT算法保证所有正常的replicas节点<strong>执行相同序列的操作</strong>。因为所有的replicas节点都是deterministic，而且初始状态都相同，根据状态机原理（state machine replication），这些replicas会产生相同的结果状态。当Client收到f+1个replicas节点返回的结果时，如果这些结果都一样，因为BFT算法确保了最多有f个replicas出现问题，所以至少有一个replicas是正确的，那么Client收到的这些结果都是正确的。</p>\n<p><strong>其他解决思路：</strong></p>\n<p>问题由来：系统存在多个提案，一致确认困难</p>\n<p>PoW（Proof of Work） 算法思路：</p>\n<ol>\n<li>增加提案成本（限制了提案数量）</li>\n<li>放宽对最终一致性确认的需求，约定好大家都确认并沿着已知最长的链进行拓宽。</li>\n</ol>\n<p>注：系统的最终确认是概率意义上的存在。这样，即便有人试图恶意破坏，也会付出很大的经济代价（付出超过系统一半的算力）。</p>\n</li>\n<li><p>可靠性指标</p>\n<p>下表给出不同指标下，每年允许服务出现不可用时间的参考值。</p>\n<p>| 指标   | 概率可靠性       | 每年允许不可用时间 | 典型场景 |<br>| —- | ———– | ——— | —- |<br>| 一个九  | 90%         | 1.2 个月    | 不可用  |<br>| 二个九  | 99%         | 3.6 天     | 普通单点 |<br>| 三个九  | 99.9%       | 8.6 小时    | 普通企业 |<br>| 四个九  | 99.99%      | 51.6 分钟   | 高可用  |<br>| 五个九  | 99.999%     | 5 分钟      | 电信级  |<br>| 六个九  | 99.9999%    | 31 秒      | 极高要求 |<br>| 七个九  | 99.99999%   | 3 秒       | N/A  |<br>| 八个九  | 99.999999%  | 0.3 秒     | N/A  |<br>| 九个九  | 99.9999999% | 30 毫秒     | N/A  |</p>\n</li>\n</ol>\n<h2 id=\"2-Raft算法\"><a href=\"#2-Raft算法\" class=\"headerlink\" title=\"2. Raft算法\"></a>2. Raft算法</h2><p><strong>参考学习链接</strong>：</p>\n<ul>\n<li><a href=\"https://raft.github.io/\" target=\"_blank\" rel=\"noopener\">Raft官网</a></li>\n<li><a href=\"https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf\" target=\"_blank\" rel=\"noopener\">论文英文pdf地址</a></li>\n<li><a href=\"https://github.com/maemual/raft-zh_cn/blob/master/raft-zh_cn.md\" target=\"_blank\" rel=\"noopener\">Raft算法论文中文翻译</a></li>\n<li><a href=\"http://thesecretlivesofdata.com/raft/\" target=\"_blank\" rel=\"noopener\">Raft算法动画演示</a> </li>\n<li><a href=\"https://www.jianshu.com/p/4711c4c32aab\" target=\"_blank\" rel=\"noopener\">Raft理解</a></li>\n</ul>\n<p><strong>Raft 算法实现推荐</strong>：</p>\n<ul>\n<li><a href=\"http://nil.csail.mit.edu/6.824/2016/\" target=\"_blank\" rel=\"noopener\">MIT-6.824-2016: Distributed Systems</a></li>\n<li><a href=\"https://thesquareplanet.com/blog/students-guide-to-raft/\" target=\"_blank\" rel=\"noopener\">Students’ Guide to Raft </a></li>\n</ul>\n<p>其他：<a href=\"https://www.jianshu.com/p/542262237d55\" target=\"_blank\" rel=\"noopener\">状态机</a></p>\n<h4 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h4><p>Raft 是一种为了管理复制日志的一致性算法。它提供了和 Paxos 算法相同的功能和性能，但是它的算法结构和 Paxos 不同，使得 Raft 算法更加容易理解并且更容易构建实际的系统。Raft 将一致性算法分解成了几个关键模块，例如 <strong>领导人选举、日志复制和安全性</strong> 。</p>\n<h4 id=\"2-Raft基础\"><a href=\"#2-Raft基础\" class=\"headerlink\" title=\"2. Raft基础\"></a>2. Raft基础</h4><p>服务器节点的三种状态：</p>\n<ul>\n<li><p>Leader（领导人）</p>\n<p>通常情况下，系统中只有一个领导人，其他节点都是跟随者。领导人处理所有的客户端请求（如果一个客户端和跟随者联系，那么跟随者会把请求重定向给领导人）。</p>\n</li>\n<li><p>Follower（跟随者）</p>\n<p>跟随者不会发送任何请求，只是简单的响应来自领导者或者候选人的请求。如果跟随者接收不到消息，那么他就会变成候选人并发起一次选举。</p>\n</li>\n<li><p>Candidate（候选人）</p>\n<p>获得集群中大多数选票的候选人将成为领导者。</p>\n</li>\n</ul>\n<p>下面是这三种状态的转化过程：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-875f4efc27bb7b87?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图 4 \"></p>\n<blockquote>\n<p>跟随者只响应来自其他服务器的请求。如果跟随者接收不到消息，那么他就会变成候选人并发起一次选举。获得集群中大多数选票的候选人将成为领导者。在一个任期内,领导人一直都会是领导人直到自己宕机了。</p>\n</blockquote>\n<h4 id=\"3-领导人选举\"><a href=\"#3-领导人选举\" class=\"headerlink\" title=\"3. 领导人选举\"></a>3. 领导人选举</h4><p>可参考 <a href=\"https://raft.github.io/\" target=\"_blank\" rel=\"noopener\">官方可视化动画1</a>  <a href=\"http://thesecretlivesofdata.com/raft/\" target=\"_blank\" rel=\"noopener\">官方可视化动画2</a></p>\n<ul>\n<li><p>触发选举</p>\n<p>Raft 使用一种心跳机制来触发领导人选举。触发有两种情况：</p>\n<ol>\n<li>初始状态时，所有服务器节点都是跟随者，并且随机睡眠一段时间，这个时间在0~1000ms之间。最先醒来的server A进入 Candidate 状态，触发选举。</li>\n<li>领导者周期性的向所有跟随者发送心跳包（即不包含日志项内容的附加日志项 RPCs）来维持自己的权威。如果一个跟随者在一段时间里没有接收到任何消息，也就是<strong>选举超时</strong>，那么这时触发选举以选出新的领导者。</li>\n</ol>\n</li>\n<li><p>选举</p>\n<p>要开始一次选举过程，跟随者先要增加自己的 <strong>当前任期号</strong> 并且转换到候选人状态。然后他会并行的向集群中的其他服务器节点发送请求投票的 RPCs 来给自己投票。当一个候选人从整个集群的大多数服务器节点（一半以上）获得了针对同一个任期号的选票，那么他就赢得了这次选举并成为领导人。每一个服务器最多会对一个任期号投出一张选票，按照先来先服务的原则。</p>\n<p>在等待投票的时候，候选人可能会从其他的服务器接收到声明它是领导人的附加日志项 RPC。如果这个领导人的任期号（包含在此次的 RPC中）不小于候选人当前的任期号，那么候选人会承认领导人合法并回到跟随者状态。 如果此次 RPC 中的任期号比自己小，那么候选人就会拒绝这次的 RPC 并且继续保持候选人状态。</p>\n<blockquote>\n<p> 如果有多个跟随者同时成为候选人，那么选票可能会被瓜分以至于没有候选人可以赢得大多数人的支持。当这种情况发生的时候，每一个候选人都会超时，然后通过增加当前任期号来开始一轮新的选举。</p>\n</blockquote>\n</li>\n<li><p>选举之后</p>\n<p>一旦候选人赢得选举，他就立即成为领导人。然后他会向其他的服务器发送心跳消息来建立自己的权威并且阻止新的领导人的产生。</p>\n</li>\n</ul>\n<h4 id=\"4-日志复制\"><a href=\"#4-日志复制\" class=\"headerlink\" title=\"4. 日志复制\"></a>4. 日志复制</h4><ol>\n<li><p>复制过程</p>\n<p>Leader选举出来后，就可以开始处理客户端请求。Leader收到客户端请求后，将请求内容作为一条log日志添加到自己的log记录中，并向其它server发送RPCs(添加日志)请求。其它server收到请求后，如果满足条件就将其添加到本地的log中，并给Leader发送添加成功的response。Leader在收到大多数server添加成功的response后，就将该条log正式提交到状态机中。</p>\n</li>\n<li><p>一致性保持</p>\n<p>当一个领导人刚获得权力的时候，他初始化所有的 nextIndex 值为自己的最后一条日志的index（索引）加1。如果一个跟随者的日志和领导人不一致，那么在下一次的附加日志 RPC 时的一致性检查就会失败。在被跟随者拒绝之后，领导人就会减小 nextIndex 值并进行重试。最终 nextIndex 会在某个位置使得领导人和跟随者的日志达成一致。当这种情况发生，附加日志 RPC 就会成功，这时就会把跟随者冲突的日志条目全部删除并且加上领导人的日志。一旦附加日志 RPC 成功，那么跟随者的日志就会和领导人保持一致，并且在接下来的任期里一直继续保持。</p>\n</li>\n</ol>\n<h4 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5. 安全性\"></a>5. 安全性</h4><ol>\n<li><p>选举限制</p>\n<p>候选人为了赢得选举必须联系集群中的大部分节点，这意味着每一个已经提交的日志条目在这些服务器节点中肯定存在于至少一个节点上。如果候选人的日志至少和大多数的服务器节点一样新，那么他一定持有了所有已经提交的日志条目。请求投票 RPC 实现了这样的限制： RPC 中包含了候选人的日志信息，然后投票人会拒绝掉那些日志没有自己新的投票请求。</p>\n<blockquote>\n<p>Raft 通过比较两份日志中最后一条日志条目的索引值和任期号定义谁的日志比较新。如果两份日志最后的条目的任期号不同，那么任期号大的日志更加新。如果两份日志最后的条目任期号相同，那么日志比较长的那个就更加新。</p>\n</blockquote>\n</li>\n<li><p>提交之前任期内的日志条目</p>\n<p>领导人知道一条当前任期内的日志记录是可以被提交的，只要它被存储到了大多数的服务器上。如果一个领导人在提交日志条目之前崩溃了，未来后续的领导人会继续尝试复制这条日志记录。然而，一个领导人不能断定一个之前任期里的日志条目被保存到大多数服务器上的时候就一定已经提交了。图 8 展示了一种情况，一条已经被存储到大多数节点上的老日志条目，也依然有可能会被未来的领导人覆盖掉。</p>\n<p><a href=\"https://camo.githubusercontent.com/14df99e543c71ee75cafd614e1c55c25ac580ec8/68747470733a2f2f646e2d307830312d696f2e71626f782e6d652f726166742d254535253942254245382e706e67\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/7109326-d8e3264f19d4dc86?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图 8\"></a></p>\n<blockquote>\n<p>图 8：如图的时间序列展示了为什么领导人无法通过老的日志的任期号来判断其提交状态。在 (a) 中，S1 是领导者，部分的复制了索引位置 2 的日志条目。在 (b) 中，S1 崩溃了，然后 S5 在任期 3 里通过 S3、S4 和自己的选票赢得选举，然后从客户端接收了一条不一样的日志条目放在了索引 2 处。然后到 (c)，S5 又崩溃了；S1 重新启动，选举成功，开始复制日志。在这时，来自任期 2 的那条日志已经被复制到了集群中的大多数机器上，但是还没有被提交。如果 S1 在 (d) 中又崩溃了，S5 可以重新被选举成功（通过来自 S2，S3 和 S4 的选票），然后覆盖了他们在索引 2 处的日志。但是，在崩溃之前，如果 S1 在自己的任期里复制了日志条目到大多数机器上，如 (e) 中，然后这个条目就会被提交（S5 就不可能选举成功）。 在这个时候，之前的所有日志就会被正常提交处理。</p>\n</blockquote>\n<p>为了消除图 8 里描述的情况，Raft 永远不会通过计算副本数目的方式去提交一个之前任期内的日志条目。只有领导人当前任期里的日志条目通过计算副本数目可以被提交；一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配特性，之前的日志条目也都会被间接的提交。在某些情况下，领导人可以安全的知道一个老的日志条目是否已经被提交（例如，该条目是否存储到所有服务器上），但是 Raft 为了简化问题使用一种更加保守的方法。</p>\n<p>当领导人复制之前任期里的日志时，Raft 会为所有日志保留原始的任期号, 这在提交规则上产生了额外的复杂性。在其他的一致性算法中，如果一个新的领导人要重新复制之前的任期里的日志时，它必须使用当前新的任期号。Raft 使用的方法更加容易辨别出日志，因为它可以随着时间和日志的变化对日志维护着同一个任期编号。另外，和其他的算法相比，Raft 中的新领导人只需要发送更少日志条目。</p>\n</li>\n</ol>\n<p>####　6. Raft 算法实现指导</p>\n<p><strong>状态</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>所有服务器上持久存在的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentTerm</td>\n<td>服务器最后一次知道的任期号（初始化为 0，持续递增）</td>\n</tr>\n<tr>\n<td>votedFor</td>\n<td>在当前获得选票的候选人的 Id</td>\n</tr>\n<tr>\n<td>log[]</td>\n<td>日志条目集；每一个条目包含一个用户状态机执行的指令，和收到时的任期号</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>所有服务器上经常变的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>commitIndex</td>\n<td>已知的最大的已经被提交的日志条目的索引值</td>\n</tr>\n<tr>\n<td>lastApplied</td>\n<td>最后被应用到状态机的日志条目索引值（初始化为 0，持续递增）</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>在领导人里经常改变的 （选举后重新初始化）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nextIndex[]</td>\n<td>对于每一个服务器，需要发送给他的下一个日志条目的索引值（初始化为领导人最后索引值加一）</td>\n</tr>\n<tr>\n<td>matchIndex[]</td>\n<td>对于每一个服务器，已经复制给他的日志的最高索引值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>附加日志 RPC</strong>：</p>\n<p>由领导人负责调用来复制日志指令；也会用作heartbeat</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>term</td>\n<td>领导人的任期号</td>\n</tr>\n<tr>\n<td>leaderId</td>\n<td>领导人的 Id，以便于跟随者重定向请求</td>\n</tr>\n<tr>\n<td>prevLogIndex</td>\n<td>新的日志条目紧随之前的索引值</td>\n</tr>\n<tr>\n<td>prevLogTerm</td>\n<td>prevLogIndex 条目的任期号</td>\n</tr>\n<tr>\n<td>entries[]</td>\n<td>准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率）</td>\n</tr>\n<tr>\n<td>leaderCommit</td>\n<td>领导人已经提交的日志的索引值</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>term</td>\n<td>当前的任期号，用于领导人去更新自己</td>\n</tr>\n<tr>\n<td>success</td>\n<td>跟随者包含了匹配上 prevLogIndex 和 prevLogTerm 的日志时为真</td>\n</tr>\n</tbody>\n</table>\n<p>接收者实现：</p>\n<ol>\n<li>如果 <code>term &lt; currentTerm</code> 就返回 false （5.1 节）</li>\n<li>如果日志在 prevLogIndex 位置处的日志条目的任期号和 prevLogTerm 不匹配，则返回 false （5.3 节）</li>\n<li>如果已经存在的日志条目和新的产生冲突（索引值相同但是任期号不同），删除这一条和之后所有的 （5.3 节）</li>\n<li>附加任何在已有的日志中不存在的条目</li>\n<li>如果 <code>leaderCommit &gt; commitIndex</code>，令 commitIndex 等于 leaderCommit 和 新日志条目索引值中较小的一个</li>\n</ol>\n<p><strong>请求投票 RPC</strong>：</p>\n<p>由候选人负责调用用来征集选票（5.2 节）</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>term</td>\n<td>候选人的任期号</td>\n</tr>\n<tr>\n<td>candidateId</td>\n<td>请求选票的候选人的 Id</td>\n</tr>\n<tr>\n<td>lastLogIndex</td>\n<td>候选人的最后日志条目的索引值</td>\n</tr>\n<tr>\n<td>lastLogTerm</td>\n<td>候选人最后日志条目的任期号</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>term</td>\n<td>当前任期号，以便于候选人去更新自己的任期号</td>\n</tr>\n<tr>\n<td>voteGranted</td>\n<td>候选人赢得了此张选票时为真</td>\n</tr>\n</tbody>\n</table>\n<p>接收者实现：</p>\n<ol>\n<li>如果<code>term &lt; currentTerm</code>返回 false （5.2 节）</li>\n<li>如果 votedFor 为空或者就是 candidateId，并且候选人的日志至少和自己一样新，那么就投票给他（5.2 节，5.4 节）</li>\n</ol>\n<p><strong>所有服务器需遵守的规则</strong>：</p>\n<p>所有服务器：</p>\n<ul>\n<li>如果<code>commitIndex &gt; lastApplied</code>，那么就 lastApplied 加一，并把<code>log[lastApplied]</code>应用到状态机中（5.3 节）</li>\n<li>如果接收到的 RPC 请求或响应中，任期号<code>T &gt; currentTerm</code>，那么就令 currentTerm 等于 T，并切换状态为跟随者（5.1 节）</li>\n</ul>\n<p>跟随者（5.2 节）：</p>\n<ul>\n<li>响应来自候选人和领导者的请求</li>\n<li>如果在超过选举超时时间的情况之前都没有收到领导人的心跳，或者是候选人请求投票的，就自己变成候选人</li>\n</ul>\n<p>候选人（5.2 节）：</p>\n<ul>\n<li>在转变成候选人后就立即开始选举过程<ul>\n<li>自增当前的任期号（currentTerm）</li>\n<li>给自己投票</li>\n<li>重置选举超时计时器</li>\n<li>发送请求投票的 RPC 给其他所有服务器</li>\n</ul>\n</li>\n<li>如果接收到大多数服务器的选票，那么就变成领导人</li>\n<li>如果接收到来自新的领导人的附加日志 RPC，转变成跟随者</li>\n<li>如果选举过程超时，再次发起一轮选举</li>\n</ul>\n<p>领导人：</p>\n<ul>\n<li>一旦成为领导人：发送空的附加日志 RPC（心跳）给其他所有的服务器；在一定的空余时间之后不停的重复发送，以阻止跟随者超时（5.2 节）</li>\n<li>如果接收到来自客户端的请求：附加条目到本地日志中，在条目被应用到状态机后响应客户端（5.3 节）</li>\n<li>如果对于一个跟随者，最后日志条目的索引值大于等于 nextIndex，那么：发送从 nextIndex 开始的所有日志条目：<ul>\n<li>如果成功：更新相应跟随者的 nextIndex 和 matchIndex</li>\n<li>如果因为日志不一致而失败，减少 nextIndex 重试</li>\n</ul>\n</li>\n<li>如果存在一个满足<code>N &gt; commitIndex</code>的 N，并且大多数的<code>matchIndex[i] ≥ N</code>成立，并且<code>log[N].term == currentTerm</code>成立，那么令 commitIndex 等于这个 N </li>\n</ul>\n<h2 id=\"3-常识\"><a href=\"#3-常识\" class=\"headerlink\" title=\"3. 常识\"></a>3. 常识</h2><ul>\n<li><p>ftp/http/https/http 2.0</p>\n<ul>\n<li><p>通俗解释</p>\n<p>ftp: 文件传输的协议</p>\n<p>http: 网络交流的基础，凡是网络都需要它    </p>\n<p>https: 安全的http</p>\n<p>http 2.0:  http1.0 和 http 1.1 的升级版，反正就是解决了 前代 http 的一些问题</p>\n</li>\n<li><p>专业解释</p>\n<p>ftp: FTP 是 File Transfer Protocol（文件传输协议）的英文简称，用于控制文件在不同计算机之间的双向传输，如下载和上传，顾名思义 下载就是从远程服务器将文件copy到自己的本地，上传就是把本地文件copy到远程服务器上。</p>\n<p>http: 超文本传输协议（HTTP）是一种应用协议用于分布式，协作和超媒体信息系统，主要是一种<strong>请求 - 响应</strong> 协议。如: 浏览器的客户端向服务器提交HTTP <strong>请求</strong> 消息，服务器接到请求之后<strong>响应</strong>HTML文件和其他内容等资源。响应包含有关请求的完成状态信息，并且可能还包含消息正文中的请求内容等。</p>\n<p>https: HTTP的改进，用于通过计算机网络进行安全通信。在HTTPS，该通信协议被加密的传输层安全性（TLS），或以前，它的前身，安全套接字层（SSL）。HTTP没有加密，容易受到中间人和窃听攻击，攻击者可以窃取网站账户等敏感信息等。HTTPS旨在抵御此类攻击。</p>\n<p>http 2.0: <strong>HTTP / 2</strong> 是  HTTP 1.1 以来的第一个新版本。旨在解决 http 1.0 和 1.1 的一些问题。</p>\n<p>​    http 1.0 和 1.1 的一些问题：</p>\n<p>​        1、 单连接多资源的方式，减少服务端的链接压力,内存占用更少,连接吞吐量更大。</p>\n<p>​        2、不支持首部压缩</p>\n<p>​    http 2.0 优点：</p>\n<p>​       1、 多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息，不用依赖建立多个 TCP 连接。HTTP/2 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。从而是的拥塞状况得到改善。</p>\n<p>​       2、首部压缩，减少了数据大小</p>\n<p>​       3、在 HTTP/2 中，服务器可以对客户端的一个请求发送多个响应。</p>\n</li>\n</ul>\n</li>\n<li><p>tcp/ip</p>\n<ul>\n<li><p>通俗解释</p>\n<p>TCP负责保证数据安全正确地传输到目的地。而IP是每一台联网设备的一个唯一的地址。</p>\n</li>\n<li><p>专业解释</p>\n<p>TCP/IP 是供已连接因特网的计算机进行通信的通信协议， 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。</p>\n<p>该协议包含 TCP、UDP、IP、ICMP、DHCP等一系列协议。</p>\n<p>TCP是面向连接的通信协议，通过三次握手建立连接，四次挥手拆除连接。</p>\n<p>ip: Internet的网络地址是指连入Internet网络的计算机的地址编号。所以，在Internet网络中，网络地址唯一地标识一台计算机，如：123.37.0.200。</p>\n</li>\n</ul>\n</li>\n<li><p>gzip压缩</p>\n<ul>\n<li><p>通俗解释：把文件压缩为 .gz 格式，或者解压文件</p>\n</li>\n<li><p>专业解释</p>\n<p>语法：gzip [option] filename</p>\n<p>option:</p>\n<p>​    -c   将输出写到标准输出上，并保留原有文件。<br>​    -d  将压缩文件解压。<br>​     -l   对每个压缩文件，显示字段(不解压)：压缩文件的大小、未压缩文件的大小、压缩比、未压缩文件的名字<br>​     -r  递归式地查找指定目录并压缩其中的所有文件或者是解压缩。<br>​     -t  测试，检查压缩文件是否完整。<br>​     -v  对每一个压缩和解压的文件，显示文件名和压缩比。<br>​     -num 用指定的数字num调整压缩的速度，-1或–fast表示最快压缩方法（低压缩比），-9或–best表示最慢压缩方法（高压缩比）。系统缺省值为6。</p>\n<p><strong>注：gzip不能压缩整个目录。可以使用tar先打包，再压缩</strong></p>\n<p>eg: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar cf test.tar test/</span><br><span class=\"line\">gzip test.tar</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>nginx/cgi/uWSGI/php-fpm/fastcgi</p>\n<ul>\n<li><p>通俗解释</p>\n<p>nginx: 一个性能很高的服务器</p>\n<p>uWSGI: 一个web服务器 </p>\n<p>cgi: 写Web程序的标准</p>\n<p>php-fpm: 用与处理PHP请求的东西</p>\n</li>\n<li><p>专业解释</p>\n<p>nginx: 一个高性能的占有内存少，并发能力强的（反向）代理服务器</p>\n<p>uWSGI: uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。WSGI是一种Web服务器网关接口。它是一个Web服务器与web应用通信的一种规范。</p>\n<p>cgi: 一个通用的web标准。</p>\n<p>fastcgi: Web服务器和语言解释器(eg:uWsgi)两者底层的通信协议的规范，是对CGI的开放的扩展。</p>\n<p>php-fpm: 全称是php fastcgi process manager即php fastcgi进程管理器，相比fastcgi静态的唤起cgi，fpm能根据访问的压力动态的唤起cgi进程和销毁以到达动态的调整cgi数量，这样可以有效的使用内存。其他优点：fpm还可以平滑的重载php配置；不用再配置cgi端口；有更好的状态输出和slowlog日志，502的时候能给出更多的错误细节。</p>\n</li>\n</ul>\n</li>\n<li><p>高阶函数/函数柯里化</p>\n<ul>\n<li><p>通俗解释</p>\n<p>高阶函数：从一个函数映射到另一个函数</p>\n<p>函数柯里化：多参数的函数简化为单参数的函数的过程</p>\n</li>\n<li><p>专业解释</p>\n<p>高阶函数：满足下列一个或者两个条件的函数:</p>\n<ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数</li>\n</ul>\n<p>函数柯里化：柯里化(Currying)指的是将原来接受多个参数的函数变成新的接受一个参数的函数的过程。</p>\n<p>eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"comment\">// 柯里化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addCurry = curry(add)</span><br><span class=\"line\">addCurry(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>函数式编程</p>\n<p>通俗解释：是一种编写程序的方法论，也就是教我们怎么写程序的</p>\n<p>专业解释：一种 <a href=\"http://en.wikipedia.org/wiki/Programming_paradigm\" target=\"_blank\" rel=\"noopener\">编程范式</a> ，属于一种 <a href=\"http://en.wikipedia.org/wiki/Structured_programming\" target=\"_blank\" rel=\"noopener\">结构化编程</a> </p>\n<p>思想：把运算过程写成一系列嵌套的函数调用</p>\n<p>eg: </p>\n<p>​    数学表达式 ： <code>(1 + 2) * 3 - 4</code></p>\n<p>​    传统写法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">     　  a := <span class=\"number\">1</span> + <span class=\"number\">2</span></span><br><span class=\"line\">     　　b := a * <span class=\"number\">3</span></span><br><span class=\"line\">     　　c := b - <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>​    函数式编程写法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">result := subtract(multiply(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>), <span class=\"number\">3</span>), <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>五大特点:</strong></p>\n<ol>\n<li><p>函数是”第一等公民”</p>\n<p>函数与其他数据类型拥有同样的地位和功能，如：可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p>\n</li>\n<li><p>只用”表达式”，不用”语句”</p>\n<p>“表达式”是一个单纯的运算过程，有返回值；”语句”是执行某种操作，没有返回值。只使用表达式，不使用语句就是每一步都是单纯的运算过程，都有返回值。</p>\n</li>\n<li><p>没有”副作用”</p>\n<p>函数是独立的，返回的值是一个新的值，不得修改外部变量的值。</p>\n</li>\n<li><p>不修改状态</p>\n<p>函数式编程使用参数保存状态，而不保存在变量中，例如递归。</p>\n</li>\n<li><p>引用透明</p>\n<p>函数独立，不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</p>\n</li>\n</ol>\n<p><strong>好处：</strong></p>\n<ol>\n<li>代码简洁，开发快速</li>\n<li>接近自然语言，易于理解</li>\n<li>更方便的代码管理</li>\n<li>易于”并发编程”</li>\n<li>代码的热升级</li>\n</ol>\n</li>\n<li><p>前置条件/后置条件/循环不变量/代码正确性证明</p>\n<p>前置条件：指函数履行其契约所必须满足的条件，即此函数可以执行的必须满足的条件。</p>\n<p>后置条件：指函数执行完毕后，返回之前哪些条件是调用者可以期望的。</p>\n<p>eg: </p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：前置条件：函数的两个参数 a, b且为 int 型</p>\n<p>​    后置条件：返回值必须为 int 型</p>\n<p>循环不变量：循环过程中算法的固有性质。如：队列出栈的时候一定是最前面的节点出栈，不会是其他点。</p>\n<p>代码正确性证明：</p>\n<p>​    选取一个布尔函数 F(V)，在整个循环过程（起始和进行中），F(V)为真，当循环结束后，F(V)可以说明函数的正确性。</p>\n</li>\n<li><p>hash函数/慢哈希/加密算法</p>\n<ul>\n<li><p>通俗解释：都是一些加密算法，即让你的信息需要一定的秘钥或者其他什么东西才能看的一种手段</p>\n</li>\n<li><p>专业解释</p>\n<ol>\n<li><p>hash函数：散列函数，一个伪随机数生成器，著名的 hash 算法 MD4，MD5，SHA1</p>\n</li>\n<li><p>慢哈希</p>\n<p>定义：指执行这个哈希函数非常慢，这样暴力破解需要枚举遍历所有可能结果时，就需要花上非常非常长的时间。</p>\n<p>最简单的方法就是对 Hash 后的结果再 Hash。</p>\n<p>缺点：慢，消耗计算资源</p>\n</li>\n<li><p>加密算法</p>\n<p>定义：对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码，通常称为“密文”，使其只能在输入相应的密钥之后才能显示出本来内容，通过这样的途径来达到保护数据不被非法人窃取、阅读的目的。</p>\n<p>分类：对称加密和非对称加密</p>\n<p>常见算法：</p>\n<p>对称加密算法：DES和3DES、RC2和RC4、AES</p>\n<p>非对称加密算法：RSA、DSA、ECC</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>线程/进程/协程/并行算法</p>\n<ul>\n<li><p>通俗解释</p>\n<p>进程：你运行的程序的实例</p>\n<p>线程：轻量级进程</p>\n<p>并行算法：几个人一起解决一个问题</p>\n</li>\n<li><p>专业解释</p>\n<p>进程：是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</p>\n<p>线程：是程序中一个单一的顺序控制流程。在单个程序中同时运行多个线程完成不同的工作，称为多线程。</p>\n<p>并行算法：使用多个进程或者线程同时求解同一个问题，进程或者线程之间相互协调统一，最终得到结果。</p>\n</li>\n</ul>\n</li>\n<li><p>文件系统</p>\n<ul>\n<li><p>通俗解释：帮助傻瓜用户管理文件的系统</p>\n</li>\n<li><p>专业解释</p>\n<p>定义：文件系统（file system）是命名文件及放置文件的逻辑存储和恢复的系统。</p>\n<p>用处：将不美的操作转化为美的接口，即将底层的操作进行抽象，方便用户。</p>\n<p>常见的文件系统：FAT、NTFS、exFAT、Ext、Btrfs</p>\n</li>\n</ul>\n</li>\n<li><p>html/css/js</p>\n<ul>\n<li><p>通俗解释: 用来做我们看到的网页的语言</p>\n</li>\n<li><p>专业解释</p>\n<ul>\n<li><p>HTML</p>\n<p>定义：超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)</p>\n<p>eg: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CSS</p>\n<p>定义：层叠样式表 (<em>C</em>ascading <em>S</em>tyle <em>S</em>heets)</p>\n<p>用处：渲染 HTML，让HTML更漂亮</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#eef5fd</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JS</p>\n<p>定义：JavaScript 是一个高层次，动态，弱类型，基于原型的，多范式，并且解释 的编程语言</p>\n<p>用处：对事件响应，动态网页制作等</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;Hello world&lt;/h1&gt;\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>bcd/mit licenses</p>\n<ul>\n<li><p>通俗解释</p>\n<p>MIT License：相对较为宽松的授权条款</p>\n<p>BCD License：比GPL许可证和MPL许可证宽松，比MIT严格一点</p>\n</li>\n<li><p>专业解释</p>\n<p>MIT License：MIT许可是一个宽容的自由软件许可证起源于美国麻省理工学院（MIT）。它只对重用限制非常有限，MIT许可证允许在私有软件中重复使用，前提是许可软件的所有副本均包含MIT许可条款和版权声明的副本。</p>\n<p>BCD License：对使用和重新分配涵盖的软件施加最小的限制，BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。但前提是1、如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。<br>2、如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。<br>3、不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-f5f9eb898791ba10.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><p>cocoa</p>\n<p>通俗解释：苹果的一套用来写Mac OS X应用程序的面向对象的框架</p>\n<p>专业解释：Cocoa是苹果公司为Mac OS X所创建的原生面向对象的API</p>\n<p>用于苹果设备的应用程序</p>\n<p>主要开发工具：XCode 和 Interface Builder</p>\n</li>\n<li><p>mvc模式</p>\n<ul>\n<li><p>通俗解释</p>\n<p>Model（模型）、View（视图）和 Controller（控制器）</p>\n</li>\n<li><p>专业解释</p>\n<p>Model（模型）表示应用程序核心（比如数据库记录列表）<br>View（视图）显示数据（数据库记录）<br>Controller（控制器）处理输入（写入数据库记录）</p>\n<p>流程：用户通过视图层进行相关操作，引发相应的事件传到控制层，控制层处理响应，并返回相应的值或者通过其他方式传值。</p>\n</li>\n</ul>\n</li>\n<li><p>装饰者/装饰器模式</p>\n<p>通俗解释：包装，给一个对象在外部添加一些功能</p>\n<p>专业解释：动态的为对象添加功能，即从一个对象外部来给对象添加功能。它不必改变原类文件，动态的扩展一个对象的功能，主要是通过创建一个装饰器来包装对象。</p>\n<p>eg:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_required</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">        token = request.headers.get(<span class=\"string\">'Authorization'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            payload = jwt.decode(token, config.SECRET, algorithms=[config.JWT_ALGORITHM])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(payload, *args, **kw)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception, e:</span><br><span class=\"line\">            logging.warn(<span class=\"string\">'login error: '</span> + e.message)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">'successful'</span>: <span class=\"keyword\">False</span>, <span class=\"string\">'error'</span>: <span class=\"string\">'Unauthorized!'</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>socket/websocket</p>\n<ul>\n<li><p>通俗解释</p>\n<p><strong>socket:</strong> 网络数据交换的接口</p>\n<p><strong>websocket:</strong> 单个TCP连接双向通信</p>\n</li>\n<li><p>专业解释</p>\n<p><strong>socket:</strong> 网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。socket本质是编程接口(API)，对TCP/IP的封装，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口；HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。</p>\n<p><strong>websocket:</strong> WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。</p>\n</li>\n</ul>\n</li>\n<li><p>opengl/opencv</p>\n<ul>\n<li><p>通俗解释</p>\n<p><strong>OpenGL: </strong> 主要是一个3D 图像库（2D 也能写）</p>\n<p><strong>OpenCV: </strong> 跨平台计算机视觉库</p>\n</li>\n<li><p>专业解释</p>\n<p><strong>OpenGL: </strong>OpenGL（全写Open Graphics Library）是指定义了一个跨编程语言、跨平台的编程接口规格的专业的图形程序接口。它用于三维图像（二维的亦可），是一个功能强大，调用方便的底层图形库。</p>\n<p><strong>OpenCV:</strong>  由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法，还涉及一些机器学习的算法。</p>\n<p>Opencv是从图像到数据，OpenGL是从数据到图像</p>\n</li>\n</ul>\n</li>\n<li><p>多态</p>\n<p>通俗解释：同样的事件在不同对象上产生不同效果，如你去打NBA和科比去打NBA，虽然都是去打比赛，但是就是不一样的结果。</p>\n<p>专业解释：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。</p>\n<p>eg: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> ...</span>&#123;  </span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(D obj)</span>...</span>&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"string\">\"A and D\"</span>);  </span><br><span class=\"line\">         &#125;   </span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(A obj)</span>...</span>&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"string\">\"A and A\"</span>);  </span><br><span class=\"line\">         &#125;   </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span>...</span>&#123;  </span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(B obj)</span>...</span>&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"string\">\"B and B\"</span>);  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(A obj)</span>...</span>&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"string\">\"B and A\"</span>);  </span><br><span class=\"line\">         &#125;   </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span>...</span>&#123;&#125;   </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span>...</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>main 函数如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  \t\tA a1 = <span class=\"keyword\">new</span> A();  </span><br><span class=\"line\">        A a2 = <span class=\"keyword\">new</span> B();  </span><br><span class=\"line\">        B b = <span class=\"keyword\">new</span> B();  </span><br><span class=\"line\">        C c = <span class=\"keyword\">new</span> C();   </span><br><span class=\"line\">        D d = <span class=\"keyword\">new</span> D();   </span><br><span class=\"line\">        System.out.println(a1.show(b));   <span class=\"comment\">// ①  </span></span><br><span class=\"line\">        System.out.println(a1.show(c));   <span class=\"comment\">// ②  </span></span><br><span class=\"line\">        System.out.println(a1.show(d));   <span class=\"comment\">// ③  </span></span><br><span class=\"line\">        System.out.println(a2.show(b));   <span class=\"comment\">// ④  </span></span><br><span class=\"line\">        System.out.println(a2.show(c));   <span class=\"comment\">// ⑤  </span></span><br><span class=\"line\">        System.out.println(a2.show(d));   <span class=\"comment\">// ⑥  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">①   A and A</span><br><span class=\"line\">②   A and A</span><br><span class=\"line\">③   A and D</span><br><span class=\"line\">④   B and A</span><br><span class=\"line\">⑤   B and A</span><br><span class=\"line\">⑥   A and D</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>像素/尺寸/px/分辨率/ppi</p>\n<p>像素：是指在由一个数字序列表示的图像中的一个最小单位，称为像素。</p>\n<p>尺寸：屏幕对角线的长度</p>\n<p>px: 像素单位</p>\n<p>分辨率：如 1080 * 1920，就是高是1080px，宽是1920px，即整个屏幕可以用1080 × 1920 个格子划分，每个格子代表一个像素</p>\n<p>ppi：屏幕像素密度（PPI）就是每英寸屏幕所拥有的像素数</p>\n<p><strong>注：这个英寸是指对角线的长度</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/742658-d882d6a3115b38f5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n</li>\n<li><p>如何计算sin(1), e^x, log(x), sqrt(x)/快速/精确</p>\n<ul>\n<li><p>sqrt(x) </p>\n<p>0x5f3759df 取的真迷</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">InvSqrt</span> <span class=\"params\">(<span class=\"keyword\">float</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> xhalf = <span class=\"number\">0.5f</span>*x;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = *(<span class=\"keyword\">int</span>*)&amp;x;</span><br><span class=\"line\">        i = <span class=\"number\">0x5f3759df</span> - (i &gt;&gt; <span class=\"number\">1</span>);        <span class=\"comment\">// 计算第一个近似根</span></span><br><span class=\"line\">        x = *(<span class=\"keyword\">float</span>*)&amp;i;</span><br><span class=\"line\">        x = x*(<span class=\"number\">1.5f</span> - xhalf*x*x);       <span class=\"comment\">// 牛顿迭代法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sin()</p>\n</li>\n</ul>\n</li>\n<li><p>全加器/半加器/超前进位加法器</p>\n<p><strong>逐位进位加法器</strong></p>\n<p>简介：在每一位的计算时，都在等待前一位的进位。</p>\n<ul>\n<li>半加器：加数和被加数为输入，和数与<a href=\"https://baike.baidu.com/item/%E8%BF%9B%E4%BD%8D\" target=\"_blank\" rel=\"noopener\">进位</a>为输出的装置为<a href=\"https://baike.baidu.com/item/%E5%8D%8A%E5%8A%A0%E5%99%A8\" target=\"_blank\" rel=\"noopener\">半加器</a>。</li>\n<li>全加器：若加数、被加数与低位的进位数为输入，而和数与进位为输出则为<a href=\"https://baike.baidu.com/item/%E5%85%A8%E5%8A%A0%E5%99%A8\" target=\"_blank\" rel=\"noopener\">全加器</a>。</li>\n</ul>\n<p><strong>超前进位加法器</strong>：是对普通的全加器进行改良而设计成的并行加法器，主要是针对普通全加器串联时互相进位产生的延迟进行了改良。</p>\n<p>主要思想：1、由输入的A，B算出每一位的G，P；2、由各位的G，P算出每一位的GN：0，PN：0；3、由每一位的GN：0，PN：0与CIN算出每一位的COUT，S。</p>\n</li>\n<li><p>编译原理/代码运行原理</p>\n<p>编译：把高级语言变成计算机能够识别的机器语言</p>\n<p>代码运行原理：编译 -&gt; 执行</p>\n</li>\n<li><p>mysql/mongodb/sql/NoSql</p>\n<ul>\n<li><p>通俗解释：各种数据库</p>\n</li>\n<li><p>专业解释：组织、存储、管理数据的仓库</p>\n<ol>\n<li><p>mysql</p>\n<p>一种关系型数据库</p>\n<p>组成：</p>\n<ul>\n<li>数据以表格的形式出现</li>\n<li>表格中每行为各种数据</li>\n<li>表格中每列为同一类型（名称）的数据</li>\n<li>许多的行和列组成一张表单</li>\n<li>若干的表单组成database</li>\n</ul>\n</li>\n<li><p>mongodb</p>\n<p>文档型数据库，主要应用于web应用</p>\n<p>优点：数据结构要求不严格，表结构可变，扩展性高，不需要预先定义数据表结构</p>\n<p>缺点：查询性能不高，而且缺乏统一的查询语法</p>\n</li>\n<li><p>sql</p>\n<p>SQL 是用于访问和处理数据库的标准的计算机语言。</p>\n</li>\n<li><p>nosql</p>\n<p>泛指非关系型数据库，用于超大规模数据的存储。</p>\n<p>优点：</p>\n<ul>\n<li>没有复杂的关系</li>\n<li>扩展性高</li>\n<li>成本低</li>\n<li>灵活</li>\n<li>采用分布式计算</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>cookie/session</p>\n<ul>\n<li><p>通俗解释</p>\n<p><strong>cookie:</strong>  存储在本地的用来辨认用户以及其状态等信息的数据</p>\n<p><strong>session:</strong> 存储在服务器上的用来辨认用户、其状态以及回话等信息的数据  </p>\n</li>\n<li><p>专业解释</p>\n<p><strong>cookie:</strong> 网站为了认证用户存储在本地的数据，存储在客户端，但是不是很安全，别人可以分析存放在本地的 cookie 并进行 cookie 欺骗。</p>\n<p><strong>session:</strong> 存储客户的信息并存储在服务器上的，但是当访问增多，会比较占用你服务器的性能。</p>\n</li>\n</ul>\n</li>\n<li><p>git/svn/版本控制</p>\n<ul>\n<li><p>专业解释</p>\n<p><strong>git:</strong> 分布式版本控制系统，没有中心服务器，不同开发者都能管理项目代码。</p>\n<p><strong>SVN:</strong> 集中式版本管理系统，即有一个中心仓库，里面保存了项目代码的不同版本，开发人员在本地在只有这个仓库中的一个版本，如果想要其他版本，必须得到中心服务器授权才能获得。</p>\n<p><strong>版本控制:</strong> 记录仓库各个组别的改动，并时不同人编辑的同一组别的内容得到更新</p>\n</li>\n</ul>\n</li>\n<li><p>ssh （Secure Shell）</p>\n<p>通俗解释：一种安全的网络协议</p>\n<p>专业解释：建立在应用层基础上的安全协议，专为远程登录会话和其他网络服务提供安全性的协议，所有传输的数据都会被加密。</p>\n<p>两种级别的安全验证：</p>\n<ol>\n<li><p>基于口令的安全验证</p>\n<p>只要知道账号和口令就可以登录到远程主机，所以可能会有其他服务器冒充真正的服务器（中间人攻击）</p>\n</li>\n<li><p>基于密钥的安全验证</p>\n<p>你必须创建一对密匙，公钥放在服务器上，这样其他服务器就无法冒充真正的服务器，但是登录时间较慢。</p>\n<p>过程：</p>\n<ol>\n<li>客户端向服务器发出请求，请求安全验证。</li>\n<li>服务器收到请求之后，把服务器存储的公钥和你发送过来的公钥进行比较。如果两个密匙一致，服务器就用公用密匙加密“质询”并把它发送给客户端软件。</li>\n<li>客户端软件收到“质询”之后用私匙解密再把它发送给服务器。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>php是世界上最好的语言/pythonic</p>\n<p><strong>PHP是世界上最好的语言：</strong></p>\n<p>由来：有些人认为PHP就是最简单最完善最好的语言，并且热衷于在各种论坛等地方与其他人进行争辩。所谓一粉顶十黑，“PHP是最好的语言”的梗即由此而来，其实它并不是讽刺PHP语言本身，而是在讽刺并不深入理解PHP的开发者。</p>\n<p>PHP的优点：</p>\n<ul>\n<li>性能好</li>\n<li>语法简单，上手简单</li>\n<li>支持完整，有很多成熟的框架、社区等</li>\n</ul>\n<p>PHP的缺点：</p>\n<ul>\n<li>对多线程支持不太好</li>\n<li>语法不严谨</li>\n<li>每个PHP页面被解释执行后，所有的相关资源都会被回收，无法在语言层面上让对象常驻内存</li>\n</ul>\n<p><strong>pythonic:</strong></p>\n<ul>\n<li><p>通俗解释</p>\n<p>Python 的 区别于其他语言的优雅写法</p>\n</li>\n<li><p>专业解释</p>\n<p>​    如何写出 pythonic : 阅读 <a href=\"https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0008/\" target=\"_blank\" rel=\"noopener\">PEP 8</a>，并遵守规范</p>\n<p>​    eg:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> &lt; a &lt; <span class=\"number\">10</span></span><br><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>ORM</p>\n<p>通俗解释：数据库的操作接口</p>\n<p>专业解释：Object-Relational Mapping（对象关系映射）</p>\n<p>作用：在关系型数据库和业务实体对象之间作一个映射，具体操作时只需简单的操作对象的属性和方法。</p>\n<p>优点：</p>\n<ol>\n<li>操作简单，只用调接口，不用考虑SQL语句</li>\n<li>固化数据结构变得简单，不需要把每条数据转化为一条一条的SQL语句</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>性能差</li>\n<li>灵活性不够</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"4-golang-新手入门配置学习\"><a href=\"#4-golang-新手入门配置学习\" class=\"headerlink\" title=\"4. golang 新手入门配置学习\"></a>4. <a href=\"http://www.jianshu.com/p/fb22d50a05f2\" target=\"_blank\" rel=\"noopener\">golang 新手入门配置学习</a></h2><p>   bbs链接：<a href=\"https://newbbs.bingyan.net/topics/1111\" target=\"_blank\" rel=\"noopener\">https://newbbs.bingyan.net/topics/1111</a></p>\n<p><strong>Ubuntu下 golang 安装与配置</strong></p>\n<ul>\n<li><p>安装最新版本 golang 方法 （推荐）</p>\n<ol>\n<li><p>下载： <a href=\"https://www.golangtc.com/download\" target=\"_blank\" rel=\"noopener\">https://www.golangtc.com/download</a></p>\n</li>\n<li><p>解压安装包<code>tar -C /usr/local -xzf &lt;安装包&gt;</code> （其中 <code>/usr/local</code> 为 go 的解压目录即GOROOT，也可以安装到自己想要的位置，后面配置一下就行了）</p>\n</li>\n<li><p>环境配置</p>\n<ul>\n<li><p>在 ~/.bashrc 最后一行加上 <code>export PATH=$PATH:/usr/local/go/bin</code> </p>\n<p>注：<code>:</code> 为分隔符，即配置多个路径时使用； <code>/usr/local/go/bin</code> 为 go 安装位置下的 bin 目录</p>\n<p>功效：用于 在bash 下使用命令 <code>go</code> 等命令（可看 bin 目录下有哪些可执行文件）</p>\n</li>\n<li><p>之后 运行 <code>source .bashrc</code> 更新 PATH</p>\n<p>注：如果终端为 zsh, fish 命令  <code>source</code> 可能失效，这时需要输入 <code>bash</code> 进入 bash 执行，但是当返回zsh 或者 fish等其他终端时可能还是无法使用 命令 <code>go</code> ，这是因为你的 zsh 或者 fish 有自己单独的config 文件，你需要在那个文件最后一行加上相应代码（由于不同终端配置语法不同，此处不做扩展)</p>\n<blockquote>\n<p><code>/etc/profile，/root/.bashrc</code> 是系统全局环境变量设定<br><code>~/.profile，~/.bashrc</code> 用户家目录下的私有环境变量设定</p>\n<p>​</p>\n<p>当登入系统时候获得一个shell进程时，其读取环境设定档有三步</p>\n<ol>\n<li>首先读入的是全局环境变量设定档 <code>/etc/profile</code>，然后根据其内容读取额外的设定的文档</li>\n<li>然后根据不同使用者帐号，去其家目录读取 <code>~/.profile</code></li>\n<li>然后在根据用户帐号读取 <code>~/.bashrc</code> </li>\n</ol>\n<p>​</p>\n<p><code>~/.profile</code> 与 <code>~/.bashrc</code> 的区别<br><code>~/.profile</code> 可以设定本用户专有的路径，环境变量，等，它只能登入的时候执行一次<br><code>~/.bashrc</code> 也是某用户专有设定文档，可以设定路径，命令别名，每次shell script的执行都会使用它一次</p>\n</blockquote>\n</li>\n<li><p>配置 GOPATH （可选）</p>\n<ol>\n<li>在 <code>~/.bashrc</code> 或者  <code>~/.profile</code>最后一行加上 <code>export GOPATH=$HOME&lt;你的工作目录&gt;</code></li>\n<li>进入bash 执行 <code>source ~/.bashrc</code> 或者 <code>~/.profile</code> ，如果此时没有生效，可尝试重启或者注销重新登录</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>直接一键安装，但是版本不一定是最新的</p>\n<p>安装命令： <code>sudo apt install golang-go</code></p>\n<blockquote>\n<p>也可以在安装之前通过 <code>apt-cache search golang-go</code> 搜索可见 golang-go 版本等</p>\n</blockquote>\n<ul>\n<li>PATH 和 GOPATH 等见上文环境配置</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>golang 项目目录结构</p>\n<p>一个Go项目在GOPATH下，会有如下三个目录：</p>\n<ul>\n<li>src存放源代码 ( .go )</li>\n<li>pkg编译后生成的文件 </li>\n<li>bin编译后生成的可执行文件 ( .a )</li>\n</ul>\n<p>​</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">      |--&lt;bin&gt;</span><br><span class=\"line\">      |--&lt;pkg&gt;</span><br><span class=\"line\">      |--&lt;src&gt;</span><br><span class=\"line\">         |--&lt;a&gt;</span><br><span class=\"line\">             |--&lt;a1&gt;</span><br><span class=\"line\">                 |--al.go</span><br><span class=\"line\">             |--&lt;a2&gt;</span><br><span class=\"line\">                 |--a2.go</span><br><span class=\"line\">         |--&lt;b&gt;</span><br><span class=\"line\">             |--b1.go</span><br><span class=\"line\">             |--b2.go</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>PATH GOPATH</code> 等简介</p>\n<ul>\n<li><p>GOROOT</p>\n<p>GO 语言安装的路径，如我的 Ubuntu 下的是<code>/usr/local/go</code>，类似于JAVA中的JAVA_HOME</p>\n</li>\n<li><p>GOPATH</p>\n<p>GOPATH 表示代码包或项目所在的地址，可以设置多个，不同地址之间使用 <code>:</code> 分隔</p>\n<blockquote>\n<p>假设：<code>GOPATH=~/project1:~/project2，GOROOT=/usr/local/go</code>，在代码中引用了包：<code>github.com/bitly/nsq/util</code></p>\n<p>GO程序在编译时会按先后次序到以下目录中寻找源码：</p>\n<p><code>~/project1/github.com/bitly/nsq/util</code></p>\n<p><code>~/project2/github.com/bitly/nsq/util</code></p>\n<p><code>/usr/local/go/github.com/bitly/nsq/util</code> </p>\n</blockquote>\n</li>\n<li><p>PATH</p>\n<p> <strong>可执行程序的路径</strong>，在命令行执行命令时，系统默认会在PATH中指定路径里寻找。比如linux下我们用最常用的<code>cd</code>命令，执行时我们并未指定 <code>cd</code> 命令的路径，也没有切换到 <code>cd</code> 所在的目录下去执行该命令。这就是因为 <code>cd</code> 命令的可执行文件所在的目录在PATH中录入了。</p>\n<p><code>go</code> 安装后，在GOROOT/bin目录，如 Ubuntu 的 <code>/usr/local/go/bin</code> 目录下会有 go 、godoc、gofmt 三个可执行命令。为了方便在编译go项目时方便的使用<code>go build、go install</code> 等命令，需要将GOROOT/bin目录加入到系统的PATH路径下。</p>\n</li>\n<li><p>GOARCH</p>\n<p>CPU 架构，如： amd64, 386</p>\n</li>\n<li><p>GOOS</p>\n<p>操作系统，如：linux</p>\n</li>\n<li><p>GOBIN</p>\n<p>工作目录下的bin文件夹</p>\n</li>\n<li><p>GOEXE</p>\n<p>生成的可执行文件后缀</p>\n</li>\n<li><p>GOHOSTARCH</p>\n<p>想要交叉编译的CPU架构</p>\n</li>\n<li><p>GOHOSTOS</p>\n<p>想要交叉编译的操作系统</p>\n</li>\n</ul>\n</li>\n<li><p>go 基本命令介绍</p>\n<p>Go命令一般<strong>格式</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go command [arg]</span><br></pre></td></tr></table></figure>\n<p>其中，command是操作命令，arg是该命令的参数</p>\n<h4 id=\"常用命令介绍：\"><a href=\"#常用命令介绍：\" class=\"headerlink\" title=\"常用命令介绍：\"></a>常用命令介绍：</h4><ul>\n<li><p>go get</p>\n<p>用于动态获取远程代码包，如果是从GitHub上获取，则需要现安装git，如果是从Google Code上获取，则需要安装hg。go get 获取的远程代码包将被下载到 <code>GOPATH</code> 目录下的<code>src</code>文件夹中</p>\n<p><code>eg: go get -u github.com/nsf/gocode</code></p>\n</li>\n<li><p>go install</p>\n<ol>\n<li>编译导入的包文件，所有导入的包文件编译完才会编译主程序</li>\n<li>将编译后生成的可执行文件放到bin目录下（GOPATH/bin），编译后的包文件放到pkg目录下（GOPATH/pkg）</li>\n</ol>\n</li>\n<li><p>go run</p>\n<p>用于编译并直接运行程序，它会生成一个临时文件（但不是一个标准的可执行文件），直接在命令行打印输出程序执行结果，方便用户调试。</p>\n<p><code>eg: go run main.go</code></p>\n</li>\n<li><p>go build</p>\n<p>用于测试编译包，可检查是否存在编译错误，如果被编译的是main包，会生成可执行文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#编译</span><br><span class=\"line\">go build main.go</span><br><span class=\"line\">#运行</span><br><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>go fmt</p>\n<p>用于格式化源码，有的IDE保存源码时自动执行该命令，比如subl，也可手动执行它。</p>\n<p><code>eg: go fmt main.go</code></p>\n</li>\n<li><p>go test</p>\n<p>用于运行测试文件，该命令会自动读取源码目录下的名为：*_test.go的文件，生成并运行测试用的可执行文件，测试成功会显示“PASS”、“OK”等信息。</p>\n</li>\n<li><p>其他</p>\n<ol>\n<li>go clean：用来移除当前源码包里面编译生成的文件 </li>\n<li>go env: 查看当前用户的go环境变量 </li>\n<li>go fix: 用来修复以前老版本的代码到新版本 </li>\n<li>go list: 列出当前全部安装的packge </li>\n<li>go version: 查看当前go版本</li>\n</ol>\n</li>\n</ul>\n<p><strong>hello world：</strong></p>\n<p>main.go 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;Hello World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入该文件所在目录，尝试编译运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go run main.go</span><br></pre></td></tr></table></figure>\n<p>终端会输出 Hello World! ，则运行成功</p>\n</li>\n<li><p>sublime 配置 golang 环境</p>\n<ul>\n<li><p>安装 GoSublime </p>\n<p>运行：Ctrl + B </p>\n<p>个人 GoSublime 配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;env&quot;: &#123;</span><br><span class=\"line\">        &quot;PATH&quot;: &quot;$PATH&quot;,</span><br><span class=\"line\">        // &quot;GOPATH&quot;: &quot;$HOME/Projects/Go/test&quot;,</span><br><span class=\"line\">        // &quot;GOPATH&quot;: &quot;$GOPATH:$GS_GOPATH&quot;,</span><br><span class=\"line\">        &quot;GOPATH&quot;: &quot;$GS_GOPATH&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;comp_lint_enabled&quot;:true,</span><br><span class=\"line\">    &quot;lint_enabled&quot;: true,</span><br><span class=\"line\">    &quot;autocomplete_builtins&quot;: true,</span><br><span class=\"line\">    &quot;fmt_cmd&quot; :[ &quot;goimports&quot;],</span><br><span class=\"line\">    &quot;snippets&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;match&quot;: &#123;&quot;global&quot;: true, &quot;pkgname&quot;: &quot;.&quot;&#125;,</span><br><span class=\"line\">            &quot;snippets&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;type&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;type struct &#123;&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;type $&#123;1:name&#125; struct &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;type&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;type interface &#123;&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;type $&#123;1:name&#125; interface &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;var&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;var struct &#123;&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;var $&#123;1:name&#125; struct &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;map&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;map[...]...&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;map[$&#123;1:string&#125;]$&#123;2:interface&#123;&#125;&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;interface&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;interface&#123;&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;interface&#123;&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;if&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;if err != nil &#123;...&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;if $&#123;1:err&#125; $&#123;2:!=&#125; $&#123;3:nil&#125; &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;if&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;if ret,ok := func(); ok &#123;...&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;if $&#123;1:ret,&#125; $&#123;2:ok&#125; $&#123;3::=&#125; $&#123;4:func()&#125;; $&#123;5:!ok&#125; &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;break&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;break&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;break&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;continue&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;continue&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;continue&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;defer&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;defer func()&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;defer $&#123;0:func()&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;for&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;for k,v := range func() &#123;...&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;for $&#123;1:k,&#125;$&#123;2:v&#125; := range $&#123;3:func()&#125; &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;switch&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;switch ... &#123;...&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;switch $&#123;1:name&#125; &#123;\\ncase $&#123;2:v&#125;:\\n\\t$3\\ndefault:\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<p><code>GS_GOPATH</code> is a pseudo-environment-variable. It’s changed to match a possible GOPATH based on:</p>\n<ul>\n<li>the current working directory, e.g. <code>~/go/src/pkg</code> then <code>$GS_GOPATH</code> will be <code>~/go/</code></li>\n<li>or the path the current <code>.go</code> file (or last activated <code>.go</code> file if the current file is not <code>.go</code>) e.g. if your file path is <code>/tmp/go/src/hello/main.go</code> then it will be <code>/tmp/go</code></li>\n</ul>\n<p>简单说就是 GS_GOPATH 是用来自动根据当前目录设置 GOPATH 的</p>\n</li>\n<li><p>安装 gocode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -u github.com/nsf/gocode</span><br><span class=\"line\">go install github.com/nsf/gocode</span><br></pre></td></tr></table></figure>\n<p>安装完成后，我们可以在 $GOPATH/bin 目录下，发现多出了个 gocode 文件</p>\n</li>\n</ul>\n</li>\n<li><p>常用 tools</p>\n<ul>\n<li><p>gocode 提供代码补全</p>\n<p><code>go get -u github.com/nsf/gocode</code></p>\n</li>\n<li><p>godef 代码跳转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -v code.google.com/p/rog-go/exp/cmd/godef</span><br><span class=\"line\">go install -v code.google.com/p/rog-go/exp/cmd/godef</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gofmt 自动代码整理</p>\n</li>\n<li><p>golint 代码语法检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get github.com/golang/lint</span><br><span class=\"line\">go install github.com/golang/lint</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>goimports 自动整理imports</p>\n<p><code>go get golang.org/x/tools/cmd/goimports</code></p>\n</li>\n</ul>\n</li>\n<li><p>安装 <code>echo</code> </p>\n<p><a href=\"https://echo.labstack.com/guide\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<p>安装：<code>go get -u github.com/labstack/echo/...</code></p>\n<p>注：如果无法翻墙可能会报错 <code>package golang.org/x/crypto/acme/autocert: unrecognized import path &quot;golang.org/x/crypto/acme/autocert&quot;</code></p>\n<p><strong>解决方案:</strong> </p>\n<blockquote>\n<p>分析错误，我们缺少crypto组件，需要下载，使用<code>go get golang.org/x/crypto/acme/autocert</code>来下载，但是 crypto 官方地址在外网</p>\n<p>好在 golang.org 在 github.com 上有备份仓库，所以缺少的组件可以在 github 上下载</p>\n<p>eg: 安装 crypto 组件</p>\n<p>github 地址： <a href=\"https://github.com/golang/crypto\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/crypto</a></p>\n<p>过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;mkdir -p /usr/local/go/src/golang.org/x/</span><br><span class=\"line\">&gt;git clone git@github.com:golang/crypto.git</span><br><span class=\"line\">&gt;mv crypto /usr/local/go/golang.org/x/</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>测试示例: </strong></p>\n<p><strong>main.go</strong> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/labstack/echo\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := echo.New()</span><br><span class=\"line\">\te.GET(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c echo.Context)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c.String(http.StatusOK, <span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\te.Logger.Fatal(e.Start(<span class=\"string\">\":1323\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动： <code>go run server.go</code></p>\n<p>Browse to <a href=\"http://localhost:1323/\" target=\"_blank\" rel=\"noopener\">http://localhost:1323</a> and you should see Hello, World! on the page.</p>\n<p>更多echo 请参照学习官方教程：<a href=\"https://echo.labstack.com/guide\" target=\"_blank\" rel=\"noopener\">https://echo.labstack.com/guide</a></p>\n</li>\n</ol>\n","categories":["学习笔记"],"tags":["学习笔记"]},{"title":"游标实现链表及二叉树和BST树","url":"http://mu-mo.top/2017/12/25/数据结构/游标实现链表及二叉树和BST树/","content":"<p>代码地址：<a href=\"https://github.com/tofar/data-structure/tree/master/code/cursor\" target=\"_blank\" rel=\"noopener\">https://github.com/tofar/data-structure/tree/master/code/cursor</a></p>\n<h3 id=\"1-链表的游标实现\"><a href=\"#1-链表的游标实现\" class=\"headerlink\" title=\"1. 链表的游标实现\"></a>1. 链表的游标实现</h3><p>诸如BASIC和FORTRAN等许多语言都不支持指针。如果需要链表而又不能使用指针，这时我们可以使用游标（cursor）实现法来实现链表。</p>\n<p>在链表的实现中有两个重要的特点：</p>\n<ol>\n<li>数据存储在一组结构体中。每一个结构体包含有数据以及指向下一个结构体的指针。</li>\n<li>一个新的结构体可以通过调用malloc而从系统全局内存（global memory）得到，并可以通过free而被释放。</li>\n</ol>\n<p>游标法必须能够模仿实现这两条特性:</p>\n<p><strong>满足条件1的逻辑方法是要有一个全局的结构体数组（模拟系统全局内存）。对于数组中的任何单元，其数组下标可以用来代表一个地址。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef int PtrToNode;</span><br><span class=\"line\">typedef PtrToNode List;</span><br><span class=\"line\">typedef PtrToNode Position;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Node &#123;</span><br><span class=\"line\">    ElementType Element;</span><br><span class=\"line\">    Position Next;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">struct Node cursor_space[ SPACE_SIZE ];</span><br></pre></td></tr></table></figure>\n<p>作为备用单链表，用来malloc或free游标可用空间，该表用0作为表头。刚开始时，freelist就是整个结构体数组。<strong>0指向的为空余空间的下标，若0指向0则表示没有空余空间。</strong></p>\n<p>需要理解的是：所有的链表，包括备用表和已用表，全部都在我们定义的全局结构体数组中，只是它们的表头不同，从不同的表头出发形成了不同的单链表。</p>\n<p>假设我们定义了一个大小为11的游标空间，其初始化状态如下：</p>\n<table>\n<thead>\n<tr>\n<th>Slot</th>\n<th>Element</th>\n<th>Next</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td></td>\n<td>2</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td></td>\n<td>4</td>\n</tr>\n<tr>\n<td>4</td>\n<td></td>\n<td>5</td>\n</tr>\n<tr>\n<td>5</td>\n<td></td>\n<td>6</td>\n</tr>\n<tr>\n<td>6</td>\n<td></td>\n<td>7</td>\n</tr>\n<tr>\n<td>7</td>\n<td></td>\n<td>8</td>\n</tr>\n<tr>\n<td>8</td>\n<td></td>\n<td>9</td>\n</tr>\n<tr>\n<td>9</td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>10</td>\n<td></td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：对于Next， 0的值等价于NULL指针。</strong></p>\n<p>上面的状态用链表形式表示为：cursor_space[0]—&gt;cursor_space[1]—&gt;cursor_space[2]—&gt;cursor_space[3]—&gt;cursor_space[4]—&gt;cursor_space[5]—&gt;cursor_space[6]—&gt;cursor_space[7]—&gt;cursor_space[8]—&gt;cursor_space[9]—&gt;cursor_space[10]—&gt;NULL.</p>\n<p>为执行malloc功能，将（在表头后面的）第一个元素从freelist中删除。为了执行free功能，我们将该单元放在freelist的前端。</p>\n<p>malloc和free的游标实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/*cursor_alloc*/</span><br><span class=\"line\">Position cursor_alloc( void )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Position p;</span><br><span class=\"line\">    p = cursor_space[0].Next;</span><br><span class=\"line\">    cursor_space[0].Next = cursor_space[p].Next;</span><br><span class=\"line\">    return p;  // 返回开辟空间，0永远指向空余空间</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*cursor_free*/</span><br><span class=\"line\">void cursor_free( Position p )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cursor_space[p].Next = cursor_space[0].Next;</span><br><span class=\"line\">    cursor_space[0].Next = p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为加深理解，请参考如下实例: </p>\n<table>\n<thead>\n<tr>\n<th>Slot</th>\n<th>Element</th>\n<th>Next</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>-</td>\n<td>6</td>\n</tr>\n<tr>\n<td>1</td>\n<td>b</td>\n<td>9</td>\n</tr>\n<tr>\n<td>2</td>\n<td>f</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>header</td>\n<td>7</td>\n</tr>\n<tr>\n<td>4</td>\n<td>-</td>\n<td>0</td>\n</tr>\n<tr>\n<td>5</td>\n<td>header</td>\n<td>10</td>\n</tr>\n<tr>\n<td>6</td>\n<td>-</td>\n<td>4</td>\n</tr>\n<tr>\n<td>7</td>\n<td>c</td>\n<td>8</td>\n</tr>\n<tr>\n<td>8</td>\n<td>d</td>\n<td>2</td>\n</tr>\n<tr>\n<td>9</td>\n<td>e</td>\n<td>0</td>\n</tr>\n<tr>\n<td>10</td>\n<td>a</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>如果单链表L的值是5，M的值是3，我们又规定了freelist表头为0，因此，从上表中我们可以得到三个链表：</p>\n<p>freelist：cursor_space[0]—&gt;cursor_space[6]—&gt;cursor_space[4]—&gt;NULL </p>\n<p>L：header—&gt;a—&gt;b—&gt;e—&gt;NULL</p>\n<p>M：header—&gt;c—&gt;d—&gt;f—&gt;NULL</p>\n<p>freelist是分配L、M链表后还剩余的可分配空间。</p>\n<p>游标实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* return ture if L is empty */</span><br><span class=\"line\">int isempty(list L)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return cursor_space[L].next = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* return true if P is the last position in list L */</span><br><span class=\"line\"></span><br><span class=\"line\">int islast(position p, list L)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return cursor_space[P].next == 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* return position of X in L; 0 if not found */</span><br><span class=\"line\">/* uses a header node */</span><br><span class=\"line\"></span><br><span class=\"line\">position find(element_type X, list L)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    position p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    p = cursor_space[L].next;</span><br><span class=\"line\">    while(p &amp;&amp; cursor_space[p].element != X)</span><br><span class=\"line\">        p = cursor_space[p].next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* delete first occurence of X from a list */</span><br><span class=\"line\">/* assume use of a header node */</span><br><span class=\"line\"></span><br><span class=\"line\">void delete(element_type X, list L)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    position p, tmpcell;</span><br><span class=\"line\">    </span><br><span class=\"line\">    p = find_previous(X, L);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(!islast(p, L))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmpcell = cursor_space[p].next;</span><br><span class=\"line\">        cursor_space[p].next = cursor_space[tmpcell].next;</span><br><span class=\"line\">        cursor_free(tmpcell);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* insert (after legal position P) */</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(element_type X, list L, position P)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    position tmpcell;</span><br><span class=\"line\">    </span><br><span class=\"line\">    tmpcell = cursor_alloc();</span><br><span class=\"line\">    if(tmpcell == 0)</span><br><span class=\"line\">        fatal_error(&quot;out of sapce!!!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    cursor_space[tmpcell].element = X;</span><br><span class=\"line\">    cursor_space[tmpcell].next = cursor_space[P].next;</span><br><span class=\"line\">    cursor_space[P].next = tmpcell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-二叉树\"><a href=\"#2-二叉树\" class=\"headerlink\" title=\"2. 二叉树\"></a>2. 二叉树</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef struct tREE</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int data;</span><br><span class=\"line\">  int left;</span><br><span class=\"line\">  int right;</span><br><span class=\"line\">&#125; TREE;</span><br></pre></td></tr></table></figure>\n<p>和链表实现类似，再定义一个全局数组 tr[ ] 即可。</p>\n<h3 id=\"3-BST树\"><a href=\"#3-BST树\" class=\"headerlink\" title=\"3. BST树\"></a>3. BST树</h3><p><strong>BST：</strong>即二叉搜索树：</p>\n<ol>\n<li><p>所有非叶子结点至多拥有两个儿子（Left和Right）；</p>\n</li>\n<li><p>所有结点存储一个关键字；</p>\n</li>\n<li><p>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-628b6a7b9aaf4b91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p><strong>二叉树定义：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//define a tree using cursors</span><br><span class=\"line\">typedef struct tREE</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int data;</span><br><span class=\"line\">  int left;</span><br><span class=\"line\">  int right;</span><br><span class=\"line\">&#125; TREE;</span><br></pre></td></tr></table></figure>\n<p><strong>寻找最小节点：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//找到最小的节点</span><br><span class=\"line\">static int find_min (int root)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  if (tr[root].left &lt; 0)</span><br><span class=\"line\">    return (root);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (find_min (tr[root].left));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p><strong>插入:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//插入</span><br><span class=\"line\">static int insert (int root, int i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  if (root &lt; 0)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    return (i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (tr[i].data &lt; tr[root].data)</span><br><span class=\"line\">    tr[root].left =  insert (tr[root].left, i) ;</span><br><span class=\"line\">  else if (tr[i].data &gt; tr[root].data)</span><br><span class=\"line\">    tr[root].right = insert (tr[root].right, i) ;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>删除:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//删除节点i</span><br><span class=\"line\">static int delete (int root, int i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (root &lt; 0)</span><br><span class=\"line\">    return (-1);</span><br><span class=\"line\"></span><br><span class=\"line\">  if (tr[i].data &lt; tr[root].data)</span><br><span class=\"line\">    tr[root].left = delete (tr[root].left, i);</span><br><span class=\"line\">  else if (tr[i].data &gt; tr[root].data)</span><br><span class=\"line\">    tr[root].right = delete (tr[root].right, i);</span><br><span class=\"line\">  else if (tr[root].left &gt; 0 &amp;&amp; tr[root].right &gt; 0)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    tmp = find_min (tr[root].right);</span><br><span class=\"line\">    tr[root].data = tr[tmp].data;</span><br><span class=\"line\">    tr[root].right = delete (tr[root].right, tmp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else if (tr[root].left &gt; 0)</span><br><span class=\"line\">    return (tr[root].left);</span><br><span class=\"line\">  else</span><br><span class=\"line\">    return (tr[root].right);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"学习笔记5","url":"http://mu-mo.top/2017/12/24/学习笔记/学习笔记5/","content":"<ol>\n<li><p>Linux多线程同步机制 - 信号量</p>\n<p>信号量函数定义如下：<br>include &lt;sys/sem.h&gt;<br>int semctl(int sem_id, int sem_num, int command, …);<br>int semget(key_t key, int num_sems, int sem_flags);<br>int semop(int sem_id, struct sembuf *sem_ops, size_t num_sem_ops);</p>\n<p>事实上，为了获得我们特定操作所需要的#define定义，我们需要在包含sys/sem.h文件之前通常需要包含sys/types.h与sys/ipc.h文件。而在某些情况下，这并不是必须的。</p>\n<p>因为我们会依次了解每一个函数，记住，这些函数的设计是用于操作信号量值数组的，从而会使用其操作向比单个信号量所需要的操作更为复杂。</p>\n<p>注意，key的作用类似于一个文件名，因为他表示程序也许会使用或是合作所用的资源。相类似的，由semget所返回的并且为其他的共享内存函数所用的标 识符与由fopen函数所返回 的FILE *十分相似，因为他被进程用来访问共享文件。而且与文件类似，不同的进程会有不同的信号量标识符，尽管他们指向相同的信号量。key与标识符的用法对于在 这里所讨论的所有IPC程序都是通用的，尽管每一个程序会使用独立的key与标识符。</p>\n<p><strong>semget</strong> </p>\n<p>semget函数创建一个新的信号量或是获得一个已存在的信号量键值。</p>\n<p>int semget(key_t key, int num_sems, int sem_flags);</p>\n<p>第一个参数key是一个用来允许不相关的进程访问相同信号量的整数值。所有的信号量是为不同的程序通过提供一个key来间接访问的，对于每一个信号量系统 生成一个信号量标识符。信号量键值只可以由semget获得，所有其他的信号量函数所用的信号量标识符都是由semget所返回的。</p>\n<p>还有一个特殊的信号量key值，IPC_PRIVATE(通常为0)，其作用是创建一个只有创建进程可以访问的信号量。这通常并没有有用的目的，而幸运的是，因为在某些Linux系统上，手册页将IPC_PRIVATE并没有阻止其他的进程访问信号量作为一个bug列出。</p>\n<p>num_sems参数是所需要的信号量数目。这个值通常总是1。</p>\n<p>sem_flags参数是一个标记集合，与open函数的标记十分类似。低九位是信号的权限，其作用与文件权限类似。另外，这些标记可以与 IPC_CREAT进行或操作来创建新的信号量。设置IPC_CREAT标记并且指定一个已经存在的信号量键值并不是一个错误。如果不需 要，IPC_CREAT标记只是被简单的忽略。我们可以使用IPC_CREAT与IPC_EXCL的组合来保证我们可以获得一个新的，唯一的信号量。如果 这个信号量已经存在，则会返回一个错误。</p>\n<p>如果成功，semget函数会返回一个正数；这是用于其他信号量函数的标识符。如果失败，则会返回-1。</p>\n<p><strong>semop</strong> </p>\n<p>函数semop用来改变信号量的值：</p>\n<p>int semop(int sem_id, struct sembuf *sem_ops, size_t num_sem_ops);</p>\n<p>第一个参数，sem_id，是由semget函数所返回的信号量标识符。第二个参数，sem_ops，是一个指向结构数组的指针，其中的每一个结构至少包含下列成员：</p>\n<p>struct sembuf {<br>​    short sem_num;<br>​    short sem_op;<br>​    short sem_flg;<br>}</p>\n<p>第一个成员，sem_num，是信号量数目，通常为0，除非我们正在使用一个信号量数组。sem_op成员是信号量的变化量值。（我们可以以任何量改变信 号量值，而不只是1）通常情况下中使用两个值，-1是我们的P操作，用来等待一个信号量变得可用，而+1是我们的V操作，用来通知一个信号量可用。</p>\n<p>最后一个成员，sem_flg，通常设置为SEM_UNDO。这会使得操作系统跟踪当前进程对信号量所做的改变，而且如果进程终止而没有释放这个信号量， 如果信号量为这个进程所占有，这个标记可以使得操作系统自动释放这个信号量。将sem_flg设置为SEM_UNDO是一个好习惯，除非我们需要不同的行 为。如果我们确实变我们需要一个不同的值而不是SEM_UNDO，一致性是十分重要的，否则我们就会变得十分迷惑，当我们的进程退出时，内核是否会尝试清 理我们的信号量。</p>\n<p>semop的所用动作会同时作用，从而避免多个信号量的使用所引起的竞争条件。我们可以在手册页中了解关于semop处理更为详细的信息。</p>\n<p><strong>semctl</strong> </p>\n<p>semctl函数允许信号量信息的直接控制：</p>\n<p>int semctl(int sem_id, int sem_num, int command, …);</p>\n<p>第一个参数，sem_id，是由semget所获得的信号量标识符。sem_num参数是信号量数目。当我们使用信号量数组时会用到这个参数。通常，如果 这是第一个且是唯一的一个信号量，这个值为0。command参数是要执行的动作，而如果提供了额外的参数，则是union semun，根据X/OPEN规范，这个参数至少包括下列参数：</p>\n<p>union semun {<br>​    int val;<br>​    struct semid_ds <em>buf;<br>​    unsigned short </em>array;<br>}</p>\n<p>许多版本的Linux在头文件(通常为sem.h)中定义了semun联合，尽管X/Open确认说我们必须定义我们自己的联合。如果我们发现我们确实需 要定义我们自己的联合，我们可以查看semctl手册页了解定义。如果有这样的情况，建议使用手册页中提供的定义，尽管这个定义与上面的有区别。</p>\n<p>有多个不同的command值可以用于semctl。在这里我们描述两个会经常用到的值。要了解semctl功能的详细信息，我们应该查看手册页。</p>\n<p>这两个通常的command值为：</p>\n<p>SETVAL：用于初始化信号量为一个已知的值。所需要的值作为联合semun的val成员来传递。在信号量第一次使用之前需要设置信号量。<br>IPC_RMID：当信号量不再需要时用于删除一个信号量标识。</p>\n<p>semctl函数依据command参数会返回不同的值。对于SETVAL与IPC_RMID，如果成功则会返回0，否则会返回-1。</p>\n</li>\n<li><p>线程操作</p>\n<p>踩坑：由于pthread 库不是 Linux 系统默认的库，连接时需要使用静态库 libpthread.a，所以在使用pthread_create()创建线程，以及调用 pthread_atfork()函数建立fork处理程序时，在编译中要加 -lpthread参数。</p>\n<p>例如：<code>gcc thread.c -o thread -lpthread</code></p>\n<p>​</p>\n<p>头文件：pthread.h</p>\n<ul>\n<li>pthread_create()</li>\n</ul>\n<p>功能：创建线程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int pthread_create(pthread_t *restrict tidp, //返回线程的ID</span><br><span class=\"line\">                    const pthread_attr_t *restrict attr, //线程属性，默认为NULL</span><br><span class=\"line\">                    void *(*start_rtn)(void), //线程函数入口地址</span><br><span class=\"line\">                    void *restrict arg); //参数</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pthread_join()</li>\n</ul>\n<p>功能：以阻塞的方式等待thread指定的线程结束。当函数返回时，被等待线程的资源被收回。如果进程已经结束，那么该函数会立即返回。并且thread指定的线程必须是joinable的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int pthread_join(pthread_t thread, void **retval);</span><br></pre></td></tr></table></figure>\n<p>参数：<br>thread: 线程标识符，即线程ID，标识唯一线程。<br>retval: 用户定义的指针，用来存储被等待线程的返回值。<br>返回值 ： 0代表成功，失败返回的则是错误号。</p>\n</li>\n<li><p>flask-mail</p>\n<ul>\n<li><p>安装 Flask-Mail</p>\n<p>   <code>pip install Flask-Mail</code></p>\n<p>   <strong>Flask-Mail</strong> 使用标准的 Flask 配置 API 进行配置。</p>\n<ul>\n<li><strong>MAIL_SERVER</strong> : 默认为 <strong>‘localhost’</strong></li>\n<li><strong>MAIL_PORT</strong> : 默认为 <strong>25</strong></li>\n<li><strong>MAIL_USE_TLS</strong> : 默认为 <strong>False</strong></li>\n<li><strong>MAIL_USE_SSL</strong> : 默认为 <strong>False</strong></li>\n<li><strong>MAIL_DEBUG</strong> : 默认为 <strong>app.debug</strong></li>\n<li><strong>MAIL_USERNAME</strong> : 默认为 <strong>None</strong></li>\n<li><strong>MAIL_PASSWORD</strong> : 默认为 <strong>None</strong></li>\n<li><strong>MAIL_DEFAULT_SENDER</strong> : 默认为 <strong>None</strong></li>\n<li><strong>MAIL_MAX_EMAILS</strong> : 默认为 <strong>None</strong></li>\n<li><strong>MAIL_SUPPRESS_SEND</strong> : 默认为 <strong>app.testing</strong></li>\n<li><strong>MAIL_ASCII_ATTACHMENTS</strong> : 默认为 <strong>False</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p><code>Mail</code> 实例进行管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\">from flask_mail import Mail</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">mail = Mail(app)</span><br></pre></td></tr></table></figure>\n<p>  或者你也可以在应用程序配置的时候设置你的 Mail 实例，通过使用 init_app 方法:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mail = Mail()</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">mail.init_app(app)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发送邮件</p>\n<p>为了能够发送邮件，首先需要创建一个 <code>Message</code> 实例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask_mail import Message</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/&quot;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\"></span><br><span class=\"line\">    msg = Message(&quot;Hello&quot;,</span><br><span class=\"line\">                  sender=&quot;from@example.com&quot;,</span><br><span class=\"line\">                  recipients=[&quot;to@example.com&quot;])</span><br></pre></td></tr></table></figure>\n<p>你能够设置一个或者多个收件人:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msg.recipients = [&quot;you@example.com&quot;]</span><br><span class=\"line\">msg.add_recipient(&quot;somebodyelse@example.com&quot;)</span><br></pre></td></tr></table></figure>\n<p>如果你设置了 <code>MAIL_DEFAULT_SENDER</code>，就不必再次填写发件人，默认情况下将会使用配置项的发件人:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msg = Message(&quot;Hello&quot;,</span><br><span class=\"line\">              recipients=[&quot;to@example.com&quot;])</span><br></pre></td></tr></table></figure>\n<p>如果 <code>sender</code> 是一个二元组，它将会被分成姓名和邮件地址:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msg = Message(&quot;Hello&quot;,</span><br><span class=\"line\">              sender=(&quot;Me&quot;, &quot;me@example.com&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">assert msg.sender == &quot;Me &lt;me@example.com&gt;&quot;</span><br></pre></td></tr></table></figure>\n<p>邮件内容可以包含主体以及/或者 HTML:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msg.body = &quot;testing&quot;</span><br><span class=\"line\">msg.html = &quot;&lt;b&gt;testing&lt;/b&gt;&quot;</span><br></pre></td></tr></table></figure>\n<p>最后，发送邮件的时候请使用 Flask 应用设置的 <code>Mail</code> 实例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mail.send(msg)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>大量邮件</p>\n<p>通常在一个 Web 应用中每一个请求会同时发送一封或者两封邮件。在某些特定的场景下，有可能会发送数十或者数百封邮件，不过这种发送工作会给交离线任务或者脚本执行。</p>\n<p>在这种情况下发送邮件的代码会有些不同:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">with mail.connect() as conn:</span><br><span class=\"line\">    for user in users:</span><br><span class=\"line\">        message = &apos;...&apos;</span><br><span class=\"line\">        subject = &quot;hello, %s&quot; % user.name</span><br><span class=\"line\">        msg = Message(recipients=[user.email],</span><br><span class=\"line\">                      body=message,</span><br><span class=\"line\">                      subject=subject)</span><br><span class=\"line\"></span><br><span class=\"line\">        conn.send(msg)</span><br></pre></td></tr></table></figure>\n<p>与电子邮件服务器的连接会一直保持活动状态直到所有的邮件都已经发送完成后才会关闭（断开）。</p>\n<p>有些邮件服务器会限制一次连接中的发送邮件的上限。你可以设置重连前的发送邮件的最大数，通过配置 <strong>MAIL_MAX_EMAILS</strong> 。</p>\n</li>\n<li><p>附件</p>\n<p>在邮件中添加附件同样非常简单:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">with app.open_resource(&quot;image.png&quot;) as fp:</span><br><span class=\"line\">    msg.attach(&quot;image.png&quot;, &quot;image/png&quot;, fp.read())</span><br></pre></td></tr></table></figure>\n<p>具体细节请参看 <a href=\"http://www.pythondoc.com/flask-mail/index.html#api\" target=\"_blank\" rel=\"noopener\">API</a> 。</p>\n<p>如果 <code>MAIL_ASCII_ATTACHMENTS</code> 设置成 <strong>True</strong> 的话，文件名将会转换成 ASCII 的。 当文件名是以 UTF-8 编码的时候，使用邮件转发的时候会修改邮件内容并且混淆 Content-Disposition 描述，这个时候 <code>MAIL_ASCII_ATTACHMENTS</code> 配置项是十分有用的。转换成 ASCII 的基本方式就是对 non-ASCII 字符的去除。任何一个 unicode 字符能够被 NFKD 分解成一个或者多个 ASCII 字符。</p>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p>SMTP发送邮件</p>\n<p>SMTP是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。</p>\n<p>Python对SMTP支持有<code>smtplib</code>和<code>email</code>两个模块，<code>email</code>负责构造邮件，<code>smtplib</code>负责发送邮件。</p>\n<p>首先，我们来构造一个最简单的纯文本邮件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\">msg = MIMEText(&apos;hello, send by Python...&apos;, &apos;plain&apos;, &apos;utf-8&apos;)</span><br></pre></td></tr></table></figure>\n<p>注意到构造<code>MIMEText</code>对象时，第一个参数就是邮件正文，第二个参数是MIME的subtype，传入<code>&#39;plain&#39;</code>，最终的MIME就是<code>&#39;text/plain&#39;</code>，最后一定要用<code>utf-8</code>编码保证多语言兼容性。</p>\n<p>然后，通过SMTP发出去：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 输入Email地址和口令:</span><br><span class=\"line\">from_addr = raw_input(&apos;From: &apos;)</span><br><span class=\"line\">password = raw_input(&apos;Password: &apos;)</span><br><span class=\"line\"># 输入SMTP服务器地址:</span><br><span class=\"line\">smtp_server = raw_input(&apos;SMTP server: &apos;)</span><br><span class=\"line\"># 输入收件人地址:</span><br><span class=\"line\">to_addr = raw_input(&apos;To: &apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">import smtplib</span><br><span class=\"line\">server = smtplib.SMTP(smtp_server, 25) # SMTP协议默认端口是25</span><br><span class=\"line\">server.set_debuglevel(1)</span><br><span class=\"line\">server.login(from_addr, password)</span><br><span class=\"line\">server.sendmail(from_addr, [to_addr], msg.as_string())</span><br><span class=\"line\">server.quit()</span><br></pre></td></tr></table></figure>\n<p>我们用<code>set_debuglevel(1)</code>就可以打印出和SMTP服务器交互的所有信息。SMTP协议就是简单的文本命令和响应。<code>login()</code>方法用来登录SMTP服务器，<code>sendmail()</code>方法就是发邮件，由于可以一次发给多个人，所以传入一个<code>list</code>，邮件正文是一个<code>str</code>，<code>as_string()</code>把<code>MIMEText</code>对象变成<code>str</code>。</p>\n<p>如果一切顺利，就可以在收件人信箱中收到我们刚发送的Email：</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/0014079993639301a4130bf23574d3586f91928c4f6d6e3000\" alt=\"send-mail\"></p>\n<p>仔细观察，发现如下问题：</p>\n<ol>\n<li>邮件没有主题；</li>\n<li>收件人的名字没有显示为友好的名字，比如<code>Mr Green &lt;green@example.com&gt;</code>；</li>\n<li>明明收到了邮件，却提示不在收件人中。</li>\n</ol>\n<p>这是因为邮件主题、如何显示发件人、收件人等信息并不是通过SMTP协议发给MTA，而是包含在发给MTA的文本中的，所以，我们必须把<code>From</code>、<code>To</code>和<code>Subject</code>添加到<code>MIMEText</code>中，才是一封完整的邮件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">from email import encoders</span><br><span class=\"line\">from email.header import Header</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\">from email.utils import parseaddr, formataddr</span><br><span class=\"line\">import smtplib</span><br><span class=\"line\"></span><br><span class=\"line\">def _format_addr(s):</span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    return formataddr(( \\</span><br><span class=\"line\">        Header(name, &apos;utf-8&apos;).encode(), \\</span><br><span class=\"line\">        addr.encode(&apos;utf-8&apos;) if isinstance(addr, unicode) else addr))</span><br><span class=\"line\"></span><br><span class=\"line\">from_addr = raw_input(&apos;From: &apos;)</span><br><span class=\"line\">password = raw_input(&apos;Password: &apos;)</span><br><span class=\"line\">to_addr = raw_input(&apos;To: &apos;)</span><br><span class=\"line\">smtp_server = raw_input(&apos;SMTP server: &apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">msg = MIMEText(&apos;hello, send by Python...&apos;, &apos;plain&apos;, &apos;utf-8&apos;)</span><br><span class=\"line\">msg[&apos;From&apos;] = _format_addr(u&apos;Python爱好者 &lt;%s&gt;&apos; % from_addr)</span><br><span class=\"line\">msg[&apos;To&apos;] = _format_addr(u&apos;管理员 &lt;%s&gt;&apos; % to_addr)</span><br><span class=\"line\">msg[&apos;Subject&apos;] = Header(u&apos;来自SMTP的问候……&apos;, &apos;utf-8&apos;).encode()</span><br><span class=\"line\"></span><br><span class=\"line\">server = smtplib.SMTP(smtp_server, 25)</span><br><span class=\"line\">server.set_debuglevel(1)</span><br><span class=\"line\">server.login(from_addr, password)</span><br><span class=\"line\">server.sendmail(from_addr, [to_addr], msg.as_string())</span><br><span class=\"line\">server.quit()</span><br></pre></td></tr></table></figure>\n<p>我们编写了一个函数<code>_format_addr()</code>来格式化一个邮件地址。注意不能简单地传入<code>name &lt;addr@example.com&gt;</code>，因为如果包含中文，需要通过<code>Header</code>对象进行编码。</p>\n<p><code>msg[&#39;To&#39;]</code>接收的是字符串而不是list，如果有多个邮件地址，用<code>,</code>分隔即可。</p>\n<p>再发送一遍邮件，就可以在收件人邮箱中看到正确的标题、发件人和收件人：</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/00140800242227674f8f0eed1a64b9e95f2ab9752755e23000\" alt=\"mail-with-header\"></p>\n<p>你看到的收件人的名字很可能不是我们传入的<code>管理员</code>，因为很多邮件服务商在显示邮件时，会把收件人名字自动替换为用户注册的名字，但是其他收件人名字的显示不受影响。</p>\n<p>如果我们查看Email的原始内容，可以看到如下经过编码的邮件头：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">From: =?utf-8?b?UHl0aG9u54ix5aW96ICF?= &lt;xxxxxx@163.com&gt;</span><br><span class=\"line\">To: =?utf-8?b?566h55CG5ZGY?= &lt;xxxxxx@qq.com&gt;</span><br><span class=\"line\">Subject: =?utf-8?b?5p2l6IeqU01UUOeahOmXruWAmeKApuKApg==?=</span><br></pre></td></tr></table></figure>\n<p>这就是经过<code>Header</code>对象编码的文本，包含utf-8编码信息和Base64编码的文本。如果我们自己来手动构造这样的编码文本，显然比较复杂。</p>\n<h3 id=\"发送HTML邮件\"><a href=\"#发送HTML邮件\" class=\"headerlink\" title=\"发送HTML邮件\"></a>发送HTML邮件</h3><p>如果我们要发送HTML邮件，而不是普通的纯文本文件怎么办？方法很简单，在构造<code>MIMEText</code>对象时，把HTML字符串传进去，再把第二个参数由<code>plain</code>变为<code>html</code>就可以了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msg = MIMEText(&apos;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&apos; +</span><br><span class=\"line\">    &apos;&lt;p&gt;send by &lt;a href=&quot;http://www.python.org&quot;&gt;Python&lt;/a&gt;...&lt;/p&gt;&apos; +</span><br><span class=\"line\">    &apos;&lt;/body&gt;&lt;/html&gt;&apos;, &apos;html&apos;, &apos;utf-8&apos;)</span><br></pre></td></tr></table></figure>\n<p>再发送一遍邮件，你将看到以HTML显示的邮件：</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001408003582561ea3bdf0296fe49e29a7c20f52ded48a1000\" alt=\"html-mail\"></p>\n<h3 id=\"发送附件\"><a href=\"#发送附件\" class=\"headerlink\" title=\"发送附件\"></a>发送附件</h3><p>如果Email中要加上附件怎么办？带附件的邮件可以看做包含若干部分的邮件：文本和各个附件本身，所以，可以构造一个<code>MIMEMultipart</code>对象代表邮件本身，然后往里面加上一个<code>MIMEText</code>作为邮件正文，再继续往里面加上表示附件的<code>MIMEBase</code>对象即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 邮件对象:</span><br><span class=\"line\">msg = MIMEMultipart()</span><br><span class=\"line\">msg[&apos;From&apos;] = _format_addr(u&apos;Python爱好者 &lt;%s&gt;&apos; % from_addr)</span><br><span class=\"line\">msg[&apos;To&apos;] = _format_addr(u&apos;管理员 &lt;%s&gt;&apos; % to_addr)</span><br><span class=\"line\">msg[&apos;Subject&apos;] = Header(u&apos;来自SMTP的问候……&apos;, &apos;utf-8&apos;).encode()</span><br><span class=\"line\"></span><br><span class=\"line\"># 邮件正文是MIMEText:</span><br><span class=\"line\">msg.attach(MIMEText(&apos;send with file...&apos;, &apos;plain&apos;, &apos;utf-8&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加附件就是加上一个MIMEBase，从本地读取一个图片:</span><br><span class=\"line\">with open(&apos;/Users/michael/Downloads/test.png&apos;, &apos;rb&apos;) as f:</span><br><span class=\"line\">    # 设置附件的MIME和文件名，这里是png类型:</span><br><span class=\"line\">    mime = MIMEBase(&apos;image&apos;, &apos;png&apos;, filename=&apos;test.png&apos;)</span><br><span class=\"line\">    # 加上必要的头信息:</span><br><span class=\"line\">    mime.add_header(&apos;Content-Disposition&apos;, &apos;attachment&apos;, filename=&apos;test.png&apos;)</span><br><span class=\"line\">    mime.add_header(&apos;Content-ID&apos;, &apos;&lt;0&gt;&apos;)</span><br><span class=\"line\">    mime.add_header(&apos;X-Attachment-Id&apos;, &apos;0&apos;)</span><br><span class=\"line\">    # 把附件的内容读进来:</span><br><span class=\"line\">    mime.set_payload(f.read())</span><br><span class=\"line\">    # 用Base64编码:</span><br><span class=\"line\">    encoders.encode_base64(mime)</span><br><span class=\"line\">    # 添加到MIMEMultipart:</span><br><span class=\"line\">    msg.attach(mime)</span><br></pre></td></tr></table></figure>\n<p>然后，按正常发送流程把<code>msg</code>（注意类型已变为<code>MIMEMultipart</code>）发送出去，就可以收到如下带附件的邮件：</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/0014080077329276557d648f58540f48d04e58520504665000\" alt=\"mimemultipart\"></p>\n<h3 id=\"发送图片\"><a href=\"#发送图片\" class=\"headerlink\" title=\"发送图片\"></a>发送图片</h3><p>如果要把一个图片嵌入到邮件正文中怎么做？直接在HTML邮件中链接图片地址行不行？答案是，大部分邮件服务商都会自动屏蔽带有外链的图片，因为不知道这些链接是否指向恶意网站。</p>\n<p>要把图片嵌入到邮件正文中，我们只需按照发送附件的方式，先把邮件作为附件添加进去，然后，在HTML中通过引用<code>src=&quot;cid:0&quot;</code>就可以把附件作为图片嵌入了。如果有多个图片，给它们依次编号，然后引用不同的<code>cid:x</code>即可。</p>\n<p>把上面代码加入<code>MIMEMultipart</code>的<code>MIMEText</code>从<code>plain</code>改为<code>html</code>，然后在适当的位置引用图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msg.attach(MIMEText(&apos;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&apos; +</span><br><span class=\"line\">    &apos;&lt;p&gt;&lt;img src=&quot;cid:0&quot;&gt;&lt;/p&gt;&apos; +</span><br><span class=\"line\">    &apos;&lt;/body&gt;&lt;/html&gt;&apos;, &apos;html&apos;, &apos;utf-8&apos;))</span><br></pre></td></tr></table></figure>\n<p>再次发送，就可以看到图片直接嵌入到邮件正文的效果：</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001408019030110a0be121000cc46139f7a72982b19daf3000\" alt=\"email-inline-image\"></p>\n<h3 id=\"同时支持HTML和Plain格式\"><a href=\"#同时支持HTML和Plain格式\" class=\"headerlink\" title=\"同时支持HTML和Plain格式\"></a>同时支持HTML和Plain格式</h3><p>如果我们发送HTML邮件，收件人通过浏览器或者Outlook之类的软件是可以正常浏览邮件内容的，但是，如果收件人使用的设备太古老，查看不了HTML邮件怎么办？</p>\n<p>办法是在发送HTML的同时再附加一个纯文本，如果收件人无法查看HTML格式的邮件，就可以自动降级查看纯文本邮件。</p>\n<p>利用<code>MIMEMultipart</code>就可以组合一个HTML和Plain，要注意指定subtype是<code>alternative</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msg = MIMEMultipart(&apos;alternative&apos;)</span><br><span class=\"line\">msg[&apos;From&apos;] = ...</span><br><span class=\"line\">msg[&apos;To&apos;] = ...</span><br><span class=\"line\">msg[&apos;Subject&apos;] = ...</span><br><span class=\"line\"></span><br><span class=\"line\">msg.attach(MIMEText(&apos;hello&apos;, &apos;plain&apos;, &apos;utf-8&apos;))</span><br><span class=\"line\">msg.attach(MIMEText(&apos;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;, &apos;html&apos;, &apos;utf-8&apos;))</span><br><span class=\"line\"># 正常发送msg对象...</span><br></pre></td></tr></table></figure>\n<h3 id=\"加密SMTP\"><a href=\"#加密SMTP\" class=\"headerlink\" title=\"加密SMTP\"></a>加密SMTP</h3><p>使用标准的25端口连接SMTP服务器时，使用的是明文传输，发送邮件的整个过程可能会被窃听。要更安全地发送邮件，可以加密SMTP会话，实际上就是先创建SSL安全连接，然后再使用SMTP协议发送邮件。</p>\n<p>某些邮件服务商，例如Gmail，提供的SMTP服务必须要加密传输。我们来看看如何通过Gmail提供的安全SMTP发送邮件。</p>\n<p>必须知道，Gmail的SMTP端口是587，因此，修改代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">smtp_server = &apos;smtp.gmail.com&apos;</span><br><span class=\"line\">smtp_port = 587</span><br><span class=\"line\">server = smtplib.SMTP(smtp_server, smtp_port)</span><br><span class=\"line\">server.starttls()</span><br><span class=\"line\"># 剩下的代码和前面的一模一样:</span><br><span class=\"line\">server.set_debuglevel(1)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>只需要在创建<code>SMTP</code>对象后，立刻调用<code>starttls()</code>方法，就创建了安全连接。后面的代码和前面的发送邮件代码完全一样。</p>\n<p>如果因为网络问题无法连接Gmail的SMTP服务器，请相信我们的代码是没有问题的，你需要对你的网络设置做必要的调整。</p>\n</li>\n<li><p>jwt</p>\n<p>JWT是Auth0提出的通过对JSON进行加密签名来实现授权验证的方案，编码之后的JWT看起来是这样的一串字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>\n<p>由 <code>.</code> 分为三段，通过解码可以得到：</p>\n<ol>\n<li>头部（Header）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 包括类别（typ）、加密算法（alg）；</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class=\"line\">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jwt的头部包含两部分信息：</p>\n<ul>\n<li>声明类型，这里是jwt</li>\n<li>声明加密的算法 通常直接使用 HMAC SHA256</li>\n</ul>\n<p>然后将头部进行base64加密（该加密是可以对称解密的)，构成了第一部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>载荷（payload）</li>\n</ol>\n<p>载荷就是存放有效信息的地方。这些有效信息包含三个部分：</p>\n<ul>\n<li>标准中注册声明</li>\n<li>公共的声名</li>\n<li>私有的声明</li>\n</ul>\n<p><code>公共的声明 ：</code><br>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密。</p>\n<p><code>私有的声明 ：</code><br>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 包括需要传递的用户信息；</span><br><span class=\"line\">&#123; &quot;iss&quot;: &quot;Online JWT Builder&quot;, </span><br><span class=\"line\">  &quot;iat&quot;: 1416797419, </span><br><span class=\"line\">  &quot;exp&quot;: 1448333419, </span><br><span class=\"line\">  &quot;aud&quot;: &quot;www.gusibi.com&quot;, </span><br><span class=\"line\">  &quot;sub&quot;: &quot;uid&quot;, </span><br><span class=\"line\">  &quot;nickname&quot;: &quot;goodspeed&quot;, </span><br><span class=\"line\">  &quot;username&quot;: &quot;goodspeed&quot;, </span><br><span class=\"line\">  &quot;scopes&quot;: [ &quot;admin&quot;, &quot;user&quot; ] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>iss: 该JWT的签发者，是否使用是可选的；</li>\n<li>sub: 该JWT所面向的用户，是否使用是可选的；</li>\n<li>aud: 接收该JWT的一方，是否使用是可选的；</li>\n<li>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；</li>\n<li>iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；</li>\n</ul>\n<p>其他还有：</p>\n<ul>\n<li>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</li>\n<li>jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。</li>\n</ul>\n<p>将上面的JSON对象进行<code>base64编码</code>可以得到下面的字符串。这个字符串我们将它称作JWT的Payload（载荷）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE0MTY3OTc0MTksImV4cCI6MTQ0ODMzMzQxOSwiYXVkIjoid3d3Lmd1c2liaS5jb20iLCJzdWIiOiIwMTIzNDU2Nzg5Iiwibmlja25hbWUiOiJnb29kc3BlZWQiLCJ1c2VybmFtZSI6Imdvb2RzcGVlZCIsInNjb3BlcyI6WyJhZG1pbiIsInVzZXIiXX0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>信息会暴露</code>：由于这里用的是可逆的base64 编码，所以第二部分的数据实际上是明文的。我们应该避免在这里存放不能公开的隐私信息。</p>\n</blockquote>\n<ol start=\"3\">\n<li>签名（signature）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 根据alg算法与私有秘钥进行加密得到的签名字串；</span><br><span class=\"line\">// 这一段是最重要的敏感信息，只能在服务端解密；</span><br><span class=\"line\">HMACSHA256(  </span><br><span class=\"line\">    base64UrlEncode(header) + &quot;.&quot; +</span><br><span class=\"line\">    base64UrlEncode(payload),</span><br><span class=\"line\">    SECREATE_KEY</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p>\n<ul>\n<li>header (base64后的)</li>\n<li>payload (base64后的)</li>\n<li>secret</li>\n</ul>\n<p>将上面的两个编码后的字符串都用句号.连接在一起（头部在前），就形成了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9</span><br></pre></td></tr></table></figure>\n<p>最后，我们将上面拼接完的字符串用HS256算法进行加密。在加密的时候，我们还需要提供一个密钥（secret）。如果我们用 <code>secret</code> 作为密钥的话，那么就可以得到我们加密后的内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pq5IDv-yaktw6XEa5GEv07SzS9ehe6AcVSdTj0Ini4o</span><br></pre></td></tr></table></figure>\n<p>将这三部分用.连接成一个完整的字符串,构成了最终的jwt:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE0MTY3OTc0MTksImV4cCI6MTQ0ODMzMzQxOSwiYXVkIjoid3d3Lmd1c2liaS5jb20iLCJzdWIiOiIwMTIzNDU2Nzg5Iiwibmlja25hbWUiOiJnb29kc3BlZWQiLCJ1c2VybmFtZSI6Imdvb2RzcGVlZCIsInNjb3BlcyI6WyJhZG1pbiIsInVzZXIiXX0.pq5IDv-yaktw6XEa5GEv07SzS9ehe6AcVSdTj0Ini4o</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>签名的目的</code>：签名实际上是对头部以及载荷内容进行签名。所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。<br>这样就能保证token不会被篡改。</p>\n</blockquote>\n<p>token 生成好之后，接下来就可以用token来和服务器进行通讯了。</p>\n<p>下图是client 使用 JWT 与server 交互过程:</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000010312474\" alt=\"img\"></p>\n<p>这里在第三步我们得到 JWT 之后，需要将JWT存放在 client，之后的每次需要认证的请求都要把JWT发送过来。（请求时可以放到 header 的 Authorization ）</p>\n<ol start=\"4\">\n<li>JWT 使用场景</li>\n</ol>\n<p>JWT的主要优势在于使用无状态、可扩展的方式处理应用中的用户会话。服务端可以通过内嵌的声明信息，很容易地获取用户的会话信息，而不需要去访问用户或会话的数据库。在一个分布式的面向服务的框架中，这一点非常有用。</p>\n<p>但是，如果系统中需要使用黑名单实现长期有效的token刷新机制，这种无状态的优势就不明显了。</p>\n<p>优点:</p>\n<ul>\n<li>快速开发</li>\n<li>不需要cookie</li>\n<li>JSON在移动端的广泛应用</li>\n<li>不依赖于社交登录</li>\n<li>相对简单的概念理解</li>\n</ul>\n<p>缺点:</p>\n<ul>\n<li>Token有长度限制</li>\n<li>Token不能撤销</li>\n<li>需要token有失效时间限制(exp)</li>\n</ul>\n</li>\n<li><p>pop3收取邮件</p>\n<p>   python的poplib也针对这些命令分别提供了对应的方法,上面在第二列里已经标出来。</p>\n<p>​</p>\n<p>收取邮件的过程一般是：</p>\n<ol>\n<li>连接pop3服务器 (poplib.POP3.<strong>init</strong> 或者poplib.POP3_SSL.<strong>init</strong>)</li>\n<li>发送用户名和密码进行验证 (poplib.POP3.user  poplib.POP3.pass_)</li>\n<li>获取邮箱中信件信息 (poplib.POP3.stat)</li>\n<li>收取邮件 (poplib.POP3.retr)</li>\n<li>删除邮件 (poplib.POP3.dele)</li>\n<li>退出 (poplib.POP3.quit)</li>\n</ol>\n<p>官方文档：</p>\n<ul>\n<li><p><code>POP3.set_debuglevel</code>(<em>level</em>)</p>\n<p>Set the instance’s debugging level. This controls the amount of debugging output printed. The default, <code>0</code>, produces no debugging output. A value of<code>1</code> produces a moderate amount of debugging output, generally a single line per request. A value of <code>2</code> or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection.</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p><code>POP3.getwelcome</code>()</p>\n<p>Returns the greeting string sent by the POP3 server.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.user</code>(<em>username</em>)</p>\n<p>Send user command, response should indicate that a password is required.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.pass_</code>(<em>password</em>)</p>\n<p>Send password, response includes message count and mailbox size. Note: the mailbox on the server is locked until <code>quit()</code> is called.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.apop</code>(<em>user</em>, <em>secret</em>)</p>\n<p>Use the more secure APOP authentication to log into the POP3 server.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.rpop</code>(<em>user</em>)</p>\n<p>Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.stat</code>()</p>\n<p>Get mailbox status. The result is a tuple of 2 integers: <code>(message count, mailbox size)</code>.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.list</code>([<em>which</em>])</p>\n<p>Request message list, result is in the form <code>(response, [&#39;mesg_num octets&#39;, ...], octets)</code>. If <em>which</em> is set, it is the message to list.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.retr</code>(<em>which</em>)</p>\n<p>Retrieve whole message number <em>which</em>, and set its seen flag. Result is in form <code>(response, [&#39;line&#39;, ...], octets)</code>.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.dele</code>(<em>which</em>)</p>\n<p>Flag message number <em>which</em> for deletion. On most servers deletions are not actually performed until QUIT (the major exception is Eudora QPOP, which deliberately violates the RFCs by doing pending deletes on any disconnect).</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.rset</code>()</p>\n<p>Remove any deletion marks for the mailbox.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.noop</code>()</p>\n<p>Do nothing. Might be used as a keep-alive.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.quit</code>()</p>\n<p>Signoff: commit changes, unlock mailbox, drop connection.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>POP3.top</code>(<em>which</em>, <em>howmuch</em>)</p>\n<p>Retrieves the message header plus <em>howmuch</em> lines of the message after the header of message number <em>which</em>. Result is in form <code>(response,[&#39;line&#39;, ...], octets)</code>.The POP3 TOP command this method uses, unlike the RETR command, doesn’t set the message’s seen flag; unfortunately, TOP is poorly specified in the RFCs and is frequently broken in off-brand servers. Test this method by hand against the POP3 servers you will use before trusting it.</p>\n</li>\n</ul>\n","categories":["学习笔记"],"tags":["学习笔记"]},{"title":"golang 新人入门配置学习","url":"http://mu-mo.top/2017/12/21/Golang/golang-新人入门配置学习/","content":"<ol>\n<li><p>windows下 golang 安装与配置</p>\n<p>请参照：<a href=\"http://www.jianshu.com/p/b6f34ae55c90\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/b6f34ae55c90</a></p>\n</li>\n<li><p>Ubuntu下 golang 安装与配置</p>\n<ul>\n<li><p>安装最新版本 golang 方法 （推荐）</p>\n<ol>\n<li><p>下载： <a href=\"https://www.golangtc.com/download\" target=\"_blank\" rel=\"noopener\">https://www.golangtc.com/download</a></p>\n</li>\n<li><p>解压安装包<code>tar -C /usr/local -xzf &lt;安装包&gt;</code> （其中 <code>/usr/local</code> 为 go 的解压目录即GOROOT，也可以安装到自己想要的位置，后面配置一下就行了）</p>\n</li>\n<li><p>环境配置</p>\n<ul>\n<li><p>在 ~/.bashrc 最后一行加上 <code>export PATH=$PATH:/usr/local/go/bin</code> </p>\n<p>注：<code>:</code> 为分隔符，即配置多个路径时使用； <code>/usr/local/go/bin</code> 为 go 安装位置下的 bin 目录</p>\n<p>功效：用于 在bash 下使用命令 <code>go</code> 等命令（可看 bin 目录下有哪些可执行文件）</p>\n</li>\n<li><p>之后 运行 <code>source .bashrc</code> 更新 PATH</p>\n<p>注：如果终端为 zsh, fish 命令  <code>source</code> 可能失效，这时需要输入 <code>bash</code> 进入 bash 执行，但是当返回zsh 或者 fish等其他终端时可能还是无法使用 命令 <code>go</code> ，这是因为你的 zsh 或者 fish 有自己单独的config 文件，你需要在那个文件最后一行加上相应代码（由于不同终端配置语法不同，此处不做扩展)</p>\n<blockquote>\n<p><code>/etc/profile，/root/.bashrc</code> 是系统全局环境变量设定<br><code>~/.profile，~/.bashrc</code> 用户家目录下的私有环境变量设定</p>\n<p>​</p>\n<p>当登入系统时候获得一个shell进程时，其读取环境设定档有三步</p>\n<ol>\n<li>首先读入的是全局环境变量设定档 <code>/etc/profile</code>，然后根据其内容读取额外的设定的文档</li>\n<li>然后根据不同使用者帐号，去其家目录读取 <code>~/.profile</code></li>\n<li>然后在根据用户帐号读取 <code>~/.bashrc</code> </li>\n</ol>\n<p>​</p>\n<p><code>~/.profile</code> 与 <code>~/.bashrc</code> 的区别<br><code>~/.profile</code> 可以设定本用户专有的路径，环境变量，等，它只能登入的时候执行一次<br><code>~/.bashrc</code> 也是某用户专有设定文档，可以设定路径，命令别名，每次shell script的执行都会使用它一次</p>\n</blockquote>\n</li>\n<li><p>配置 GOPATH （可选）</p>\n<ol>\n<li>在 <code>~/.bashrc</code> 或者  <code>~/.profile</code>最后一行加上 <code>export GOPATH=$HOME&lt;你的工作目录&gt;</code></li>\n<li>进入bash 执行 <code>source ~/.bashrc</code> 或者 <code>~/.profile</code> ，如果此时没有生效，可尝试重启或者注销重新登录</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>直接一键安装，但是版本不一定是最新的</p>\n<p>安装命令： <code>sudo apt install golang-go</code></p>\n<blockquote>\n<p>也可以在安装之前通过 <code>apt-cache search golang-go</code> 搜索可见 golang-go 版本等</p>\n</blockquote>\n<ul>\n<li>PATH 和 GOPATH 等见上文环境配置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>golang 项目目录结构</p>\n<p>一个Go项目在GOPATH下，会有如下三个目录：</p>\n<ul>\n<li>src存放源代码 ( .go )</li>\n<li>pkg编译后生成的文件 </li>\n<li>bin编译后生成的可执行文件 ( .a )</li>\n</ul>\n<p>​</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">      |--&lt;bin&gt;</span><br><span class=\"line\">      |--&lt;pkg&gt;</span><br><span class=\"line\">      |--&lt;src&gt;</span><br><span class=\"line\">         |--&lt;a&gt;</span><br><span class=\"line\">             |--&lt;a1&gt;</span><br><span class=\"line\">                 |--al.go</span><br><span class=\"line\">             |--&lt;a2&gt;</span><br><span class=\"line\">                 |--a2.go</span><br><span class=\"line\">         |--&lt;b&gt;</span><br><span class=\"line\">             |--b1.go</span><br><span class=\"line\">             |--b2.go</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>PATH GOPATH</code> 等简介</p>\n<ul>\n<li><p>GOROOT</p>\n<p>GO 语言安装的路径，如我的 Ubuntu 下的是<code>/usr/local/go</code>，类似于JAVA中的JAVA_HOME</p>\n</li>\n<li><p>GOPATH</p>\n<p>GOPATH 表示代码包或项目所在的地址，可以设置多个，不同地址之间使用 <code>:</code> 分隔</p>\n<blockquote>\n<p>假设：<code>GOPATH=~/project1:~/project2，GOROOT=/usr/local/go</code>，在代码中引用了包：<code>github.com/bitly/nsq/util</code></p>\n<p>GO程序在编译时会按先后次序到以下目录中寻找源码：</p>\n<p><code>~/project1/github.com/bitly/nsq/util</code></p>\n<p><code>~/project2/github.com/bitly/nsq/util</code></p>\n<p><code>/usr/local/go/github.com/bitly/nsq/util</code> </p>\n</blockquote>\n</li>\n<li><p>PATH</p>\n<p> <strong>可执行程序的路径</strong>，在命令行执行命令时，系统默认会在PATH中指定路径里寻找。比如linux下我们用最常用的<code>cd</code>命令，执行时我们并未指定 <code>cd</code> 命令的路径，也没有切换到 <code>cd</code> 所在的目录下去执行该命令。这就是因为 <code>cd</code> 命令的可执行文件所在的目录在PATH中录入了。</p>\n<p><code>go</code> 安装后，在GOROOT/bin目录，如 Ubuntu 的 <code>/usr/local/go/bin</code> 目录下会有 go 、godoc、gofmt 三个可执行命令。为了方便在编译go项目时方便的使用<code>go build、go install</code> 等命令，需要将GOROOT/bin目录加入到系统的PATH路径下。</p>\n</li>\n<li><p>GOARCH</p>\n<p>CPU 架构，如： amd64, 386</p>\n</li>\n<li><p>GOOS</p>\n<p>操作系统，如：linux</p>\n</li>\n<li><p>GOBIN</p>\n<p>工作目录下的bin文件夹</p>\n</li>\n<li><p>GOEXE</p>\n<p>生成的可执行文件后缀</p>\n</li>\n<li><p>GOHOSTARCH</p>\n<p>想要交叉编译的CPU架构</p>\n</li>\n<li><p>GOHOSTOS</p>\n<p>想要交叉编译的操作系统</p>\n</li>\n</ul>\n</li>\n<li><p>go 基本命令介绍</p>\n<p>Go命令一般<strong>格式</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go command [arg]</span><br></pre></td></tr></table></figure>\n<p>其中，command是操作命令，arg是该命令的参数</p>\n<h4 id=\"常用命令介绍：\"><a href=\"#常用命令介绍：\" class=\"headerlink\" title=\"常用命令介绍：\"></a>常用命令介绍：</h4><ul>\n<li><p>go get</p>\n<p>用于动态获取远程代码包，如果是从GitHub上获取，则需要现安装git，如果是从Google Code上获取，则需要安装hg。go get 获取的远程代码包将被下载到 <code>GOPATH</code> 目录下的<code>src</code>文件夹中</p>\n<p><code>eg: go get -u github.com/nsf/gocode</code></p>\n</li>\n<li><p>go install</p>\n<ol>\n<li>编译导入的包文件，所有导入的包文件编译完才会编译主程序</li>\n<li>将编译后生成的可执行文件放到bin目录下（GOPATH/bin），编译后的包文件放到pkg目录下（GOPATH/pkg）</li>\n</ol>\n</li>\n<li><p>go run</p>\n<p>用于编译并直接运行程序，它会生成一个临时文件（但不是一个标准的可执行文件），直接在命令行打印输出程序执行结果，方便用户调试。</p>\n<p><code>eg: go run main.go</code></p>\n</li>\n<li><p>go build</p>\n<p>用于测试编译包，可检查是否存在编译错误，如果被编译的是main包，会生成可执行文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#编译</span><br><span class=\"line\">go build main.go</span><br><span class=\"line\">#运行</span><br><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>go fmt</p>\n<p>用于格式化源码，有的IDE保存源码时自动执行该命令，比如subl，也可手动执行它。</p>\n<p><code>eg: go fmt main.go</code></p>\n</li>\n<li><p>go test</p>\n<p>用于运行测试文件，该命令会自动读取源码目录下的名为：*_test.go的文件，生成并运行测试用的可执行文件，测试成功会显示“PASS”、“OK”等信息。</p>\n</li>\n<li><p>其他</p>\n<ol>\n<li>go clean：用来移除当前源码包里面编译生成的文件 </li>\n<li>go env: 查看当前用户的go环境变量 </li>\n<li>go fix: 用来修复以前老版本的代码到新版本 </li>\n<li>go list: 列出当前全部安装的packge </li>\n<li>go version: 查看当前go版本</li>\n</ol>\n</li>\n</ul>\n<p><strong>hello world：</strong></p>\n<p>main.go 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;Hello World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入该文件所在目录，尝试编译运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go run main.go</span><br></pre></td></tr></table></figure>\n<p>终端会输出 Hello World! ，则运行成功</p>\n</li>\n<li><p>sublime 配置 golang 环境</p>\n<ul>\n<li><p>安装 GoSublime </p>\n<p>运行：Ctrl + B </p>\n<p>个人 GoSublime 配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;env&quot;: &#123;</span><br><span class=\"line\">        &quot;PATH&quot;: &quot;$PATH&quot;,</span><br><span class=\"line\">        // &quot;GOPATH&quot;: &quot;$HOME/Projects/Go/test&quot;,</span><br><span class=\"line\">        // &quot;GOPATH&quot;: &quot;$GOPATH:$GS_GOPATH&quot;,</span><br><span class=\"line\">        &quot;GOPATH&quot;: &quot;$GS_GOPATH&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;comp_lint_enabled&quot;:true,</span><br><span class=\"line\">    &quot;lint_enabled&quot;: true,</span><br><span class=\"line\">    &quot;autocomplete_builtins&quot;: true,</span><br><span class=\"line\">    &quot;fmt_cmd&quot; :[ &quot;goimports&quot;],</span><br><span class=\"line\">    &quot;snippets&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;match&quot;: &#123;&quot;global&quot;: true, &quot;pkgname&quot;: &quot;.&quot;&#125;,</span><br><span class=\"line\">            &quot;snippets&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;type&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;type struct &#123;&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;type $&#123;1:name&#125; struct &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;type&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;type interface &#123;&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;type $&#123;1:name&#125; interface &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;var&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;var struct &#123;&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;var $&#123;1:name&#125; struct &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;map&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;map[...]...&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;map[$&#123;1:string&#125;]$&#123;2:interface&#123;&#125;&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;interface&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;interface&#123;&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;interface&#123;&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;if&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;if err != nil &#123;...&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;if $&#123;1:err&#125; $&#123;2:!=&#125; $&#123;3:nil&#125; &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;if&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;if ret,ok := func(); ok &#123;...&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;if $&#123;1:ret,&#125; $&#123;2:ok&#125; $&#123;3::=&#125; $&#123;4:func()&#125;; $&#123;5:!ok&#125; &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;break&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;break&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;break&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;continue&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;continue&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;continue&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;defer&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;defer func()&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;defer $&#123;0:func()&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;for&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;for k,v := range func() &#123;...&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;for $&#123;1:k,&#125;$&#123;2:v&#125; := range $&#123;3:func()&#125; &#123;\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;,&#123;</span><br><span class=\"line\">                    &quot;text&quot;:&quot;switch&quot;,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;switch ... &#123;...&#125;&quot;,</span><br><span class=\"line\">                    &quot;value&quot;:&quot;switch $&#123;1:name&#125; &#123;\\ncase $&#123;2:v&#125;:\\n\\t$3\\ndefault:\\n\\t$0\\n&#125;&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<p><code>GS_GOPATH</code> is a pseudo-environment-variable. It’s changed to match a possible GOPATH based on:</p>\n<ul>\n<li>the current working directory, e.g. <code>~/go/src/pkg</code> then <code>$GS_GOPATH</code> will be <code>~/go/</code></li>\n<li>or the path the current <code>.go</code> file (or last activated <code>.go</code> file if the current file is not <code>.go</code>) e.g. if your file path is <code>/tmp/go/src/hello/main.go</code> then it will be <code>/tmp/go</code></li>\n</ul>\n<p>简单说就是 GS_GOPATH 是用来自动根据当前目录设置 GOPATH 的</p>\n</li>\n<li><p>安装 gocode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -u github.com/nsf/gocode</span><br><span class=\"line\">go install github.com/nsf/gocode</span><br></pre></td></tr></table></figure>\n<p>安装完成后，我们可以在 $GOPATH/bin 目录下，发现多出了个 gocode 文件</p>\n</li>\n</ul>\n</li>\n<li><p>常用 tools</p>\n<ul>\n<li><p>gocode 提供代码补全</p>\n<p><code>go get -u github.com/nsf/gocode</code></p>\n</li>\n<li><p>godef 代码跳转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -v code.google.com/p/rog-go/exp/cmd/godef</span><br><span class=\"line\">go install -v code.google.com/p/rog-go/exp/cmd/godef</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gofmt 自动代码整理</p>\n</li>\n<li><p>golint 代码语法检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get github.com/golang/lint</span><br><span class=\"line\">go install github.com/golang/lint</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>goimports 自动整理imports</p>\n<p><code>go get golang.org/x/tools/cmd/goimports</code></p>\n</li>\n</ul>\n</li>\n<li><p>安装 <code>echo</code> </p>\n<p><a href=\"https://echo.labstack.com/guide\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<p>安装：<code>go get -u github.com/labstack/echo/...</code></p>\n<p>注：如果无法翻墙可能会报错 <code>package golang.org/x/crypto/acme/autocert: unrecognized import path &quot;golang.org/x/crypto/acme/autocert&quot;</code></p>\n<p><strong>解决方案:</strong> </p>\n<blockquote>\n<p>分析错误，我们缺少crypto组件，需要下载，使用<code>go get golang.org/x/crypto/acme/autocert</code>来下载，但是 crypto 官方地址在外网</p>\n<p>好在 golang.org 在 github.com 上有备份仓库，所以缺少的组件可以在 github 上下载</p>\n<p>eg: 安装 crypto 组件</p>\n<p>github 地址： <a href=\"https://github.com/golang/crypto\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/crypto</a></p>\n<p>过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;mkdir -p /usr/local/go/src/golang.org/x/</span><br><span class=\"line\">&gt;git clone git@github.com:golang/crypto.git</span><br><span class=\"line\">&gt;mv crypto /usr/local/go/golang.org/x/</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>测试示例: </strong></p>\n<p><strong>main.go</strong> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/labstack/echo\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := echo.New()</span><br><span class=\"line\">\te.GET(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c echo.Context)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c.String(http.StatusOK, <span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\te.Logger.Fatal(e.Start(<span class=\"string\">\":1323\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动： <code>go run server.go</code></p>\n<p>Browse to <a href=\"http://localhost:1323/\" target=\"_blank\" rel=\"noopener\">http://localhost:1323</a> and you should see Hello, World! on the page.</p>\n<p>更多echo 请参照学习官方教程：<a href=\"https://echo.labstack.com/guide\" target=\"_blank\" rel=\"noopener\">https://echo.labstack.com/guide</a></p>\n</li>\n</ol>\n","categories":["golang"],"tags":["golang","config","introduction","入门"]},{"title":"Ubuntu 日常笔记","url":"http://mu-mo.top/2017/12/17/Ubuntu/Ubuntu日常笔记/","content":"<ol>\n<li><p>删除Ubuntu Linux旧内核的方法</p>\n<p>用Ubuntu一段时间后，就会发觉由于自动升级，系统里安装了很多内核。像我，竟然安装了下面那么多，这个造成了漫长的启动列表。必须删掉一些不用的。</p>\n<p>首先就是使用如下命令，列出所有安装的内核，下表中，带有image的就是内核文件。从中选择要卸载的包，用apt-get来卸载</p>\n<p><strong>具体如下:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dpkg --get-selections|grep linux</span><br><span class=\"line\">sudo apt-get remove linux-image-2.6.24-16-generic   </span><br><span class=\"line\">sudo apt-get remove linux-headers-2.6.24-16-generic</span><br></pre></td></tr></table></figure>\n<p>查看当前系统使用的内核: <code>uname -a</code></p>\n</li>\n<li><p>Windows 10和Ubuntu 16.04双系统时间错误的调整</p>\n<p><strong>原因：</strong></p>\n<p>​       如果安装了 Windows 和 Linux（比如 Ubuntu）双系统，有时会出现两个系统的时间不一致的情况。这是因为，两个操作系统对电脑硬件时间的定义不一样，<strong>Windows 认为电脑硬件时间是“本地时间”</strong>，因此它启动后直接用该时间作为“系统时间”并显示在桌面右下角的系统托盘里；而<strong>Ubuntu 等 Linux 发行版则认为电脑硬件时间是“全球统一时间”（即 UTC)</strong>，它在启动后在该时间的基础上，再加上电脑设置的时区数（比如我们在中国，它就加上“8”）。根据获得的资料得知，两种模式各有利弊，但是后一种模式在遇到时区转换、夏令时等情况时，通用性更强。</p>\n<p><strong>解决方案：</strong></p>\n<p>​       基于上述原因，协调 Win/Lin 双系统时间一致的方法，就是让 Windows 也和 Linux 一样，将电脑硬件时间看作“全球统一时间”。</p>\n<p><strong>具体：</strong></p>\n<ol>\n<li><p>在win10中打开<strong>regedit</strong> （在小娜下搜索即可）</p>\n</li>\n<li><p>桌面上将出现“注册表编辑器”的窗口，在以下的操作中，将对窗口左侧列表中的 <strong>HKEY_LOCAL_MACHINE</strong> 这一分支进行操作。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-88169d13dc26e4e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n<li><p>点击展开 HKEY_LOCAL_MACHINE 分支，然后依次导航到以下位置：</p>\n<p><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-d2f54cd798f01115.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n<li><p>在右侧空白处单击鼠标右键，然后依次点击“新建”——“QWORD（64位）值”。</p>\n<p>如果安装的是 32 位系统，则需要新建“DWORD（32位）值”。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-647b4a79e89f0d4f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n<li><p>当前位置将会出现一个新建的键值的条目，将其“名称”改为：</p>\n<p><strong>RealTimeIsUniversal</strong></p>\n<p>它的大体意思是，硬件时间被作为全球统一时间。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-2b6fd89a4536d2e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n<li><p>然后双击这一条目，弹出“编辑 QWORD（64位）值”的对话框，确保选中了“十六进制”，然后将“数值数据”改为“1”。最后点击“确定”。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-5b52a3899cdd1c11.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Windows 10和Ubuntu 16.04双系统时间错误的调整\"></p>\n</li>\n</ol>\n</li>\n<li><p>Ubuntu截图快捷键</p>\n<p>无须安装如何软件，直接使用Ubuntu自带的快捷键即可满足基本需求</p>\n<p>[图片上传失败…(image-e8273-1513497539752)]</p>\n</li>\n<li><p><a href=\"https://linux.cn/article-5603-1.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 更新错误修复大全</a></p>\n</li>\n<li><p><a href=\"http://cheneyph.iteye.com/blog/824746\" target=\"_blank\" rel=\"noopener\">的一些命令及查看已安装软件包的命令</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/by-1075324834/p/5045096.html\" target=\"_blank\" rel=\"noopener\">ubuntu服务器与本地文件传输</a> </p>\n</li>\n<li><p>sudo 命令学习</p>\n<p>执行sudo 的时候会去 <code>/etc/sudoers</code> 文件中的secure_path 中寻找，而不是在root的PATH中</p>\n<p>所以解决方案：</p>\n<ol>\n<li>在secure_path的目录中建立软链接</li>\n<li>添加你的文件的目录到secure_path中</li>\n</ol>\n</li>\n<li><p>sudo openresty -s reload报错</p>\n<p>报错输出：<code>nginx: [error] open() &quot;/usr/local/openresty/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</code>  或者　<code>nginx: [error] invalid PID number &quot;&quot; in &quot;/usr/local/openresty/nginx/logs/nginx.pid&quot;</code></p>\n<p>原因：暂时没有启动任何server，所以要先用 <em>nginx -p <code>pwd</code>/ -c conf/nginx.conf</em> 手动启动一些server，再执行 <code>sudo openresty -s reload</code></p>\n</li>\n</ol>\n","categories":["Ubuntu"],"tags":["Ubuntu","daily","note"]},{"title":"Ubuntu 美化笔记","url":"http://mu-mo.top/2017/12/17/Ubuntu/Ubuntu美化笔记/","content":"<p>参考：<a href=\"http://www.jianshu.com/p/4bd2d9b1af41\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/4bd2d9b1af41</a></p>\n<h2 id=\"主题美化篇\"><a href=\"#主题美化篇\" class=\"headerlink\" title=\"主题美化篇\"></a>主题美化篇</h2><p>美化效果如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-f4283ec908c27761?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Imgur\"></p>\n<ol>\n<li><p>安装unity-tweak-tool<br><em>相信很多人都已经看出来了, 我肯定是要借助unity-tweak-tool来进行设置的</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install unity-tweak-tool</span><br><span class=\"line\">或者</span><br><span class=\"line\">wget -q -O - http://archive.getdeb.net/getdeb-archive.key | sudo apt-key add -</span><br><span class=\"line\">sudo sh -c &apos;echo &quot;deb http://archive.getdeb.net/ubuntu xenial-getdeb apps&quot; &gt;&gt; /etc/apt/sources.list.d/getdeb.list&apos;</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ubuntu-tweak</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>顺带装一下优化工具gnome-tweak-tool</strong><br><em>gnome-tweak-tool的话主要是用来设置开机自启, 当然它还有很多其它作用, 顺带一提Flatabulous的黑色主题可以在这里开启</em></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gnome-tweak-tool</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Flatabulous</strong></p>\n<p><strong>一个久负盛名的扁平化主题</strong></p>\n<ol>\n<li>Using the .deb file for Debian, Ubuntu and derivatives (Recommended)</li>\n</ol>\n<p>Download the .deb file from <a href=\"https://github.com/anmoljagetia/Flatabulous/releases/latest\" target=\"_blank\" rel=\"noopener\">here</a>, double click to open with Ubuntu Software Center and click on install. Then, install the theme using ubuntu-tweak.</p>\n<ol start=\"2\">\n<li><p>Using the noobslab PPA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install flatabulous-theme</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>numix-gtk-theme</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:numix/ppa</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install numix-gtk-theme numix-icon-theme-circle</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Flat Icons</p>\n<p>For icons, I use the ultra-flat-icons theme. It is available in blue (recommended), orange and mint green colors. To install this, you can run the following commands</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/icons</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ultra-flat-icons</span><br></pre></td></tr></table></figure>\n<p>Alternatively, you could also run <code>sudo apt-get install ultra-flat-icons-orange</code> OR <code>sudo apt-get install ultra-flat-icons-green</code>.</p>\n<p>​</p>\n<p>安装完成后，打开unity-tweak-tool软件，修改主题和图标：</p>\n<p>进入Theme，修改为Flatabulous</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-2df6d6edca19386c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"主题\"></p>\n<p>​</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-61490baa89637062.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图标\"></p>\n<p>​</p>\n<h4 id=\"Ultra-Flat主题中显示搜狗拼音托盘图标\"><a href=\"#Ultra-Flat主题中显示搜狗拼音托盘图标\" class=\"headerlink\" title=\"Ultra-Flat主题中显示搜狗拼音托盘图标\"></a><a href=\"http://www.itwendao.com/article/detail/394911.html\" target=\"_blank\" rel=\"noopener\">Ultra-Flat主题中显示搜狗拼音托盘图标</a></h4></li>\n<li><p>字体</p>\n<p>ubuntu自带的字体不太好看，所以采用文泉译微米黑字体替代，效果会比较好，毕竟是国产字体！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-wqy-microhei1</span><br></pre></td></tr></table></figure>\n<p>然后通过unity-tweak-tool来替换字体：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-c69949262f21b89d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"替换字体\"></p>\n</li>\n<li><p>cairo dock</p>\n<p>TODO</p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"终端篇\"><a href=\"#终端篇\" class=\"headerlink\" title=\"终端篇\"></a>终端篇</h2><ol>\n<li><p>zsh</p>\n<p>终端采用zsh和oh-my-zsh，既美观又简单易用，主要是能提高你的逼格</p>\n<p>zsh: <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh</a></p>\n<p>效果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-7769f8d993386db0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<ol>\n<li><p>安装zsh：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载 oh-my-zsh 项目来帮我们配置 zsh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换到 zsh 模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配色</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-96939d8a0264cbca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p>其中，文字和背景采用系统主题，透明度设为10%，下面的palette样式采用Tango</p>\n<p>​</p>\n<p>Zsh安装配置指南 <a href=\"http://www.linuxidc.com/Linux/2013-09/90377.htm\" target=\"_blank\" rel=\"noopener\">http://www.linuxidc.com/Linux/2013-09/90377.htm</a></p>\n<p>使用 Zsh 的九个理由 <a href=\"http://www.linuxidc.com/Linux/2013-05/84191.htm\" target=\"_blank\" rel=\"noopener\">http://www.linuxidc.com/Linux/2013-05/84191.htm</a></p>\n<p>Zsh使用心得三则 <a href=\"http://www.linuxidc.com/Linux/2012-08/67735.htm\" target=\"_blank\" rel=\"noopener\">http://www.linuxidc.com/Linux/2012-08/67735.htm</a></p>\n<p>Linux下安装终极Shell Zsh <a href=\"http://www.linuxidc.com/Linux/2012-08/67734.htm\" target=\"_blank\" rel=\"noopener\">http://www.linuxidc.com/Linux/2012-08/67734.htm</a></p>\n</li>\n</ol>\n</li>\n<li><p>fish</p>\n<p>github: <a href=\"https://github.com/oh-my-fish/oh-my-fish\" target=\"_blank\" rel=\"noopener\">https://github.com/oh-my-fish/oh-my-fish</a></p>\n<ol>\n<li><p>安装fish</p>\n<p>Ubuntu 安装fish 并且设为默认shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install fish</span><br><span class=\"line\">chsh -s $(which fish)</span><br></pre></td></tr></table></figure>\n<p><strong>解释:</strong></p>\n<p>chsh -s 后面加路径 ： 设置当前用户默认shell<br>which fish ：查看fish程序的路径<br>chsh -s $(which fish) : 设置fish为当前用户默认shell</p>\n</li>\n<li><p>安装oh my fish</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/bpinto/oh-my-fish/raw/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>theme: <a href=\"https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md\" target=\"_blank\" rel=\"noopener\">https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md</a><br>个人使用： robbyrussell</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Vim篇\"><a href=\"#Vim篇\" class=\"headerlink\" title=\"Vim篇\"></a>Vim篇</h2><p><a href=\"https://github.com/amix/vimrc\" target=\"_blank\" rel=\"noopener\">https://github.com/amix/vimrc</a></p>\n","categories":["Ubuntu"],"tags":["Ubuntu","beautify"]},{"title":"Ubuntu 安装软件笔记","url":"http://mu-mo.top/2017/12/17/Ubuntu/Ubuntu-安装软件笔记/","content":"<p><a href=\"https://alim0x.gitbooks.io/awesome-linux-software-zh_cn/content/\" target=\"_blank\" rel=\"noopener\">超赞的Linux软件</a></p>\n<p><a href=\"http://www.omgubuntu.co.uk/2016/04/10-things-to-do-after-installing-ubuntu-16-04-lts\" target=\"_blank\" rel=\"noopener\">16 Things To Do After Installing Ubuntu 16.04 LTS</a></p>\n<h2 id=\"系统清理篇\"><a href=\"#系统清理篇\" class=\"headerlink\" title=\"系统清理篇\"></a>系统清理篇</h2><ol>\n<li><p>系统更新</p>\n<p><code>sudo apt-get update</code><br><code>sudo apt-get upgrade</code></p>\n</li>\n<li><p>卸载libreOffice</p>\n<p>ibreoffice是ubuntu自带的开源office软件，体验效果不如windows上的office，于是选择用WPS来替代。（安装WPS见安装篇）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge libreoffice?</span><br><span class=\"line\">或</span><br><span class=\"line\">sudo aptitude purge libreoffice?</span><br><span class=\"line\">不要漏掉通配符“?”，否则无法清除/卸载全部 LibreOffice 软件包</span><br><span class=\"line\">或</span><br><span class=\"line\">sudo apt-get remove --purge libreoffice*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除不常用软件</p>\n<p>删除Amazon的链接</p>\n<p><code>sudo apt-get remove unity-webapps-common</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot </span><br><span class=\"line\">sudo apt-get remove gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install  </span><br><span class=\"line\">sudo apt-get remove onboard deja-dup</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装篇\"><a href=\"#安装篇\" class=\"headerlink\" title=\"安装篇\"></a>安装篇</h2><ol>\n<li><p>安装wps</p>\n<p><a href=\"http://community.wps.cn/download/\" target=\"_blank\" rel=\"noopener\">wps下载</a> </p>\n<p>安装： <code>sudo dpkg -i  kingsoft-office_9.1.0.4280~a12p4_i386.deb</code></p>\n<p>如果有依赖故障 修复依赖: <code>sudo apt-get   install  -f</code></p>\n<p>之后可以在<strong>模板</strong>文件夹中分别新建一个Excel，Word，PPT模板，这样可以在 右键菜单中直接新建文档。</p>\n<p><strong>WPS字体配置：</strong></p>\n<ol>\n<li><p>下载缺失的字体文件，然后复制到Linux系统中的/usr/share/fonts文件夹中。</p>\n<p>国外下载地址：<a href=\"https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip\" target=\"_blank\" rel=\"noopener\">https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip</a></p>\n<p>国内下载地址：<a href=\"https://pan.baidu.com/s/1eS6xIzo\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1eS6xIzo</a></p>\n</li>\n<li><p>下载完成后，解压并进入目录中，继续执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo cp * /usr/share/fonts</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>执行以下命令,生成字体的索引信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkfontscale</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkfontdir</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行fc-cache命令更新字体缓存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo fc-cache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启wps即可，字体缺失的提示不再出现。</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>Install Linux Graphics Drivers</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-bb3a0003012aee21.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"drivers\"></p>\n<p>Install GPU drivers</p>\n<p>Ubuntu supports most Nvidia and Intel graphics hardware out of the box, giving you a choice of free, open-source drivers or proprietary, closed-source drivers.</p>\n<p>But to <strong>get the best performance from your Ubuntu PC</strong>you will want to use the latest <em>proprietary</em> graphics drivers available for your hardware.</p>\n<p>Ubuntu makes it easy to do this, and you benefit from a smoother Unity desktop experience as a result.  You’ll squeeze higher frame rates out of your favourite games, too. ;)</p>\n<p>If you plan to <strong>play the latest Steam games on Ubuntu </strong>or use GPU heavy apps like Blender you should install the latest proprietary Linux graphics drivers available for your hardware.</p>\n<p>To do this:</p>\n<ol>\n<li><strong>Open up the ‘Software &amp; Updates’ tool from the Unity Dash</strong></li>\n<li><strong>Click the ‘Additional Drivers’ tab</strong></li>\n<li><strong>Follow any on-screen prompts to check for, install and apply any changes </strong></li>\n</ol>\n<p>Gamers using Nvidia hardware who are willing to trade a bit of stability for a whole lot of newness can use the <a href=\"http://www.omgubuntu.co.uk/2015/08/ubuntu-nvidia-graphics-drivers-ppa-is-ready-for-action\" target=\"_blank\" rel=\"noopener\">Nvidia Graphics PPA</a> to install newer Nvidia Linux graphics drivers.</p>\n</li>\n<li><p>Install Media Codecs</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-2b547e55dc399967.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"rythmbox-in-ubuntu\"></p>\n<p>Playing MP3s in Rhythmbox</p>\n<p>Legal issues stop Ubuntu from being able to play MP3, MP4 and other media files ‘out of the box’.</p>\n<p>Ubuntu can play your audio and video files, you just have to tell it to do so.</p>\n<p>The easiest way to do this is to check (tick) the ‘<em>Enable Restricted Formats</em>‘ box during installation. This will install all the required multimedia codecs automatically, along with the OS itself.</p>\n<p>If you forgot to do that (or upgrade from an earlier release) you can install the multimedia codecs manually via the Software app:</p>\n<p><a href=\"apt://ubuntu-restricted-extras\" target=\"_blank\" rel=\"noopener\">Install Ubuntu Restricted Extras</a></p>\n</li>\n<li><p>鼠标点击最小化</p>\n<p><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2016/04/unity-launcher.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/7109326-24c1c335e9de19d3.gif?imageMogr2/auto-orient/strip\" alt=\"unity launcher\"></a></p>\n<p>Click on an app launcher icon to open an app. Click on the same icon again to minimise the app. Intuitive, right?</p>\n<p>That may be, but it is not the default behaviour in Unity — which can be off-putting to new users. It’s also not obvious how to enable it.</p>\n<p>Run the following command (or install/use Unity Tweak Tool &gt; Unity &gt; Launcher &gt; Minimise):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>移动Unitty启动器位置</p>\n<p><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2016/04/2016-04-06-20_25_32.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/7109326-70de6b4ddccabb37.gif?imageMogr2/auto-orient/strip\" alt=\"2016-04-06 20_25_32\"></a></p>\n<p>Ubuntu positions its app launcher on the left-hand side of the desktop by default.</p>\n<p>Ubuntu 16.04 finally lets you <strong>choose where the Unity launcher is positioned.</strong></p>\n<p>If you want to move the Unity launcher to the bottom of the screen run the following command in a new Terminal (or install/use Unity Tweak Tool &gt; Unity &gt; Launcher &gt; Position):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gsettings set com.canonical.Unity.Launcher launcher-position Bottom</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Adobe Flash on Linux</p>\n<p>Flash sucks, but for some sites you may not have the option of not using it.</p>\n<p><a href=\"http://www.omgubuntu.co.uk/2012/02/adobe-adandons-flash-on-linux\" target=\"_blank\" rel=\"noopener\">Adobe officially stopped supporting Flash on Linux</a> in 2012 and many web browsers are in the process of dropping support for its NPAPI architecture.</p>\n<p>The overall best solution for using Flash on Linux is to download and use Google Chrome. Chrome comes with an<strong>up-to-date version of the Flash plugin</strong> built-in. In fact it’s the only way to get the latest Flash player updates on Linux — and it’s a PPAPI plugin, too.</p>\n<p>But I appreciate that not everyone wants to use Chrome. Some of you may be using a 32-bit version of Ubuntu, which Chrome no longer supports. Whatever the reason you need it, here’s how to get it:</p>\n<p><a href=\"apt://flashplugin-installer\" target=\"_blank\" rel=\"noopener\">Install Flash Player Plugin</a></p>\n<p>If you want to watch Amazon Instant Video, Hulu or any other sites that uses DRM through HAL, <a href=\"http://www.omgubuntu.co.uk/2015/09/how-to-watch-hulu-on-ubuntu-1404-up\" target=\"_blank\" rel=\"noopener\">we’ve got a guide on that.</a></p>\n</li>\n<li><p>垃圾清理软件</p>\n<p>Caches and cruft accumulate as you use Ubuntu. To <strong>keep your fresh install feeling, well, fresh</strong> you should do a bit of basic housekeeping from time to time.</p>\n<p><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2016/04/bleachbit-system-cleaner-app-on-ubuntu.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/7109326-6ede88fd49aac048.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"bleachbit running on ubuntu 16.04\"></a></p>\n<p>One of my favourite system cleaning apps is <strong>BleachBit</strong> (free, open source). BleachBit can tackle menial tasks, from clearing your browser’s cache to deleting packages left over from installation, all at the push of a button.</p>\n<p>If you upgrade from an earlier version of Ubuntu using a system cleaning tool (or command) is a foolproof way to claw back some precious space. You’ll also keep your system running lean ‘n mean — which is always bonus!</p>\n<p>Just be careful about what you clean: <strong>don’t remove anything you’re unsure of</strong>.</p>\n<p><a href=\"apt://bleachbit\" target=\"_blank\" rel=\"noopener\">Install BleachBit on Ubuntu</a></p>\n</li>\n<li><p>sublime text</p>\n<p><a href=\"https://github.com/Tofar/sublime-plugs\" target=\"_blank\" rel=\"noopener\">https://github.com/Tofar/sublime-plugs</a></p>\n</li>\n<li><p>搜狗输入法</p>\n</li>\n<li><p>vim</p>\n<p><a href=\"https://github.com/Tofar/vimrc\" target=\"_blank\" rel=\"noopener\">https://github.com/Tofar/vimrc</a></p>\n</li>\n<li><p>redshift （护眼软件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install redshift gtk-redshift</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-f70eb641fb0510fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p><a href=\"http://jonls.dk/redshift/\" target=\"_blank\" rel=\"noopener\">redshift docs</a></p>\n<p>​</p>\n<p>其他：<strong>flux</strong></p>\n<p>f.lux是一款优秀的应用，支持win/Mac OS/Linux，在linux下安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:kilian/f.lux</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install fluxgui</span><br></pre></td></tr></table></figure>\n<p>在搜索框搜索<code>flux</code>会看到下面这样的图标：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-496ca2a993e3b674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p>第一次打开会弹出来设置窗口：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-f0b4e448210a401a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p>这里只需要输入经纬度就行，如果不了解自己的经纬度，<a href=\"http://www.latlong.net/\" target=\"_blank\" rel=\"noopener\">点击这里查看自己城市的经纬度</a></p>\n<p>但是这里遇到一个问题，flux在ubuntu14.04和12.04下无法<code>重新设置配置</code>或者<code>经常不起作用</code>，详情见<a href=\"http://askubuntu.com/questions/151901/how-can-i-get-f-lux-working\" target=\"_blank\" rel=\"noopener\">ask ubuntu</a></p>\n<p>所以个人推荐<code>redshift</code></p>\n</li>\n<li><p>网易云音乐</p>\n</li>\n<li><p>postman</p>\n</li>\n</ol>\n","categories":["Ubuntu"],"tags":["Ubuntu","note","install","software"]},{"title":"sublime 实用快捷键","url":"http://mu-mo.top/2017/12/17/工具/sublime-实用快捷键/","content":"<ol>\n<li><p>Ctrl+D 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）</p>\n</li>\n<li><p>Ctrl+G 跳转到相应的行</p>\n</li>\n<li><p>Ctrl+Z  撤销</p>\n</li>\n<li><p>Ctrl+Y  恢复撤销</p>\n</li>\n<li><p>Ctrl+P 查找当前项目中的文件和快速搜索；输入 @ 查找文件主标题/函数；或者输入 : 跳转到文件某行</p>\n</li>\n<li><p>Ctrl+R 快速列出/跳转到某个函数</p>\n</li>\n<li><p>Ctrl+K+B 开启/关闭侧边栏</p>\n</li>\n<li><p>Ctrl+KK 从光标处删除至行尾</p>\n</li>\n<li><p>Ctrl+K+0 展开所有</p>\n</li>\n<li><p>Ctrl+Tab 当前窗口中的标签页切换</p>\n</li>\n<li><p>Ctrl+Shift+D 复制光标所在整行，插入在该行之前</p>\n</li>\n<li><p>Ctrl+Shift+M 选择括号内的内容（按住-继续选择父括号）</p>\n</li>\n<li><p>Ctrl+Shift+P 打开命令面板</p>\n</li>\n<li><p>Ctrl+Shift+/ 注释已选择内容</p>\n</li>\n<li><p>Ctrl+/ 注释整行（如已选择内容，同“Ctrl+Shift+/”效果）</p>\n</li>\n<li><p>Ctrl+Shift+[ 折叠代码</p>\n<p>Ctrl+Shift+] 展开代码</p>\n</li>\n<li><p>Alt+Shift+1（非小键盘）窗口分屏，恢复默认1屏<br>Alt+Shift+2 左右分屏-2列<br>Alt+Shift+3 左右分屏-3列<br>Alt+Shift+4 左右分屏-4列<br>Alt+Shift+5 等分4屏<br>Alt+Shift+8 垂直分屏-2屏<br>Alt+Shift+9 垂直分屏-3屏</p>\n</li>\n<li><p>F11 全屏模式</p>\n</li>\n<li><p>Ctrl+F 打开底部搜索框，查找关键字</p>\n<p>Ctrl+shift+F 在文件夹内查找，同时可以替换</p>\n</li>\n<li><p>Ctrl+H  替换</p>\n</li>\n<li><p>Ctrl+W：关闭当前打开文件</p>\n<p>Ctrl+Shift+W：关闭所有打开文件</p>\n</li>\n<li><p>Ctrl+`   命令面板（想关闭输出栏也可以按两次这个</p>\n</li>\n</ol>\n","categories":["工具"],"tags":["工具","sublime","keyword"]},{"title":"第二期任务","url":"http://mu-mo.top/2017/12/16/任务发布/第二期任务/","content":"<h1 id=\"第一期任务\"><a href=\"#第一期任务\" class=\"headerlink\" title=\"第一期任务\"></a>第一期任务</h1><h3 id=\"对象：想跟着学一些通用有用的知识的同学\"><a href=\"#对象：想跟着学一些通用有用的知识的同学\" class=\"headerlink\" title=\"对象：想跟着学一些通用有用的知识的同学\"></a>对象：想跟着学一些通用有用的知识的同学</h3><h3 id=\"本帖链接：http-www-jianshu-com-p-99adef527dcb\"><a href=\"#本帖链接：http-www-jianshu-com-p-99adef527dcb\" class=\"headerlink\" title=\"本帖链接：http://www.jianshu.com/p/99adef527dcb\"></a>本帖链接：<a href=\"http://www.jianshu.com/p/99adef527dcb\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/99adef527dcb</a></h3><h3 id=\"完成时间：12月30号（周六）晚上12点之前，并在此博客下方评论区附上自己的任务总结链接\"><a href=\"#完成时间：12月30号（周六）晚上12点之前，并在此博客下方评论区附上自己的任务总结链接\" class=\"headerlink\" title=\"完成时间：12月30号（周六）晚上12点之前，并在此博客下方评论区附上自己的任务总结链接\"></a>完成时间：12月30号（周六）晚上12点之前，并在此博客下方评论区附上自己的任务总结链接</h3><p>##　任务内容：</p>\n<ol>\n<li><p>学习Python，教程：<a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432011939547478fd5482deb47b08716557cc99764e0000\" target=\"_blank\" rel=\"noopener\">廖雪峰Python教程</a> 或者 <a href=\"http://www.pythondoc.com/pythontutorial3/\" target=\"_blank\" rel=\"noopener\">Python tutorial</a>，<a href=\"http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/\" target=\"_blank\" rel=\"noopener\">Python代码风格指南</a></p>\n<p>Python的练习就自己找点平常自己用Java写过的代码（不包含图形）再用Python写写吧，感受一下Python开发的快捷，同时练习一下Python。<br><code>如果想看书的话推荐 &lt;&lt;Pythjon 基础教程&gt;&gt;</code></p>\n</li>\n<li><p>安装任意一款你喜欢的Linux系统，新手推荐Ubuntu</p>\n<p>下载链接：<a href=\"https://www.ubuntu.com/download/desktop\" target=\"_blank\" rel=\"noopener\">Ubuntu 16.04.3 LTS</a></p>\n<p>安装教程：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4ODU0ODMxNQ==&amp;mid=2247485403&amp;idx=1&amp;sn=e6e11eb1f94ccd0f604ee6c893cce714&amp;chksm=ec3df36fdb4a7a7915d53c430ae9572171af6299a4d475968cbc7983e8df2b7d83a08a0aca03&amp;mpshare=1&amp;scene=1&amp;srcid=1216ROWok35cdk4tE9ehtbgw&amp;pass_ticket=bQTJF8hDtzWlOeCZbHctDG5xCPq4GKDc03DMEmZ9ief1v%2B1lQ3JgeUj9Y1MMDN%2FB#rd\" target=\"_blank\" rel=\"noopener\">Ubuntu安装教程</a></p>\n<p>安装之后：<a href=\"http://www.omgubuntu.co.uk/2016/04/10-things-to-do-after-installing-ubuntu-16-04-lts\" target=\"_blank\" rel=\"noopener\">16 Things To Do After Installing Ubuntu 16.04 LTS</a> 或者 <a href=\"https://github.com/tofar/Ubuntu-config/blob/master/Ubuntu%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0.md\" target=\"_blank\" rel=\"noopener\">我的个人笔记(还没写完)</a></p>\n<p>​        有兴趣的同学也可以去看看 <a href=\"https://github.com/Tofar/Ubuntu-config/blob/master/Ubuntu%E7%BE%8E%E5%8C%96.md\" target=\"_blank\" rel=\"noopener\">我的Ubuntu美化笔记</a> 和 <a href=\"https://github.com/Tofar/Ubuntu-config/blob/master/Ubuntu%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0.md\" target=\"_blank\" rel=\"noopener\">我的Ubuntu日常笔记</a> (虽然都是最近写的，都还没写完)</p>\n<p>如果想看书的话推荐《鸟哥的Linux私房菜：基础学习篇》</p>\n</li>\n<li><p>练习Linux常用命令man, ls, pwd, mkdir, cd, cp, rm, dpkg, apt-get, ps, grep, head, less, more, cat, echo, vi, vim, wget, curl, mv, chmod, chgrp, chown, sudo</p>\n<p>注：这里只是列举了一些，可自行学习其他常用命令</p>\n</li>\n</ol>\n<p><strong>注：</strong>关于为什么要学Python和安装Linux的原因我也不想说太多，这里简单说一下。</p>\n<blockquote>\n<p>Python语言是我目前为止用的最爽的语言，因为它真的很优美，语言本身简洁，优美，功能超级强大 。虽然c,c++,java也非常的强大和伟大，但是每一种语言伟大的背后都是有一定的时代背景。Python一个很大的优势，就是对数据的处理，有着得天独厚的优势，在人工智能、机器学习领域Python应用很广泛。Python是一门动态语言，什么都能干，桌面应用,web开发,自动化测试运维，爬虫，人工智能，大数据处理等都能做，开发速度超快的，同样的项目使用Python开发和Java开发，用Python开发的速度绝对必Java快好几倍。但是也有一个缺点就是运行速度会慢一些。</p>\n<p>至于Linux，个人觉得Linux的编程环境比Windows好太多了，个人日常一般使用Linux系统编程，使用Windows办公和游戏，而且Linux很稳定，安全级别高(再说以后我们要学操作系统的，到时候还不是要装Linux系统)。。。。。。</p>\n</blockquote>\n<h3 id=\"最后：\"><a href=\"#最后：\" class=\"headerlink\" title=\"最后：\"></a>最后：</h3><p>尽管没人回帖，尽管没有了队友加持，但我还是挣扎一下下，希望能对大家有用。</p>\n","categories":["任务"],"tags":["任务","班级任务系列"]},{"title":"学习笔记4","url":"http://mu-mo.top/2017/12/10/学习笔记/学习笔记4/","content":"<ol>\n<li><p>Linux进程管理命令</p>\n<ul>\n<li><p>ps</p>\n<p><strong>ps [选项]</strong><br>选项：</p>\n<ul>\n<li><p>a：显示一个终端所有进程，除了会话引线</p>\n</li>\n<li><p>u：显示进程的归属用户及内存的使用情况</p>\n</li>\n<li><p>x：显示没有控制终端的进程</p>\n</li>\n<li><p>-l：长格式显示，显示更详细的信息</p>\n</li>\n<li><p>-e：显示所有进程，和-A作用一致</p>\n<p><img src=\"http://www.linuxidc.com/upload/2015_06/150602195793282.png\" alt=\"Output of &quot;ps -a&quot; command\"></p>\n<p>常用：</p>\n<ol>\n<li><code>ps -ef |grep -列出需要进程</code></li>\n<li><code>ps -aux -显示进程信息，包括无终端的（x）和针对用户（u）的进程：如USER, PID,%CPU,%MEM等</code></li>\n</ol>\n</li>\n<li><p>pstree</p>\n<p><strong>pstree [选项]</strong><br>选项：</p>\n<ul>\n<li><p>-p:显示进程的PID</p>\n</li>\n<li><p>-u：显示进程的所属用户</p>\n<p><img src=\"http://www.linuxidc.com/upload/2015_06/150602195793284.png\" alt=\"pstree\"></p>\n</li>\n</ul>\n</li>\n<li><p>top</p>\n<p>‘top’是一个更加有用的命令，可以监视系统中不同的进程所使用的资源。它提供<strong>实时的系统状态信息</strong>。显示进程的数据包括 PID、进程属主、优先级、%CPU、%memory等。可以使用这些显示指示出资源使用量。</p>\n<p><strong>top [选项]</strong><br>选项：</p>\n<ul>\n<li>-d秒数：指定top命令每隔几秒更新。默认是3秒</li>\n<li>-b：使用批处理模式输出。一般和“-n”选项合用</li>\n<li>-n次数：指定top命令执行的次数。一般和“-b”选项合用</li>\n</ul>\n</li>\n<li><p>kill</p>\n<p>这个命令用于发送信号来结束进程。如果一个进程没有响应杀死命令，这也许就需要强制杀死，使用-9参数来执行。注意，使用强制杀死的时候一定要小心，因为进程没有时机清理现场，也许写入文件没有完成。如果我们不知道进程PID或者打算用名字杀死进程时候，killall就能派上用场。</p>\n<ol>\n<li><code>kill &lt;pid&gt;</code></li>\n<li><code>kill -9 &lt;pid&gt;</code></li>\n<li><code>killall -9 -杀死所有拥有同样名字的进程</code></li>\n</ol>\n<p>如果你使用kill，你需要知道进程ID号。pkill是类似的命令，但使用模式匹配，如进程名，进程拥有者等。</p>\n<ol>\n<li><code>pkill &lt;进程名&gt;</code></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>管道通信</p>\n<ul>\n<li><p>无名管道</p>\n<p>无名管道是一种特殊的文件，这就意味着你可以向操作文件一样操作无名管道，无名管道在内核中对应的是一段特殊的内存空间，这段内存空间由操作系统进行管理，对用户是不可见的，在用户空间的应用程序中只能通过系统调用来访问它。在这段内存空间中以循环队列的方式来临时存储一个进程发往另外一个进程的信息，并且在通信完成后就会自动释放相应的空间。</p>\n<p>1、创建无名管道</p>\n<p>创建无名管道需要使用pipe(int _pipedes[2])函数，这个函数的参数是一个含有两个元素的整型数组，如果执行成功，这个整形数组将分别存储无名管道读端的文件描述符和写端的文件描述符，利用这两个读、写文件描述符，我们可以像读写文件一样，操作无名管道的读写。如pipe( )函数调用失败将返回-1。</p>\n<p>2、读写无名管道</p>\n<p>下面的程序是在一个程序中完成，即一个进程既充当读进程又充当写进程。</p>\n</li>\n<li><p>有名管道</p>\n<p>1、创建命名管道</p>\n<p>在编程中，可以使用mkfifo(char *path, _mode_t _mode)函数创建一个命名管道，mkfifo有两个参数，第一个是指定要创建的命名管道的名字，第二个是生成的命名管道文件的模式。</p>\n<p>2、读写命名管道</p>\n<p>和无名管道一样，命名管道的实质仍然是一段内核空间管理的内存，但是在使用write和read之前需要先使用open函数打开命名管道文件。</p>\n</li>\n</ul>\n</li>\n<li><p>Linux信号机制与信号处理</p>\n<p>信号(signal)是Linux进程间通信的一种机制，全称为软中断信号，也被称为软中断。信号本质上是在软件层次上对硬件中断机制的一种模拟。</p>\n<p>与其他进程间通信方式（例如管道、共享内存等）相比，信号所能传递的信息比较粗糙，只是一个整数。但正是由于传递的信息量少，信号也便于管理和使用，可以用于系统管理相关的任务，例如通知进程终结、中止或者恢复等。</p>\n<p>每种信号用一个整型常量宏表示，以SIG开头，比如SIGCHLD、SIGINT等，它们在系统头文件&lt;signal.h&gt;中定义。</p>\n<p>信号由内核(kernel)管理，产生方式多种多样：</p>\n<ul>\n<li>可以由内核自身产生，比如出现硬件错误、内存读取错误，分母为0的除法等，内核需要通知相应进程。</li>\n<li>也可以由其他进程产生并发送给内核，再由内核传递给目标进程。</li>\n</ul>\n<p>信号传递的过程：</p>\n<ul>\n<li>内核中针对每一个进程都有一个表来保存信号。</li>\n<li>当内核需要将信号传递给某个进程时，就在该进程对应的表中写入信号，这样就生成了信号。</li>\n<li>当该进程由用户态陷入内核态，再次切换到用户态之前，会查看表中的信号。如果有信号，进程就会首先执行信号对应的操作，此时叫做执行信号。</li>\n<li>从生成信号到将信号传递给对应进程这段时间，信号处于等待状态。</li>\n<li>我们可以编写代码，让进程阻塞(block)某些信号，也就是让这些信号始终处于等待的状态，直到进程取消阻塞(unblock)或者忽略信号。</li>\n</ul>\n<p>信号的种类：</p>\n<p>| 信号名称    | 数字表示 | 说明                                       |<br>| ——- | —- | —————————————- |<br>| SIGHUP  | 1    | 终端挂起或控制进程终止。当用户退出Shell时，由该进程启动的所有进程都会收到这个信号，默认动作为终止进程。 |<br>| SIGINT  | 2    | 键盘中断。当用户按下&lt;Ctrl+C&gt;组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为终止进程。 |<br>| SIGQUIT | 3    | 键盘退出键被按下。当用户按下&lt;Ctrl+D&gt;或&lt;Ctrl+>组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为退出程序。 |<br>| SIGFPE  | 8    | 发生致命的运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为0等所有的算法错误。默认动作为终止进程并产生core文件。 |<br>| SIGKILL | 9    | 无条件终止进程。进程接收到该信号会立即终止，不进行清理和暂存工作。该信号不能被忽略、处理和阻塞，它向系统管理员提供了可以杀死任何进程的方法。 |<br>| SIGALRM | 14   | 定时器超时，默认动作为终止进程。                         |<br>| SIGTERM | 15   | 程序结束信号，可以由 kill 命令产生。与SIGKILL不同的是，SIGTERM 信号可以被阻塞和终止，以便程序在退出前可以保存工作或清理临时文件等。 |</p>\n</li>\n<li><p>Linux下C语言遍历目录及文件</p>\n<p>打开目录-》读取-》关闭目录</p>\n<p>相关函数是（函数原形）</p>\n<p>opendir -&gt; readdir -&gt; closedir</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;dirent.h&gt;</span><br><span class=\"line\">DIR *opendir(const char *dirname);</span><br><span class=\"line\">struct dirent *readdir(DIR *dirp);</span><br><span class=\"line\">int closedir(DIR *dirp);</span><br></pre></td></tr></table></figure>\n<p>dirent.h这个头文件，包括了目录的一些函数。</p>\n<p>opendir用于打开目录，是类似于流的那种方式，返回一个指向DIR结构体的指针，他的参数*dirname是一个字符数组或者字符串常量。</p>\n<p>readdir函数用于读取目录，他只有一个参数，这个参数主要是opendir返回的结构体指针。</p>\n<p>dirent的结构如下定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> struct dirent &#123;</span><br><span class=\"line\">    long d_ino;    // 该文件的结点数目                 </span><br><span class=\"line\">    off_t d_off;    //  是文件在目录中的编移               </span><br><span class=\"line\">    unsigned short d_reclen;  // 文件的长度 </span><br><span class=\"line\">    unsigned char d_type;  // 文件类型   </span><br><span class=\"line\">    char d_name [NAME_MAX+1];   // 文件名字    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>stat，lstat，fstat1 函数都是获取文件（普通文件，目录，管道，socket，字符，块（）的属性。函数原型#include &lt;sys/stat.h&gt;</p>\n<p>int stat(const char <em>restrict pathname, struct stat </em>restrict buf);提供文件名字，获取文件对应属性。<br>int fstat(int filedes, struct stat *buf);通过文件描述符获取文件对应的属性。</p>\n<p>int lstat(const char <em>restrict pathname, struct stat </em>restrict buf);连接文件描述命，获取文件属性。2 文件对应的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">struct stat &#123;</span><br><span class=\"line\">     mode_t     st_mode;       //文件对应的模式，文件，目录等</span><br><span class=\"line\">     ino_t      st_ino;       //inode节点号</span><br><span class=\"line\">     dev_t      st_dev;        //设备号码</span><br><span class=\"line\">     dev_t      st_rdev;       //特殊设备号码</span><br><span class=\"line\">     nlink_t    st_nlink;      //文件的连接数</span><br><span class=\"line\">     uid_t      st_uid;        //文件所有者</span><br><span class=\"line\">     gid_t      st_gid;        //文件所有者对应的组</span><br><span class=\"line\">     off_t      st_size;       //普通文件，对应的文件字节数</span><br><span class=\"line\">     time_t     st_atime;      //文件最后被访问的时间</span><br><span class=\"line\">     time_t     st_mtime;      //文件内容最后被修改的时间</span><br><span class=\"line\">     time_t     st_ctime;      //文件状态改变时间</span><br><span class=\"line\">     blksize_t st_blksize;    //文件内容对应的块大小</span><br><span class=\"line\">     blkcnt_t   st_blocks;     //伟建内容对应的块数量</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure>\n<p>部分代码: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DIR *dfd;</span><br><span class=\"line\">   char name[MAX_PATH];</span><br><span class=\"line\">   struct dirent *dp;</span><br><span class=\"line\">   if ((dfd = opendir(pathname)) == NULL) &#123;</span><br><span class=\"line\">       printf(&quot;dir_order: can&apos;t open %s\\n %s&quot;, pathname,strerror(errno));</span><br><span class=\"line\">       return;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   while ((dp = readdir(dfd)) != NULL) &#123;</span><br><span class=\"line\">       if (strncmp(dp-&gt;d_name, &quot;.&quot;, 1) == 0)</span><br><span class=\"line\">           continue; /* 跳过当前目录和上一层目录以及隐藏文件*/</span><br><span class=\"line\">       if (strlen(pathname) + strlen(dp-&gt;d_name) + 2 &gt; sizeof(name)) &#123;</span><br><span class=\"line\">           printf(&quot;dir_order: name %s %s too long\\n&quot;, pathname, dp-&gt;d_name);</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           memset(name, 0, sizeof(name));</span><br><span class=\"line\">           sprintf(name, &quot;%s/%s&quot;, pathname, dp-&gt;d_name);</span><br><span class=\"line\">           print_file_info(name);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   closedir(dfd);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">struct stat filestat;</span><br><span class=\"line\"> if (stat(pathname, &amp;filestat) == -1) &#123;</span><br><span class=\"line\">     printf(&quot;cannot read the file %s&quot;, pathname);</span><br><span class=\"line\">     return;</span><br><span class=\"line\">  if ((filestat.st_mode &amp; S_IFMT) == S_IFDIR) &#123;</span><br><span class=\"line\">     printf(&quot;%s st_mode: dir, st_mtime: %s, size: %8ld\\n&quot;, pathname, asctime(gmtime(&amp;filestat.st_mtime)), filestat.st_size);</span><br><span class=\"line\">     dir_order(pathname);</span><br><span class=\"line\"> &#125; else &#123;</span><br><span class=\"line\">     printf(&quot;%s st_mode: file, st_mtime: %s, size: %8ld\\n&quot;, pathname, asctime(gmtime(&amp;filestat.st_mtime)), filestat.st_size);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>共享内存</p>\n<p>共享内存就是允许两个不相关的进程访问同一个逻辑内存。共享内存是在两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常安排为同一段物理内存。进程可以将同一段共享内存连接到它们自己的地址空间中，所有进程都可以访问共享内存中的地址，就好像它们是由用C语言函数malloc分配的内存一样。而如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。</p>\n<p>特别提醒：共享内存并未提供同步机制，也就是说，在第一个进程结束对共享内存的写操作之前，并无自动机制可以阻止第二个进程开始对它进行读取。</p>\n<ul>\n<li><p>共享内存的使用</p>\n<p>头文件：<code>sys/shm.h</code></p>\n<ol>\n<li><p>shmget函数</p>\n<p>创建共享内存, 原型 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int shmget(key_t key, size_t size, int shmflg);</span><br></pre></td></tr></table></figure>\n<p>第一个参数，与信号量的semget函数一样，程序需要提供一个参数key（非0整数），它有效地为共享内存段命名，shmget函数成功时返回一个与key相关的共享内存标识符（非负整数），用于后续的共享内存函数。调用失败返回-1.</p>\n<p>不相关的进程可以通过该函数的返回值访问同一共享内存，它代表程序可能要使用的某个资源，程序对所有共享内存的访问都是间接的，程序先通过调用shmget函数并提供一个键，再由系统生成一个相应的共享内存标识符（shmget函数的返回值），只有shmget函数才直接使用信号量键，所有其他的信号量函数使用由semget函数返回的信号量标识符。</p>\n<p>第二个参数，size以字节为单位指定需要共享的内存容量.</p>\n<p>第三个参数，shmflg是权限标志，它的作用与open函数的mode参数一样，如果要想在key标识的共享内存不存在时，创建它的话，可以与IPC_CREAT做或操作。共享内存的权限标志与文件的读写权限一样，举例来说，0644,它表示允许一个进程创建的共享内存被内存创建者所拥有的进程向共享内存读取和写入数据，同时其他用户创建的进程只能读取共享内存。</p>\n</li>\n<li><p>shmat函数</p>\n<p>第一次创建完共享内存时，它还不能被任何进程访问，shmat函数的作用就是用来启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间。它的原型如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void *shmat(int shm_id, const void *shm_addr, int shmflg);</span><br></pre></td></tr></table></figure>\n<p>第一个参数，shm_id是由shmget函数返回的共享内存标识。</p>\n<p>第二个参数，shm_addr指定共享内存连接到当前进程中的地址位置，通常为空，表示让系统来选择共享内存的地址。</p>\n<p>第三个参数，shm_flg是一组标志位，通常为0。</p>\n<p>调用成功时返回一个指向共享内存第一个字节的指针，如果调用失败返回-1.</p>\n</li>\n<li><p>shmdt函数</p>\n<p>该函数用于将共享内存从当前进程中分离。注意，将共享内存分离并不是删除它，只是使该共享内存对当前进程不再可用。它的原型如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int shmdt(const void *shmaddr);</span><br></pre></td></tr></table></figure>\n<p>参数shmaddr是shmat函数返回的地址指针，调用成功时返回0，失败时返回-1.</p>\n</li>\n<li><p>shmctl函数</p>\n<p>与信号量的semctl函数一样，用来控制共享内存，它的原型如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int shmctl(int shm_id, int command, struct shmid_ds *buf);</span><br></pre></td></tr></table></figure>\n<p>第一个参数，shm_id是shmget函数返回的共享内存标识符。</p>\n<p>第二个参数，command是要采取的操作，它可以取下面的三个值 ：</p>\n<p>​    IPC_STAT：把shmid_ds结构中的数据设置为共享内存的当前关联值，即用共享内存的当前关联值覆盖shmid_ds的值。</p>\n<p>​    IPC_SET：如果进程有足够的权限，就把共享内存的当前关联值设置为shmid_ds结构中给出的值</p>\n<p>​    IPC_RMID：删除共享内存段</p>\n<p>第三个参数，buf是一个结构指针，它指向共享内存模式和访问权限的结构。</p>\n<p>shmid_ds结构至少包括以下成员:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">struct shmid_ds  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    uid_t shm_perm.uid;  </span><br><span class=\"line\">    uid_t shm_perm.gid;  </span><br><span class=\"line\">    mode_t shm_perm.mode;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>共享内存的优缺点</p>\n<ol>\n<li>优点：我们可以看到使用共享内存进行进程间的通信真的是非常方便，而且函数的接口也简单，数据的共享还使进程间的数据不用传送，而是直接访问内存，也加快了程序的效率。同时，它也不像匿名管道那样要求通信的进程有一定的父子关系。</li>\n<li>缺点：共享内存没有提供同步的机制，这使得我们在使用共享内存进行进程间通信时，往往要借助其他的手段来进行进程间的同步工作。</li>\n</ol>\n<p>​</p>\n</li>\n</ul>\n</li>\n<li><p>无监督学习 - 聚类</p>\n<p>聚类是在样本没有标注的情况下，对样本进行特征提取并分类，属于无监督学习的内容。有监督学习和无监督学习的区别就是需要分析处理的数据样本是否事先已经标注。如下图，左边是有监督，右边是无监督： </p>\n<p><img src=\"http://img.blog.csdn.net/20151102221232703\" alt=\"这里写图片描述\"></p>\n<p>应用场景也有所不同。<br>无监督学习主要用于特征提取分类，其应用场景举例：将市场买家特征识别、分类，然后做肖像（profile）；社交网络中哪些人是一个圈子的人；组织计算集群；天文数据分析等等。<br>有监督学习主要用于回归分析和预测，其应用场景举例：自动驾驶、手写体识别等。</p>\n<h3 id=\"KMeans聚类\"><a href=\"#KMeans聚类\" class=\"headerlink\" title=\"KMeans聚类\"></a>KMeans聚类</h3><ul>\n<li><p>基本算法</p>\n<ul>\n<li><p>初始输入： K（聚类中心的数目）、样本集、初始聚类中心点</p>\n</li>\n<li><p>循环迭代：</p>\n<p><img src=\"http://img.blog.csdn.net/20151102222518127\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>对从1到m的所有的样本x(i)，计算哪个中心点μ(k)离自己最近（方差、向量差模长的平方最小），然后令centroid即c(i) = μ(k)。</li>\n<li>更新μ(k)为指定到这个聚类中心的所有样本点的均值点。</li>\n<li>整个循环迭代直到聚类中心稳定为止。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>代价函数</p>\n<p>样本点与聚类中心的方差和的一半： </p>\n<p><img src=\"http://img.blog.csdn.net/20151102224606369\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>如何选择聚类中心初始点</p>\n<p>聚类中心点选取不好，可能会导致局部最优。如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20151102224758386\" alt=\"这里写图片描述\"></p>\n<p>一般为了避免出现局部最优，只能随机选取聚类中心，重复基本算法，最终通过代价函数来评价，选取代价函数最小的一种聚类。</p>\n</li>\n<li><p>如何选择聚类点的数目</p>\n<p>直观上，如果聚类点的数目K很大，等于总样本数m，且让每个聚类点最终都分别与一个样本点重合，则代价函数为0；但是如果K很小，则容易代价函数过大。所以有一种拐点检测，如下图左侧：</p>\n<p><img src=\"http://img.blog.csdn.net/20151102225219807\" alt=\"这里写图片描述\"></p>\n<p>但是经常遇到的实际情况是聚类点不明晰，代价函数随着聚类点的增加，如上图右侧。</p>\n<p>基本上是人工，具体看需要达到什么效果。因为面对大部分样本集时，并没有特别明显的特征聚类，或者可能有多种选择。例如下图分别对应有特征明显的聚类、没有时的两种选择： </p>\n<p><img src=\"http://img.blog.csdn.net/20151102225645612\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>\n</li>\n<li><p>无监督学习 - 维度约减</p>\n<p>通过数据压缩以减少数据占有内存的大小，为算法运算提高速度，将数据可视化等。</p>\n</li>\n</ol>\n<p>   从二维/2D降到一维/1D到底意味着什么？通过样本涂上不同的颜色，在这个例子中降低维度的意思指找到这样一条线，基本所有点都落在这个方向上然后把所有的数据映射到这条线上，这样做之后就可以直接测量这条线上每个样本的位置，现在把这个新特征叫做z1，要确定这条线上的位置只需要一个数字，这就是说新特征变量z1能够表示这条绿线上每一个点的位置。</p>\n<p>   <img src=\"http://wx1.sinaimg.cn/mw690/7b8d2108gy1fhm4qk0l08j20ji0a53ze.jpg\" alt=\"1.jpg\"></p>\n<pre><code>更具体地，之前我们有一个样本x(1)，比如这是第一个样本x(1)，为了表示原本的x(1)，需要一个二维数字或者一个二维特征向量，但是现在可以只用z(1)来表示第一个样本x(1)，以此类推到m个样本上。\n\n一个3D缩减为2D的例子，如下：左边是原始数据集，中间是投影到2D的数据集，右边是以z1和z2为坐标轴的2D数据集。我们来更详细地看一下左侧，这是原始数据集（3D点云），开始它的坐标轴是x1,x2,x3。所以这是一个3D的点云，但是大部分数据都落在某个2D平面上或者说距离某个2D平面不远。\n</code></pre><p>   <img src=\"http://wx2.sinaimg.cn/mw690/7b8d2108gy1fhm4ql3webj20md08xtcj.jpg\" alt=\"2.jpg\"></p>\n<p>   接着如中间的图片一样，把它们投影到2D平面，现在只需要两个数z1和z2来表示点在平面上的位置，如右侧的图像，这就是把数据从三维降到二维的过程降到二维的过程，这就是维数约减以及如何使用它来压缩数据。</p>\n<h4 id=\"可视化数据\"><a href=\"#可视化数据\" class=\"headerlink\" title=\"可视化数据\"></a>可视化数据</h4><p>   除了压缩数据，可视化数据对于机器学习的应用帮助也很大，可以提高开发高效学习算法的效率，而前提要求我们必须很好地理解数据。</p>\n<pre><code>假如我们收集了大量的关于全世界不同国家的统计数据集，第一个特征x1是国内生产总值，x2是每人占有的GDP，x3人类发展指数，x4预期寿命，x5x6等。像这里这样的数据对于每个国家可能有50个特征，我们有这样的众多国家的数据集，那么有没有办法使得我们能更好地来理解数据？\n\n这里给出了一张有数字的表格，你怎样将这些数据可视化？如果有50个特征绘制一幅50维度的图是异常困难的，那有没有观察数据的好办法呢？\n</code></pre><p>   <img src=\"http://wx2.sinaimg.cn/mw690/7b8d2108gy1fhm4qmboqmj20mb03t74w.jpg\" alt=\"3.0.jpg\"></p>\n<h4 id=\"降维\"><a href=\"#降维\" class=\"headerlink\" title=\"降维\"></a>降维</h4><p>   我们使用特征向量x(i)来表示每个国家，x(i)有着50个维度。例如，加拿大这个国家的特征用50个数字来代表，我们要能提出一种不同的特征表示方法，使用一个二维的向量z来代替x。</p>\n<p>   <img src=\"http://wx3.sinaimg.cn/mw690/7b8d2108gy1fhm4qmforij20eq0adgm6.jpg\" alt=\"3.jpg\"></p>\n<p>   在这种情况下我们可以使用一对数字z1和z2，从某种程度来说这两个数总结了50个数，也许我们可以使用这两个数来绘制出这些国家的二维图。使用这样的方法尝试去理解二维空间下不同国家在不同特征的差异更容易。所以，这里将数据降维从50维度降维到2维度，这样就可以绘制出2D的图像。</p>\n<pre><code>仔细观察降维算法的输出结果，它通常不能赋予你想要的这些二维新特征一个物理含义，在这里每个国家用一个点z(i)表示，z(i)是一个二维数据，或许会发现例如那条水平轴即z1轴大致对应了国家总面积或者一个国家的总体经济活动情况，然而纵轴即z2的数据或许对应着人均GDP或是人均幸福感。\n</code></pre><p>   <img src=\"http://wx3.sinaimg.cn/mw690/7b8d2108gy1fhm4qnozsqj20d10a9js3.jpg\" alt=\"4.jpg\"></p>\n<p>   可以发现对于50个特征，到最后主要是这2个维度的特征来进行表示。上图中，像美国有着相当大的总GDP以及相对的高人均GDP，像新加坡这样的国家生产总值并不算高，但人均幸福度很高。</p>\n<h4 id=\"主成分分析法-Principal-Component-Analysis（PCA\"><a href=\"#主成分分析法-Principal-Component-Analysis（PCA\" class=\"headerlink\" title=\"主成分分析法-Principal Component Analysis（PCA)\"></a>主成分分析法-Principal Component Analysis（PCA)</h4><p>如果有下图所示的一些三维数据点，那么我们想要做的是寻找两个向量，用红线画出来， 寻找两个向量从原点延伸出来，这是u(1)这是第二个向量u(2)，这两个向量一起定义了一个平面或者说定义了一个二维面。因此PCA做的就是寻找一条直线或者平面诸如此类等等对数据进行投影来最小化平方投影90度的或者正交的投影误差。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/7b8d2108gy1fhm4qpg9hrj20b006t41x.jpg\" alt=\"6.jpg\"></p>\n<p>   <strong>PCA 并不是线性回归</strong></p>\n<p> 尽管看上去有一些相似但是它们确实是两种不同的算法，如下图左侧，要在给定某个输入特征x的情况下预测某个变量y的数值，故对于线性回归我们想做的是拟合一条直线来最小化点和直线之间的平方误差。所以我们要最小化的是这些蓝线幅值的平方，注意所画的这些蓝色的垂直线，这是垂直距离，它是某个点与通过假设的得到的其<strong>预测值</strong>之间的y轴方向上的距离。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/7b8d2108gy1fhm4qq6btjj20fp06m0sw.jpg\" alt=\"7.jpg\"></p>\n<p> 与此想反，如上图右侧，PCA要做的是最小化这些蓝色直线的幅值，这实际上是最短的直角距离，也就是点x跟直线之间的最短距离。</p>\n<p> 更一般的是当你做线性回归的时候有一个特别的变量y，我们将要预测的线性回归就是用x的所有的值来预测y。然而，在PCA中没有这么一个特别的或者特殊的变量y，我们所拥有的是特征x1，x2等一直到xn所有的这些特征都是被同样地对待因此它们中没有一个是特殊的。</p>\n<p>   <strong>PCA算法实现</strong></p>\n<p>   PCA 执行前必须对数据集进行与处理，从而对数据进行有效地降维。</p>\n<ol>\n<li><p>数据预处理<br>对数据做规范化处理</p>\n<p>​</p>\n<p>当特征值的范围相差很大时，有必要做归一化处理</p>\n<p>​</p>\n</li>\n<li><p>PCA 算法</p>\n</li>\n</ol>\n","categories":["学习笔记"],"tags":["学习笔记"]},{"title":"第一期任务","url":"http://mu-mo.top/2017/11/29/任务发布/第一期任务/","content":"<h1 id=\"第一期任务\"><a href=\"#第一期任务\" class=\"headerlink\" title=\"第一期任务\"></a>第一期任务</h1><h3 id=\"对象：想跟着学一些通用有用的知识的同学\"><a href=\"#对象：想跟着学一些通用有用的知识的同学\" class=\"headerlink\" title=\"对象：想跟着学一些通用有用的知识的同学\"></a>对象：想跟着学一些通用有用的知识的同学</h3><h3 id=\"本帖链接：http-www-jianshu-com-p-b3f2e714d43b\"><a href=\"#本帖链接：http-www-jianshu-com-p-b3f2e714d43b\" class=\"headerlink\" title=\"本帖链接：http://www.jianshu.com/p/b3f2e714d43b\"></a>本帖链接：<a href=\"http://www.jianshu.com/p/b3f2e714d43b\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/b3f2e714d43b</a></h3><h3 id=\"完成时间：12月17号晚上12点之前，并在此博客下方评论区附上自己的任务总结链接\"><a href=\"#完成时间：12月17号晚上12点之前，并在此博客下方评论区附上自己的任务总结链接\" class=\"headerlink\" title=\"完成时间：12月17号晚上12点之前，并在此博客下方评论区附上自己的任务总结链接\"></a>完成时间：12月17号晚上12点之前，并在此博客下方评论区附上自己的任务总结链接</h3><p><strong>注：</strong></p>\n<ol>\n<li>如果要在评论区回复的话请私戳我笔名或者代号，要不然我不知道你是谁啊</li>\n<li>下一次会根据这次的完成情况适当进行调整任务</li>\n</ol>\n<p>##　任务内容：</p>\n<ol>\n<li><p>注册GitHub账号，并在GitHub上创建一个仓库</p>\n</li>\n<li><p>学习git，参考教程 <a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰git教程</a> ，一直看到<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137628548491051ccfaef0ccb470894c858999603fedf000\" target=\"_blank\" rel=\"noopener\">使用GitHub</a> 这一小节</p>\n<p>详情：通过初始化本地的ssh将本地连接上GitHub，跟着廖雪峰的git教程练习多数操作。</p>\n<p>线上练习网站（亦可在本地练习）：<a href=\"https://try.github.io/levels/1/challenges/1\" target=\"_blank\" rel=\"noopener\">https://try.github.io/levels/1/challenges/1</a></p>\n</li>\n<li><p>拥有一个博客账号，CSDN、简书等都行。</p>\n</li>\n<li><p>学习Markdown语法，并在12月17号晚上12点之前使用markdown书写进度记录，建议平常使用markdown记录自己所学的东西以及自己遇到的坑，如果不经常用的话会忘的。</p>\n<p>注：markdown参考学习网站：<a href=\"http://col.dog/2015/11/22/Markdown-Syntax/\" target=\"_blank\" rel=\"noopener\">http://col.dog/2015/11/22/Markdown-Syntax/</a></p>\n<p>​    你可以选择在线编辑，也可以下一个软件，个人比较喜欢<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a> ，比较简约</p>\n</li>\n<li><p>查询四个方向 前端、后台、游戏、移动开发 ，描述是干嘛的，要做什么</p>\n</li>\n</ol>\n<p><strong>综合练习</strong>：注册第二个GitHub账号，自己搜索一台电脑使用两个GitHub账号，然后使用两个账号同时操作GitHub上的一个项目，这样假装两个人在一起团队合作，要求<strong>共同操作的项目里面有三个分支，一个master分支，一个是第一个账号的临时分支如devA，一个是第二个账号的临时分支如devB</strong>，然后练习分支合并等操作，最后阅读<a href=\"https://www.zybuluo.com/jtong/note/504192\" target=\"_blank\" rel=\"noopener\">编程的精进之法</a> 以及文章最下面 的像机器一样思考系列，并使用markdown书写读后感，最后评论区附上链接。</p>\n<p>注：出现问题首先自己<strong>百度或者Google搜索问题</strong>，很多问题搜索一下就出来了，没有解决再去问别人，大家多在群里讨论啊。</p>\n<p><strong>下期预告：Linux</strong></p>\n<h3 id=\"任务总结要求：\"><a href=\"#任务总结要求：\" class=\"headerlink\" title=\"任务总结要求：\"></a>任务总结要求：</h3><ol>\n<li>回复全凭自愿，但是我<strong>更希望做的人在下面回复</strong>，回复更多的是一种督促，写完了是对自己的认可，没写完会提醒自己（当然也可能最近事情比较多）。</li>\n<li>只需回复链接，链接前面附上你的名字（可以写笔名，或者代号都行（请私戳我笔名和代号），但是请不要经常变动）</li>\n<li>任务进度记录记录使用markdown书写</li>\n<li><strong>总结必须包含内容</strong>：<ul>\n<li>学习笔记，最好详细一点</li>\n<li>任务完成度，如完成了哪些任务，完成度（xx%)</li>\n</ul>\n</li>\n<li>进度记录里面不一定只包含本帖任务，我更希望大家写上自己这段时间所学的东西，所做的事，以及你的一些建议都行。</li>\n</ol>\n<h3 id=\"最后：\"><a href=\"#最后：\" class=\"headerlink\" title=\"最后：\"></a>最后：</h3><p>送大家一句话Seize the day！但是也希望大家也能好好享受生活，体验生活的点点滴滴，多关注身边的事或人。不是你没有时间，有时候只是你不知道该干什么，于是时间就这样过去了。其实有时候优秀的人和你的差距并没有你想象的那么大，但也不是你想象的那么小。我想他们更多的是把时间花在自己该做的事情和自己喜欢做的事情上了。尽管每天我们有很多课，但是其实我们还是有很多时间的，再者上课你又有多少时间在听课<del>虽然我也觉得听课没什么用</del>。作为一个软件工程的学生，我们必须具备很强的自学能力，不能什么时候等着别人来教，更多的是自己去学习。我想很多人只是不知道该干什么，谁不想成为大佬，那么就努力去做，不要总觉得不可能。不管什么时候我们需要有一种勇气，多去尝试，这样你才有机会。。。。。</p>\n<p>任务比较简单希望大家好好完成，同时希望大家能提前完成任务之后多做一些其他任务，如果不知道做什么，那么去问对哪方面了解比较多的人，我的大方向的web，更多的是后台方向，前端暂时较少。同时希望大家尽早确定自己的大方向，不断往那个方向挖掘。</p>\n","categories":["任务"],"tags":["任务","班级任务"]},{"title":"学习笔记3","url":"http://mu-mo.top/2017/11/24/学习笔记/学习笔记3/","content":"<h2 id=\"1-机器学习\"><a href=\"#1-机器学习\" class=\"headerlink\" title=\"1. 机器学习\"></a>1. 机器学习</h2><ul>\n<li><p>评估假设</p>\n<p>一旦我们通过以下方式在我们的预测中做了一些故障排除：</p>\n<ul>\n<li>获得更多培训示例</li>\n<li>尝试更小的功能集</li>\n<li>尝试其他功能</li>\n<li>尝试多项式特征</li>\n<li>增加或减少λ</li>\n</ul>\n<p>我们可以继续评估我们的新假设。</p>\n<p>假设对于训练样例可能具有低误差，但仍然不准确（因为过拟合）。因此，为了评估一个假设，给定一个训练样本数据集，我们可以将数据分成两组：<strong>训练集</strong>和<strong>测试集</strong>。通常情况下，训练集包含70％的数据，测试集是剩下的30％。</p>\n<p><img src=\"/home/tofar/图片/选区_001.png\" alt=\"选区_001\"></p>\n<ul>\n<li><p>模型选择和训练/验证/测试集</p>\n<p>我们的数据集分成三组的一种方法是：</p>\n<ul>\n<li>训练集：60%</li>\n<li>交叉验证集：20％</li>\n<li>测试集：20％</li>\n</ul>\n<p>现在我们可以使用以下方法为三个不同的集合计算三个单独的错误值：</p>\n<ol>\n<li>使用每个多项式的训练集来优化Θ中的参数。</li>\n<li>使用交叉验证集找出具有最小误差的多项式度d。</li>\n<li>使用带有测试集的估计泛化错误 Jtest(Θ(d))，（d =具有较低误差的多项式的θ）;</li>\n</ol>\n<p>这样，多项式d的程度还没有使用测试集进行训练。</p>\n</li>\n<li><p>诊断偏差(欠拟合)与方差(过拟合)</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/I4dRkz_pEeeHpAqQsW8qwg_bed7efdd48c13e8f75624c817fb39684_fixed.png?expiry=1510444800000&amp;hmac=kGTxXBZKn_-OTBI0LQj45iZL2KpfQW-jPiBjfC3iNKA\" alt=\"\"></p>\n</li>\n<li><p>正则化和偏向/方差</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/3XyCytntEeataRJ74fuL6g_3b6c06d065d24e0bf8d557e59027e87a_Screenshot-2017-01-13-16.09.36.png?expiry=1510444800000&amp;hmac=__zXJR53oN2UDmpZq2G3k5hHywJ2BQdNq4H4YFEJt2o\" alt=\"img\"></p>\n<p>在上图中，我们看到了λ 升增加，我们的适应变得更加僵硬。另一方面，如λ 接近0，我们倾向于过度拟合数据。那么我们如何选择我们的参数λ 得到它“恰到好处”？为了选择模型和正则化项λ，我们需要：</p>\n<ol>\n<li>创建一个lambda表（即λ∈{0,0.01,0.02,0.04,0.08,0.16,0.32,0.64,1.28,2.56,5.12,10.24}）;</li>\n<li>创建一个不同程度的模型或任何其他变体。</li>\n<li>迭代通过 升s和每个 λ  通过所有的模型来学习一些Θ.</li>\n<li>使用学习的Θ（用λ计算）计算交叉验证错误  JCV(Θ)  <strong>没有</strong>正则化或λ= 0。</li>\n<li>选择交叉验证集合中产生最低错误的最佳组合。</li>\n<li>使用最佳组合 Θ and λ, apply it on Jtest(Θ)  看看它是否有一个很好的概括性的问题。</li>\n</ol>\n</li>\n<li><p>学习曲线</p>\n<p>在少数几个数据点（如1,2或3）上训练算法将很容易产生0个错误，因为我们总是可以找到一个接近这些点数的二次曲线。因此：</p>\n<ul>\n<li>随着训练集变大，二次函数的误差增加。</li>\n<li>经过一定的m或训练集大小后，误差值将平稳。</li>\n</ul>\n<p><strong>经历高偏见：</strong></p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/bpAOvt9uEeaQlg5FcsXQDA_ecad653e01ee824b231ff8b5df7208d9_2-am.png?expiry=1510444800000&amp;hmac=zvsoyG_GmrYjBD8S2Hps1f4mmKd_TUJkCOrFTqK0Wy4\" alt=\"img\"></p>\n<p><strong>经历高方差：</strong></p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/vqlG7t9uEeaizBK307J26A_3e3e9f42b5e3ce9e3466a0416c4368ee_ITu3antfEeam4BLcQYZr8Q_37fe6be97e7b0740d1871ba99d4c2ed9_300px-Learning1.png?expiry=1510444800000&amp;hmac=iW98QAh_M8XdkxfcWgoXx9OXFgsyxz9FqRKdtET1iDk\" alt=\"img\"></p>\n</li>\n<li><p>决定下一步做什么</p>\n<p>Our decision process can be broken down as follows:</p>\n<ul>\n<li><p><strong>Getting more training examples:</strong> Fixes high variance</p>\n</li>\n<li><p><strong>Trying smaller sets of features:</strong> Fixes high variance</p>\n</li>\n<li><p><strong>Adding features:</strong> Fixes high bias</p>\n</li>\n<li><p><strong>Adding polynomial features:</strong> Fixes high bias</p>\n</li>\n<li><p><strong>Decreasing λ:</strong> Fixes high bias</p>\n</li>\n<li><p><strong>Increasing λ:</strong> Fixes high variance.</p>\n</li>\n</ul>\n<h3 id=\"诊断神经网络\"><a href=\"#诊断神经网络\" class=\"headerlink\" title=\"诊断神经网络\"></a><strong>诊断神经网络</strong></h3><ul>\n<li>一个参数较少的神经网络<strong>容易出现</strong>不足。这也是<strong>计算更便宜</strong>。</li>\n<li>具有更多参数的大型神经网络<strong>容易过度拟合</strong>。这在<strong>计算</strong>上也是<strong>昂贵的</strong>。在这种情况下，您可以使用正则化（增加λ）来解决过度拟合问题。</li>\n</ul>\n<p>使用单个隐藏层是一个很好的默认开始。您可以使用交叉验证集在许多隐藏层上训练您的神经网络。然后您可以选择性能最好的一个。</p>\n<p><strong>模型复杂性的影响：</strong></p>\n<ul>\n<li>低阶多项式（低模型复杂度）具有高偏差和低方差。在这种情况下，模型不太一致。</li>\n<li>高阶多项式（高模型复杂度）非常适合训练数据，测试数据极其糟糕。这些对训练数据的偏倚低，但差异很大。</li>\n<li>实际上，我们希望选择一个介于两者之间的模型，这个模型可以很好地推广，但是也可以很好地拟合数据。</li>\n</ul>\n</li>\n<li><p>优先处理什么工作</p>\n<p><strong>系统设计示例：</strong></p>\n<p>给定一个电子邮件数据集，我们可以为每个电子邮件构建一个向量。这个向量中的每个条目代表一个单词。该矢量通常包含10,000到50,000个条目，通过查找我们的数据集中最常用的单词来收集。如果在电子邮件中找到一个单词，我们将分配它的相应条目1，否则如果没有找到，条目将是0.一旦我们已经准备好了所有的x向量，我们将训练我们的算法，最后，我们可以用它来分类电子邮件是否是垃圾邮件。</p>\n<p>​</p>\n<p>那么你怎么能花时间来提高这个分类器的准确度呢？</p>\n<ul>\n<li>收集大量数据（例如“蜜罐”项目，但并不总是工作）</li>\n<li>开发复杂的功能（例如：在垃圾邮件中使用电子邮件标题数据）</li>\n<li>开发算法以不同的方式处理您的输入（识别垃圾邮件中的拼写错误）。</li>\n</ul>\n<p>很难判断哪个选项最有用。</p>\n</li>\n<li><p>错误分析</p>\n<p>解决机器学习问题的推荐方法是：</p>\n<ul>\n<li>从一个简单的算法开始，快速实施它，并尽早在交叉验证数据上进行测试。</li>\n<li>绘制学习曲线来决定是否有更多的数据，更多的功能等可能有所帮助。</li>\n<li>手动检查交叉验证集中示例的错误，并尝试找出发生大部分错误的趋势。</li>\n</ul>\n</li>\n<li><p>FI值</p>\n<p>如果我们定义一个测试集中，正样本个数为P, 负样本个数为N, 那么我们可以知道：P=TP+FN, N=TN+FP<br>$$<br>Recall=TP/(TP+FN)=TP/P<br>$$</p>\n<p>$$<br>Precision=TP/(TP+FP)<br>$$</p>\n<p>$$<br>F1=2⋅Precision⋅Recall/(Precision+Recall)<br>$$</p>\n<p>可以看到，recall 体现了分类模型H对正样本的识别能力，recall 越高，说明模型对正样本的识别能力越强，precision 体现了模型对负样本的区分能力，precision越高，说明模型对负样本的区分能力越强。F1-score 是两者的综合。F1-score 越高，说明分类模型越稳健。</p>\n</li>\n</ul>\n</li>\n<li><p>支持向量机</p>\n<p>支持向量机从本质上来讲，就是最大间隔分类器。</p>\n<p>这边从逻辑回归引出支持向量机，以及它最重要的思路——最大间隔。</p>\n<p>考虑逻辑回归：</p>\n<p><img src=\"http://img.blog.csdn.net/20161102105327162?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\"></p>\n<p>我们看下在SVM中对costfunction的改变 ：</p>\n<p><img src=\"/home/tofar/图片/选区_002.png\" alt=\"选区_002\"></p>\n<ul>\n<li><p>Large Margin Intuition</p>\n<p><img src=\"http://img.blog.csdn.net/20170531172351222?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>​</p>\n<p>SVM通过寻找分类中淡黄色背景的那条线作为边界，而不是其余满足条件的边界，因此SVM又被称为大间隔分类器。</p>\n<p><img src=\"http://img.blog.csdn.net/20170531180700686?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170531181014409?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>The mathematics behind large margin classification<br>下面我们从数学角度看一下SVM过简化问题，我们知道要求的最小值为||θ||的最小值，即θ的范数最小值</p>\n<p><img src=\"http://img.blog.csdn.net/20170531181437743?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>下面看一下限制条件代表的含义，通过高中数学，我们知道两个向量相乘的几何含义如下 </p>\n<p><img src=\"http://img.blog.csdn.net/20170531181853170?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>通过上面可知，我们要求||θ||的最小值，因此我们希望p(i)尽量大。</p>\n<p>假如选择了下面图中的绿色线作为边界，我们会发现p(i)比较小，这样不能得出||θ||的最小值 </p>\n<p><img src=\"http://img.blog.csdn.net/20170531182401955?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>如果选择下面的绿色线作为边界，我们可以得到较小的||θ||值 </p>\n<p><img src=\"http://img.blog.csdn.net/20170531182604397?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>核函数</p>\n<p><img src=\"/home/tofar/图片/选区_003.png\" alt=\"选区_003\"></p>\n<p>通过下面的图我们可以看出δ2对函数图形的改变</p>\n<p><img src=\"http://img.blog.csdn.net/20170531195107110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>关于参数对算法的影响 :</li>\n</ul>\n<p>大C:低偏差，高方差（对应低λ） </p>\n<p>小C:高偏差，低方差（对应高λ）</p>\n<p>大δ2：fi分布更平滑，高偏差，低方差<br>小δ2：fi分布更集中，低偏差，高方差 </p>\n<ul>\n<li>使用SVM步骤 ：</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20170531211622040?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjcwMDgwNzk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"2-SQL反模式\"><a href=\"#2-SQL反模式\" class=\"headerlink\" title=\"2. SQL反模式\"></a>2. SQL反模式</h2></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-取整错误\"><a href=\"#10-取整错误\" class=\"headerlink\" title=\"10. 取整错误\"></a>10. 取整错误</h3><p>   <strong>目标</strong>：使用小数取代整数</p>\n<p>   <strong>反模式</strong>：使用Float类型</p>\n<pre><code>根据IEEE754标识，float类型使用二进制格式编码实数数据。\n\n缺点：\n</code></pre><p>   (1) 舍入的必要性： 并不是所有的十进制中描述的信息都能使用二进制存储，出于一些必要的因，浮点数通常是舍入到了一个非常接近的值。</p>\n<p>   　　    举例：select rate from A where id=123   –Result:59.95</p>\n<p>​                         select * from A where rate=59.95     –Result：empty set;  no rows match.</p>\n<p>   ​                      select * from A where ABS(rate-59.95)&lt;0.000001   –这个才能正确查出数据！</p>\n<p>   ​                      59.95，在二进制中存储了最接近59.95的值，用十进制表示就是59.950000762939</p>\n<pre><code>（2）在SQL中使用FLOAT\n</code></pre><p>   ​           FLOAT类型的列中实际存储的数据可能并不完全等于它的值。如果将这个值扩大十亿倍，就能看出其中的区别</p>\n<p>   ​           示例：上例中的59.95</p>\n<p>   ​           变通的方法就是将浮点数看做“近似相等”，即两个值之间的差值足够小就认为它们相等。</p>\n<p>​     </p>\n<pre><code>**如何识别反模式**：任何使用Float、Real或者Double Percent类型的设计都有可能是反模式\n</code></pre><p>​     </p>\n<pre><code>**合理使用反模式**：如果要存储的值取值范围很大，大于integer、numeric的范围，那只能用float了。科学计算类的程序通常使用float。\n</code></pre><p>​     </p>\n<pre><code>**解决方案**：使用numeric、decimal类型\n\n                使用numeric、decimal代替float，他们不会对存储的有理数进行舍入，因此select * from A where rate=59.95会返回记录。\n\n               示例: ALTER TABLE Accounts ADD COLUMN hourly_rate NUMERIC(9, 2);    -- 9代表总位数，2代表精确度\n\n　　        注意：numeric、decimal在sqlserver乃至sybase中，是完全一样的。\n\n**结论**：尽可能不要使用浮点数\n</code></pre><h3 id=\"11-每日新花样\"><a href=\"#11-每日新花样\" class=\"headerlink\" title=\"11. 每日新花样\"></a>11. 每日新花样</h3><p><strong>目标</strong>：限定列的有效值，将一列的有效字段值约束在一个固定的集合中。类似于数据字典。</p>\n<p><strong>反模式</strong>：在列定义上指定可选值</p>\n<p>​            1、 对某一列定义一个检查约束项，这个约束不允许往列中插入或者更新任何会导致约束失败的值：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Bugs(<span class=\"keyword\">status</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">check</span>(<span class=\"keyword\">status</span> <span class=\"keyword\">in</span>(<span class=\"string\">'new'</span>,<span class=\"string\">'in progress'</span>,<span class=\"string\">'fixed'</span>)));</span><br></pre></td></tr></table></figure>\n<p>​            2、使用域或者用户自定义类型（UDT）等方法。即使用这些方法约束某一列只能接受一个特定集合的数据，并且能很方便的将这约束应用到整个域上。但这些特性并没有得到大多数关系数据库的支持。</p>\n<p>　         3、使用触发器：编写一个触发器，当修改指定列的内容时触发，将被修改的值和允许输入的值进行匹配，</p>\n<p>​                如果不符合则产生一个错误中断操作。</p>\n<p>　　缺点：</p>\n<p>​    1、 无法查询出所有的约束值来供上层应用程序使用。</p>\n<p>​           不能用select distinct status from Bugs，因为可能有的status目前还没有存储。维护不好的话，还有可能造成列表和数据库存储的值，不一致。</p>\n<p>　　 2、增加新的约束值，需要修改数据库定义或者触发器。</p>\n<p>　　 3、废弃或修改某个值，可能要修改大量的数据，风险很大也不合理。</p>\n<p>　　 4、可移植性差，check约束、域，或者UDT在各种数据库中的支持形式并不统一。</p>\n<p> <strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式</p>\n<p>　　1、我们不得不将数据库下线，才能在程序中加入一个新的选项。</p>\n<p>　　2、这个Status列可以填入这些候选值中的一个。我们不应该改变这个后选值列表。</p>\n<p>　　3、程序代码中关于业务规则的选项列表和数据库中的值又不同步了。</p>\n<p><strong>合理使用反模式</strong>：</p>\n<p>　　1、在候选值几乎不变化的时候可以使用。</p>\n<p>　　2、存储没有业务逻辑且不需要改变的候选值时非常方便。</p>\n<p>​          比如存储一对二选一切相互对立的值：Left/Right、On/Off等。</p>\n<p>　　3、Check约束可以再更多的场景下使用，比如用来检测一个时间区间中start永远小于end。</p>\n<p><strong>解决方案</strong>：创建一张检查表（类似于字典表），每一行包含一个允许在列中出现的候选值，然后在目标表中定义一个外键约束。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> BugStatus ( <span class=\"keyword\">status</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>) PRIMARY <span class=\"keyword\">KEY</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>结论</strong>：在验证固定集合的候选值时使用元数据；</p>\n<p>​           在验证可变集合的候选值时使用数据。</p>\n<h3 id=\"12-幽灵文件\"><a href=\"#12-幽灵文件\" class=\"headerlink\" title=\"12. 幽灵文件\"></a>12. 幽灵文件</h3><p><strong>目标</strong>：存储图片或其他多媒体大文件</p>\n<p><strong>反模式</strong>：图片存储在数据库外的文件系统中，数据库表中存储文件的对应的路径和名称。</p>\n<p>　　<strong>缺点</strong>：</p>\n<p>　　     1、文件不支持Delete操作。使用SQL语句删除一条记录时，对应的文件不会被删除，需要使用额外的程序来操作。　　　</p>\n<p>　　     2、文件不支持事务隔离</p>\n<p>　        3、文件不支持回滚操作</p>\n<p>　        4、文件不支持数据库备份工具：备份工具不知道如何将通过路径引用的哪些文件也包含在备份操作当中。</p>\n<p>　　     5、文件不支持sql的访问权限设置</p>\n<p>　　     6、文件不是sql数据类型：字段中存储的是文件的路径，数据库不会验证这个字符串是否是一个有效的路径，也不会验证对应的文件是否存在。任何将这个字符串作为路径处理的逻辑都依赖于你的程序逻辑。</p>\n<p><strong>如何识别反模式</strong>：典型的使用反模式的项目通常没有考虑以下几个或者全部问题</p>\n<p>　　1、数据备份和回复的过程是怎样的？怎么对一个备份进行验证？</p>\n<p>​          你有没有在一个干净的系统或者别的系统上对备份回复的数据进行测试？</p>\n<p>　　2、图片文件堆积在那里，还是当他们孤立的时候就从系统中移除？移除他们的过程是怎么样的？</p>\n<p>​          这是一个自动的还是手动的过程？</p>\n<p>　　3、系统中的哪些用户有权限查看这些图片？进入权限是怎么限制的？当用户请求查看他们无权查看的图片时会发生什么？</p>\n<p>　　4、我能撤销对图片的变更吗？如果能，是应用程序来回复图片之前的状态吗？</p>\n<p><strong>合理使用反模式</strong>：如下是将图片或者大文件存储在数据库之外的好理由</p>\n<p>　　1、这个数据库在没有图片的时候能精艺很多，因为图片相比于简单的数据类型来说大很多；</p>\n<p>　　2、当不包含图片时备份数据库会更快并且备份的文件更小。你必须额外的执行一次文件备份，</p>\n<p>​          但这些比备份一个大型数据库要更容易管理；</p>\n<p>　　3、如果图片是存储在数据库之外的文件系统中，对图片的预览或者编辑就能够使用更简单直接的处理方式。</p>\n<p>　　如果这些图片存在文件系统中的好处是重要的，那么可以将大文件存储在数据库之外。</p>\n<p><strong>解决方案</strong>：在需要的时候使用BLOB类型。</p>\n<p>　　所有的数据库产品都支持BLOB类型，支持你存储任何二进制数据。</p>\n<p><strong>注</strong>: 存储在数据库之外的数据不由数据库管理</p>\n<h3 id=\"13-使用索引\"><a href=\"#13-使用索引\" class=\"headerlink\" title=\"13. 使用索引\"></a>13. 使用索引</h3><p><strong>目标</strong>：优化性能</p>\n<p>​        改善性能最好的技术就是在数据库中合理地使用索引。</p>\n<p>　　 索引也是数据结构，它能使数据库将指定列中的某个值快速定位在相应的行。</p>\n<p><strong>反模式</strong>：无规划的使用索引</p>\n<p>　　1、不使用索引或索引不足</p>\n<p>　　2、使用了太多的索引或一些无效的索引</p>\n<p>　　　　（1）大多数数据库会自动地位主键建立索引，因此额外再定义一个索引就是冗余。这个额外的索引并无任何好处，它只会成为额外的开销。</p>\n<p>　　　　（2）字符串索引很大，而且也不太可能对它进行<strong>全匹配查找</strong>。</p>\n<p>　　　　（3）使用组合索引是一个很好的选择，但是大部分创建的组合索引都是冗余或者很少使用。</p>\n<p>​                  组合索引的顺序也很重要：在查询条件、联合条件或者排序规则上使用索引时按照<strong>从左到右的顺序</strong>。</p>\n<p>　　3、执行了一些让索引无能为力的查询</p>\n<p>　　　　Like、表达式，都可能使索引无效。</p>\n<p><strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式</p>\n<p>　　1、这是我的查询语句，怎样使它更快？</p>\n<p>　　2、我在每个字段上都定义了索引，为什么它没有变的更？</p>\n<p>　　3、我听说索引会使数据库变慢，所以我不使用它。</p>\n<p><strong>合理使用反模式</strong>：</p>\n<p>　　　　<strong>分离率</strong>是衡量数据库索引的一个指标。分离率越高索引效率就越高。需要时刻关注你的数据库中索引的分离率，并且抛弃那些低效的索引。 </p>\n<p><strong>解决方案</strong>：MENTOR你的索引</p>\n<p>　　1、Measure测量：大多数数据库都提供了一些方法来记录执行SQL查询的耗时，因此可以来定位最耗时的查询。</p>\n<p>　　2、Explain解释：测量之后，分析查询变慢的原因。</p>\n<p>​          每个数据库都使用一种优化工具为每次查询选择最合适的索引，并生产分析报表，称之为“<strong>查询执行计划（QEP）</strong>”。</p>\n<p>　　3、Nominate挑选：有了查询优化工具的QEP报表，应该仔细地查找那些没有使用索引的查询操作。</p>\n<p>　　4、Test测试：创建完索引之后，需要重新测试跟踪那些查询，确认你的改动确实提升了性能。</p>\n<p>　　5、Optimize优化：索引是小型的、频繁使用的数据结构，因为很适合将他们常驻在内存中。内存操作的性能是磁盘I/O操作的好几倍。</p>\n<p>​          数据库服务器允许你配置缓存所需要的系统内存大小。   </p>\n<p>　　6、Rebuild重组：索引在平衡的时候其效率最高，当你更新或者删除记录时，索引就逐渐变得不平衡。　</p>\n<p>​          要想最大限度地使用索引，因此要定期对索引进行维护。</p>\n<p><strong>结论</strong>：了解你的数据库，了解你的查询，然后MENTOR你的索引。</p>\n<h3 id=\"14-对未知的恐惧\"><a href=\"#14-对未知的恐惧\" class=\"headerlink\" title=\"14. 对未知的恐惧\"></a>14. 对未知的恐惧</h3><p><strong>目标</strong>：辨别并使用Null值</p>\n<p><strong>反模式</strong>：将Null值作为普通的值，反之亦然</p>\n<p>　　1、在表达式中使用Null：</p>\n<p>​          Null值与空字符串是不一样的，Null值参与任何的加、减、乘、除等其他运算，<strong>结果都是Null</strong>；</p>\n<p>​          Null值与False也不同。And、Or和Not三个bool操作如果设计Null，结果很迷惑。</p>\n<p>　　2、搜索运行为空的列：任何与Null的比较逗返回“未知”，既不是True，也不是False。</p>\n<p>​          在Where表达式中只能使用 Is Null 或者 Is Not Null，其他操作都查询不到结果。</p>\n<p>　　3、不能使用Null作为参数传入查询表达式中。</p>\n<p>　　要避免上述问题，可以使用约束，设置列禁止Null。存储值必须是有意义的内容。</p>\n<p><strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式</p>\n<p>　　1、我如何将没有值（Null）的列取出来？</p>\n<p>　　2、将字符串与Null进行拼接操作，结果返回Null</p>\n<p><strong>合理使用反模式</strong>：</p>\n<p>　　使用Null并不是反模式，反模式是将Null作为一个普通值处理或者使用一个普通的值来取代Null的作用。有一种情况可以讲Null视为普通值，就是导入或者导出数据的时候。 </p>\n<p><strong>解决方案</strong>：将Null值视为特殊值　</p>\n<p>　　1、在标量表达式中使用null</p>\n<p>　　　　进行=、&lt;&gt;、+、||操作时，只要有一个null值，结果就为null。</p>\n<p>　　2、在布尔表达式中使用null</p>\n<p>　　　　布尔表达式中，只有：null and false结果为false，null or true结果为true，其它情况结果都是null。</p>\n<p>　　3、检索null值</p>\n<p>　　　　使用 is null、is not null</p>\n<p>　　4、声明not null列</p>\n<p>　　　　有时候可以通过使用default值来避免null，但有时候却不可以这么做。</p>\n<p>　　5、使用动态默认值</p>\n<p>　　　　SqlServer中的Coalesec()与isnull()函数</p>\n<h3 id=\"15-模棱两可的分组\"><a href=\"#15-模棱两可的分组\" class=\"headerlink\" title=\"15. 模棱两可的分组\"></a>15. 模棱两可的分组</h3><p><strong>目标</strong>：查询得到每组的max（或者min等其他聚合函数）值，并且得到这个行的其他字段 </p>\n<p><strong>反模式</strong>：引用非分组列</p>\n<p>　　1、单值规则：跟在Select之后的选择列表中的每一列，对于每个分组来说都必须返回且仅返回一直值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ProductId,<span class=\"keyword\">Max</span>(DateReported) <span class=\"keyword\">as</span> Latest</span><br><span class=\"line\"><span class=\"keyword\">from</span> Bugs  <span class=\"keyword\">as</span> b</span><br><span class=\"line\"><span class=\"keyword\">Join</span> BugProducts  <span class=\"keyword\">as</span> bp</span><br><span class=\"line\"><span class=\"keyword\">on</span> b.BugId = bp.BugId</span><br><span class=\"line\"><span class=\"keyword\">Group</span> <span class=\"keyword\">by</span> ProductId;</span><br></pre></td></tr></table></figure>\n<p>　　在Group By字句中出现的列能够保证他们在每一组都只有一个值，无论这个组匹配多少行；</p>\n<p>​        Max()等表达式也能保证每组都返回单一的值，即传回参数中的最大值。</p>\n<p><strong>如何识别反模式</strong>：当输入一个违背了单值规则的查询时，会立刻返回给你一个错误。数据库会返回不同的错误信息。</p>\n<p>　　在SQLite和MySQL中，有歧义的列可能包含不可预测的和不可靠的数据。</p>\n<p><strong>合理使用反模式</strong>：</p>\n<p>　　没有歧义的关系叫做“<strong>功能依赖</strong>”，最常见的就是表的主键和对应的值。</p>\n<p><strong>解决方案</strong>：使用无歧义的列</p>\n<p>　　1、只查询功能依赖的列：将有歧义的列排除在查询之外。</p>\n<p>　　2、使用关联子查询：关联子查询会引用外连接查询，并且根据外联结果查询中的每一条记录最终返回不同的结果。</p>\n<p>​          关联子查询的性能不是最好的，因为外联结查询结果中的每一条记录都会执行一遍关联的子查询。</p>\n<p>　　3、使用衍生表：使用衍生表来执行子查询，先得到一个临时的结果，然后用这个临时表和原表进行连接查询。</p>\n<p>​          性能相比子查询更好一些。但是数据库必须将临时表得到的记录存在一张临时表中，因此这个方案也不是最好的。</p>\n<p>　　4、使用Join：创建一个联结查询区匹配哪些可能不存在的记录。这样的查询结果被称为<strong>外连接查询。</strong>该方案使用与针对大量数据查询并且可伸缩性比较关键时。能更好的适应数据量的变化，但是难以理解与维护。</p>\n<p>　　5、对额外的列使用聚合函数。只有确定最新的bug_id对应的Bug的日期也是最新的时候，才能使用这个方案，也就是说，Bug是按照时间顺序提交的。</p>\n<p>　　6、链接同组所有值：MySQL与SQLite提供了一个叫做Group_Contract（）函数，能将这一组中的所有的值连在一起作为单一值返回，多个值之间用逗号分隔。其他数据库不支持该函数。 </p>\n<p><strong>结论</strong>：遵循单值规则，避免获得模棱两可的查询结果。</p>\n<h3 id=\"16-使用随机数排序\"><a href=\"#16-使用随机数排序\" class=\"headerlink\" title=\"16. 使用随机数排序\"></a>16. 使用随机数排序</h3><p><strong>目标</strong>：随机排序，使用高效的SQL语句查询获取随机数据样本。</p>\n<p><strong>反模式</strong>：使用RAND()随机函数</p>\n<p>​           SELECT * FROM Employees AS e ORDER BY RAND() Limit 1</p>\n<p>　　缺点：无法利用索引，每次选择的时候都不同且不可预测。进行<strong>全表遍历</strong>，性能极差。</p>\n<p><strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式</p>\n<p>　　1、在SQL中，返回一个随机行速度非常慢；</p>\n<p>　　2、要获取所有的记录然后随机一个。要如何增加程序可使用的内存大小？</p>\n<p>　　3、有些列出现的频率比别的列要高一些，这个随机算法不是很随机。 </p>\n<p><strong>合理使用反模式</strong>：在数据量很小的时候，可以使用随机排序。</p>\n<p><strong>解决方案</strong>：没有具体的排序……</p>\n<p>　　1、从1到最大值之间随机选择</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> b1.* </span><br><span class=\"line\"><span class=\"keyword\">from</span> Bugs <span class=\"keyword\">as</span> b1</span><br><span class=\"line\"><span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">ceiling</span>(<span class=\"keyword\">rand</span>()*(<span class=\"keyword\">select</span> <span class=\"keyword\">max</span>(bugId) <span class=\"keyword\">from</span> Bugs)) <span class=\"keyword\">as</span> randId) <span class=\"keyword\">as</span> b2</span><br><span class=\"line\">  <span class=\"keyword\">on</span> (b1.bugId = b2.bugId);</span><br></pre></td></tr></table></figure>\n<p>​          因为id可能是不连续的，所以可能有时候无法查询到结果。</p>\n<p>　　2、选择下一个最大值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> b1.* </span><br><span class=\"line\"><span class=\"keyword\">from</span> Bugs <span class=\"keyword\">as</span> b1</span><br><span class=\"line\"><span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">ceiling</span>(<span class=\"keyword\">rand</span>()*(<span class=\"keyword\">select</span> <span class=\"keyword\">max</span>(bugId) <span class=\"keyword\">from</span> Bugs)) <span class=\"keyword\">as</span> randId) <span class=\"keyword\">as</span> b2</span><br><span class=\"line\"><span class=\"keyword\">where</span>  b1.bugId &gt;= b2.bugId <span class=\"comment\">--为了避免id不存在，我们找上面那条id的后一条数据。</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> b1.bugId <span class=\"keyword\">limit</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>​            当缝隙中是缝隙不是很大并且每个值都要被等概率选择的重要性不是很高时，可以考虑使用此方案。</p>\n<p>　　3、索取所有的键值，随机选择一个，再使用这个随机选择的主键查找完整的记录。</p>\n<p>　　4、使用偏移量选择随机行</p>\n<p>计算总的数据行数，随机选择0到总行数之间的一个值，然后用这个值作为位移来获取随机行</p>\n<p>​       5、专有解决方案</p>\n<p>　　每种数据库都提供专有的解决方案</p>\n<p><strong>结论</strong>：有些查询是无法优化的，换种方法试试看。</p>\n<h3 id=\"17-可怜人的搜索引擎\"><a href=\"#17-可怜人的搜索引擎\" class=\"headerlink\" title=\"17. 可怜人的搜索引擎\"></a>17. 可怜人的搜索引擎</h3><p><strong>目标</strong>：全文搜索</p>\n<p>​        使用SQL搜索关键字，同时保证快速和精确，依旧是相当地困难。</p>\n<p>​        SQL的一个基本原理（以及SQL所继承的关系原理）就是一列中的单个数据是<strong>原子性</strong>的。</p>\n<p><strong>反模式</strong>：模式匹配</p>\n<p>​           使用Like 或者正则表达式。</p>\n<p>　　缺点：（1）无法使用索引，进行全表遍历，非常耗时，性能极低。</p>\n<p>　　　　　（2）有时候会返回意料之外的结果。select * from bugs where description like ‘%one%’，</p>\n<p>​                    返回结果可能是money、prone、lonely。</p>\n<p>​                    正则表达式可能会为单词边界提供一个模式来解决单词的匹配问题: </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Bugs <span class=\"keyword\">WHERE</span> description REGEXP <span class=\"string\">'[[:&lt;:]]one[[:&gt;:]]'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式</p>\n<p>　　1、如何在like表达式的2个通配符之间插入一个变量？</p>\n<p>　　2、如何写一个正则表达式来检查一个字符串是否包含多个单词、不包含一个特定的单词，或者包含给定单词的任意形式？</p>\n<p>　　3、网站的搜索功能在增加了很多文档进去之后慢的不可理喻。</p>\n<p><strong>合理使用反模式</strong>：</p>\n<p>　　1、性能总是最重要的，如果一些查询过程很少执行，就不必要花很多功夫去对它进行优化</p>\n<p>　　2、使用模式匹配操作进行很复杂的查询是很困难的，但是如果你为了一些简单的需求设计这样的模式匹配，它们能帮助你用最少的工作量获得正确的结果。</p>\n<p><strong>解决方案</strong>：使用正确的工具</p>\n<p>　　最好的方案就是使用特殊的搜索引擎技术，而不是SQL。</p>\n<p>　　另一个方案是将结果保存起来从而减少重复的搜索开销。</p>\n<p>　　1、MySQL中的全文索引：可以再一个类型为Char、varchar或者Text的列上定义一个全文索引。然后使用Match函数来搜索。</p>\n<p>　　2、Oracle中的文本索引：Context、Ctxcat、Ctxxpath、Ctxule。</p>\n<p>　　3、SQL Server中的全文搜索：使用Contains()操作符来使用全文索引。使用之前需要通过复杂的步骤来配置。</p>\n<p>　　4、PostgreSQL的文本搜索：提供一个复杂大可大量配置的方式来将文本转换为可搜索的词汇集合，并且让这些文档能够进行模式匹配搜索。</p>\n<p>　　5、SQLite的全文搜索：使用SQLite的扩展组件来实现。</p>\n<p>　　6、第三方搜索引擎：</p>\n<p>　　　　（1）Sphinx Search：开源的搜索引擎，用于MySQL以及PostgreSQL来配套使用。</p>\n<p>　　　　（2）Apache Lucene:是一个针对Java程序的成熟搜索引擎。</p>\n<p>​       7、实现自己的搜索引擎：</p>\n<p>​          使用反向索引方案：反向索引就是一个所有可能被搜索的单词列表。</p>\n<p>　　　　（1）定义一个<strong>KeyWords表</strong>来记录所有用户搜索的关键字，然后定义一个<strong>交叉表</strong>来建立多对多的关系。</p>\n<p>　　　　（2）将每个关键字和匹配的内容添加到交叉表中。</p>\n<p>　　　　　　　　当有新的搜索单词，就使用like查询结果，并将结果保存到交叉表里，这样下次就不必like了。当有新的文档入库，就需要用触发器（或者定时）去填充交叉表。</p>\n<p><strong>结论</strong>：不必使用SQL来解决所有问题。</p>\n<h3 id=\"18-意大利面条式查询\"><a href=\"#18-意大利面条式查询\" class=\"headerlink\" title=\"18. 意大利面条式查询\"></a>18. 意大利面条式查询</h3><p><strong>目标</strong>：减少SQL查询数据</p>\n<p><strong>反模式</strong>：使用一步操作解决复杂问题</p>\n<p>　　使用一个查询来获得所有结果的最常见后果就是产生了一个<strong>笛卡尔积</strong>。导致查询性能降低。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT p.product_id, </span><br><span class=\"line\">  COUNT(f.bug_id) AS count_fixed,</span><br><span class=\"line\">  COUNT(o.bug_id) AS count_open,</span><br><span class=\"line\">FROM BugsProducts p</span><br><span class=\"line\">LEFT OUTER JOIN Bugs f ON (p.bug_id = f.bug_id AND f.status = &apos;FIXED&apos;)</span><br><span class=\"line\">LEFT OUTER JOIN Bugs o ON (p.bug_id = o.bug_id AND o.status = &apos;OPEN&apos;)</span><br><span class=\"line\">WHERE p.product_id = 1</span><br><span class=\"line\">GROUP BY P.product_id;</span><br></pre></td></tr></table></figure>\n<p>你碰巧知道对于给定的这个产品，有12个Bug被修复了，有7个Bug是打开的，因此，结果看上去很耐人寻味：</p>\n<p>Product_id           count_fixed           count_open</p>\n<p>1                               84                          84</p>\n<p><strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式</p>\n<p>　　1、为什么我的求和、技术返回的结果异常地大？</p>\n<p>　　2、我一整天都在和整个变态的查询语句做斗争。SQL并不是那么的难写，如果你和单条SQL查询纠结了很长时间，</p>\n<p>​          应该重新考虑实现方式。</p>\n<p>　　3、试试再加一个Distinct去除重复数据。</p>\n<p><strong>解决方案</strong>：分而治之</p>\n<p>　　1、用多个sql语句查询得到数据，再进行整合。或者union多个sql的结果。</p>\n<p>　　2、使用SQL语句批量生成多个动态SQL语句。</p>\n<p><strong>结论</strong>：尽管SQL支持用一行代码解决复杂的问题，但是也别做不切实际的事情。</p>\n<h3 id=\"19-使用-号，隐式的列\"><a href=\"#19-使用-号，隐式的列\" class=\"headerlink\" title=\"19. 使用*号，隐式的列\"></a>19. 使用*号，隐式的列</h3><p><strong>目标</strong>：减少输入 </p>\n<p><strong>反模式</strong>：捷径会让你迷失方向</p>\n<p>　　使用通配符和未命名的列能够达到减少输入的目的，但是这个习惯会带来一些危害。</p>\n<p>　　1、破坏代码重构：增加一列后，使用隐式的Insert插入语句报错；</p>\n<p>　　2、查询中使用通配符，影响性能和扩展性。大量数据在网络之间传输，可能会造成阻塞。</p>\n<p><strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式</p>\n<p>　　1、程序由于还使用老的列名而挂掉。</p>\n<p>　　　　改变了数据库里的一张表，添加、删除、重命名列，或者改变列的顺序。但没能更新全部使用到这张表的代码。</p>\n<p>　　2、花了几天时间终于找到了网络的瓶颈，终于减小了到数据库服务器的庞大的通信量。</p>\n<p><strong>合理使用反模式</strong>：</p>\n<p>　　1、在开发或者测试环境下可以使用通配符，在生成环境下尽量不要使用。</p>\n<p>　　2、可以在联结查询中的每个独立的表使用通配符。在通配符之前加上表名或者别名作为前缀。</p>\n<p>　　3、如果你的程序需要在增加、删除、重命名或者重新配置列时依旧能自动适应及调整，</p>\n<p>　　　那最好还是使用通配符。</p>\n<p><strong>解决方案：</strong>明确列出列名</p>\n<p><strong>结论：</strong>无论如何都不要使用通配符 </p>\n<h3 id=\"20-明文密码\"><a href=\"#20-明文密码\" class=\"headerlink\" title=\"20. 明文密码\"></a>20. 明文密码</h3><p><strong>目标</strong>：恢复或重置密码</p>\n<p><strong>反模式</strong>：使用明文存储密码</p>\n<p>　　1、存储密码</p>\n<p>　　　　使用明文存储密码或者在网络上传递密码是不安全的。</p>\n<p>​          如果攻击者截取到你用来插入（或者修改）密码的sql语句，就可以获得密码。</p>\n<p>　　     黑客获取密码的方式有很多种：</p>\n<p>　　　　（1）在客户端和服务器端数据库交互的网络线路上接货数据包。比如使用Wireshark黑客软件。</p>\n<p>　　　　（2）在数据库服务器上搜索SQL的查询日志。</p>\n<p>　　　　（3）从服务器或者备份介质上读取数据库备份文件内的数据。</p>\n<p>　　2、验证密码：同上。</p>\n<p>　　3、在Email中发送密码：Email的收发都需要经由网络层传输，数据可能会在其他的路由节点上被黑客劫持。 </p>\n<p><strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式合理使用反模式：</p>\n<p>　　1、能够恢复你的密码；</p>\n<p>　　2、将密码通过邮件以明文或可逆转的加密的格式发给你的程序。</p>\n<p><strong>合理使用反模式</strong>：</p>\n<p>　　1、你的程序可能需要使用密码来访问一个地第三方的服务，这意味着你的程序可能是一个客户端，</p>\n<p>​          必须使用可读的格式来存储这个密码。最好的做法是使用一些程序能够解码的加密方法来存储，</p>\n<p>　　　　而不是直接使用明文的方式存储在数据库中。</p>\n<p>　　2、并不是所有的程序都有被攻击的风险，也不是所有的程序都有敏感的程序需保护的信息。</p>\n<p>　　　　内文通讯的程序，只使用认证机制就可以了。</p>\n<p><strong>解决方案</strong>：</p>\n<p>　　1、先加密再存储</p>\n<p>​         （1）哈希是指将输入字符串转换成为另一个新的、不可识别的字符串的函数。</p>\n<p>​                哈希算法是不可逆的。</p>\n<p>　　　（2）在SQL中使用哈希</p>\n<p>　　　　　　哈希函数并是标准的SQL语言，因此你可能要依赖于所使用的数据库提供的哈希扩展。</p>\n<p>​               insert into Accounts(AccountId,AccountName,password)</p>\n<p>​               values(123,’billKarwin’, <strong>SHA2(</strong>‘xyzzy’<strong>)</strong>);—MySQL6.0.5的扩展函数</p>\n<p>​            （3）给哈希加料</p>\n<p>　　　　　  使用哈希值替换原来的明文密码，但是黑客仍然能够破解你的哈希值。通过他们预先准备好的自己的数据库，里面存储的可能的密码与对应的哈希值，然后比较久可以找出明文密码。预防这种“字典攻击”的一种方法是给你的密码加密表达式加点佐料。具体方法是在将用户密码传入哈希函数进行加密之前，将其和一个无意义的字符串拼接在一起。</p>\n<p>​               SHA2(‘password’) = ‘5exxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd8’;</p>\n<p>​               SHA2(‘password-0xT!sp9’) = ‘72xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx5b’;</p>\n<p>​               佐料的合理长度应该是8个字节。</p>\n<p>　　　　（4）在SQL中隐藏密码</p>\n<p>​                 只要不将明文密码放到SQL查询语句中，就能避免泄露。</p>\n<p>​                 具体做法：在程序代码中生成密码的哈希字符串，然后在SQL查询中使用哈希串。</p>\n<p>　　　　（5）在网络传输中，还有一个地方是攻击者有机会接货网络数据包的：在用户的浏览器和网站服务器之间。</p>\n<p>​                  当用户提交了一个登录表单时，浏览器将用户的密码以明文方式发送到服务器端，随后服务器端才能</p>\n<p>​                 使用这个密码进行哈希运算。</p>\n<p>​                 解决方法：在用户的浏览器发送表单数据之前就进行哈希运算。</p>\n<p>​                 但是这个方案也有一些不足的地方，就是你需要再进行正确的哈希运算之前，还要通过别的途径来获得和</p>\n<p>​                 这个密码相关联的佐料。这种方案是在从浏览器向服务器端提交表单密码时，使用安全的HTTP(https)链接。</p>\n<p>　　2、重置密码而不是恢复密码</p>\n<h3 id=\"21-SQL注入\"><a href=\"#21-SQL注入\" class=\"headerlink\" title=\"21. SQL注入\"></a>21. SQL注入</h3><p><strong>目标</strong>：编写SQL动态查询，防止SQL注入</p>\n<p>　　通常所说的“<strong>SQL动态查询</strong>”是指将程序中的变量和基本SQL语句拼接成一个完整的查询语句。</p>\n<p><strong>反模式</strong>：将未经验证的输入作为代码执行</p>\n<p>　　当向SQL查询的字符串中插入别的内容，而这些被插入的内容以你不希望的方式修改了查询语法时，<strong>SQL注入</strong>就成功了。</p>\n<p>　　传统的SQL注入案例中，所插入的内容首先完成了一个查询，然后再执行第二个完整的查询逻辑比如：@bugId的值是1234;Delete from Bugs，最后的SQL语句变成如下格式：</p>\n<p>​      Select * from Bugs where bugId = 1234<strong>;Delete from Bugs</strong></p>\n<p>​       1、意外无处不在</p>\n<p>​         由于字符串引起的语法错误，SQL语句是不会被执行的。</p>\n<p>　　    风险较大的是产生的SQL没有任何语法错误，并且以一种你所不希望的方式执行。</p>\n<p>　　2、对Web安全的严重威胁</p>\n<p>　　　　当攻击者能够使用SQL注入操控你的SQL查询语句时，就变成了一个巨大的威胁。</p>\n<p>​           通常做法是在参数后插入额外的字符串，改变对应SQL语句的意义，例如：</p>\n<p>​          Update Account </p>\n<p>​          set password = SHA2(‘zyxzy’)</p>\n<p>​          where accountId = 123 <strong>or true</strong>  –在传入accountId参数等于123的后面，添加了 or true</p>\n<p>​          理解SQL注入的关键，也是如何防止SQL注入的关键：<strong>SQL注入是通过在SQL语句被数据库解析之前，</strong></p>\n<p><strong>以修改其语法的形式工作的</strong>。只要在解析语句之前插入动态部分，就存在SQL注入的风险。</p>\n<p>3、寻找解决方法</p>\n<p>　　　　（1）转义：对传入的参数字符串进行转义操作，使它们不至于成为字符串的结束符。</p>\n<p>​                         使用2个连续的单引号或者反斜杠来转义。实现原理是在将应用程序中的数据插入到SQL语句之前</p>\n<p>​                         就进行转换。这种技术能减少由于动态内容中不匹配是引号做造成的SQL注入的风险，但在非字符串</p>\n<p>​                         内容的情况下，这种技术就会失效。</p>\n<p>　　　　（2）查询参数：查询参数的做法是在准备查询语句的时候，在对应参数的地方使用“<strong>参数占位符</strong>”。随后，</p>\n<p>​                         在执行这个预先准备好的查询时提供一个参数。</p>\n<p>​                         该方法的确是应对SQL注入的强劲解决方案，但是这还不是一个通用的解决方案，因为查询参数总是被视为是一个字面值。</p>\n<p>　　　　　　（a）多个值的列表不可以当成单一参数；</p>\n<p>　　　　　　（b）表名无法作为参数；</p>\n<p>​                      （c）列名无法作为参数；</p>\n<p>​                      （d）SQL关键字无法作为参数；</p>\n<p>　　　　（3）存储过程：存储过程是包含固定的SQL语句，这些语句在定义这个存储过程的时候被解析的。</p>\n<p>​                 在存储过程也可以使用SQL动态查询的，这样也存在安全隐患。</p>\n<p>　　　　（4）数据访问框架ORM：对于所有允许你使用字符串方式传入SQL语句的框架来说，都无法抵御SQL注入的攻击。</p>\n<p><strong>如何识别反模式</strong>：几乎所有的数据库应用程序都动态地构建SQL语句，如果使用拼接字符串的形式或者将变量插入到字符串的</p>\n<p>　　方法来构建SQL语句，这样的sql语句就会受到SQL注入攻击的威胁。 </p>\n<p><strong>合理使用反模式</strong>：没有任何理由使用反模式</p>\n<p><strong>解决方案</strong>：</p>\n<p>　　1、过滤输入内容，将所有不合法的字符从用户输入中剔除掉。</p>\n<p>　　2、参数化动态内容：如果查询中的变化部分是一些简单的类型，应该使用查询参数将其和SQL表达式分离。</p>\n<p>​         如果是在RDBMS解析完SQL语句之后才插入这个参数值，没有哪种SQL注入的功能能改变一个参数化了查询的语法结构。</p>\n<p>​         即使攻击者尝试使用带有恶意的参数值，诸如123 or true ，关系型数据库管理系统也会将这个字符串当成一个完整的值插入     </p>\n<p>​           Update Account </p>\n<p>​           set password = SHA2(‘zyxzy’</p>\n<p>​           where accountId =<strong>‘123 or true’ –当做一个完整的字符串而不会造成威胁</strong></p>\n<p>​        3、给动态输入的值加引号</p>\n<p>​          参数查询通常来说是最好的解决方案，但是在有些特殊的情况下，参数的占位符会导致查询优化器无法选择使用</p>\n<p>​          哪个索引来进行优化查询。</p>\n<p>​        4、找个可靠的人来帮你审查SQL语句</p>\n<p>​          在检查代码是否包含SQL注入风险的时候，参考一下几点：</p>\n<p>　　　　（1）找出所有使用了程序变量、字符串链接或者替换等方法组成的SQL语句。</p>\n<p>　　　　（2）跟踪在SQL语句中使用的动态内容的来源。找出所有的外部输入，比如用户输入、文件、系统环境、网络服务、 第三方代码，甚至于从数据库中获取的字符串。</p>\n<p>​              （3）假设任何外部内容都是潜在的威胁，对于不受信任的内容都要进行过滤、验证或者使用数组映射的方式来处理。</p>\n<p>　　　　（4）在将外部数据合并到SQL语句时，使用查询参数，或者用稳健的转义函数预先处理。</p>\n<p>　　　　（5）在存储过程的代码以及任何其他使用SQL动态查询语句的地方都做同样的检查。 </p>\n<p><strong>结论</strong>：让用户输入内容，但永远别让用户输入代码 </p>\n<h3 id=\"22-伪键洁癖，整理数据\"><a href=\"#22-伪键洁癖，整理数据\" class=\"headerlink\" title=\"22. 伪键洁癖，整理数据\"></a>22. 伪键洁癖，整理数据</h3><p><strong>目标</strong>：整理数据，使不连续的主键Id数据记录变的连续。</p>\n<p><img src=\"http://images.cnitblog.com/blog/142275/201410/171635185299075.png\" alt=\"img\"></p>\n<p><strong>反模式</strong>：填充断档的数据空缺。</p>\n<p>　　1、不按照顺序分配编号</p>\n<p>​          在插入新行时，通过遍历表，找到的第一个未分配的主键编号分配给新行，来代替原来自动分配的伪主键机制。</p>\n<p>​          使用Select Max(Id) + 1 这种查询语句，会出现并发访问的问题。</p>\n<p>　　2、为现有数据行重新编号：通常做法是找到主键最大的行，然后用最小的未被使用的值来更新它。</p>\n<p>　　　　缺点：（1）SQL语句比较麻烦；</p>\n<p>　　　　　　   （2）必须同时更新所有引用了你重新分配了主键的行的子记录；</p>\n<p>　　　　　　　（3）无法避免产生新的断档。</p>\n<p>​       3、制造数据差异</p>\n<p>　　　　如果别的外部系统依赖于数据库中的主键来定义数据，那么你的更新操作就会导致那个系统中的引用失效。</p>\n<p>　　　　重用主键不是一个号的注意，因为断档往往是由于一些合理的删除或者回滚数据所造成的。</p>\n<p>　　　　别因为那些伪键看上去是没用的而重新分配他们。</p>\n<p><strong>如何识别反模式</strong>：当出现以下情况时，可能是反模式</p>\n<p>　　1、在我回滚了一个插入操作后，要怎么重用囊而自动生成的标识？</p>\n<p>​          伪键一旦生成后不会回滚。如果非要回滚，RDBMS就必须在一耳光事务的声明周期内生成一个伪键，</p>\n<p>​          而这在多个客户端并发地插入数据时，会导致竞争或者死锁。</p>\n<p>　　2、bugId为3的这条记录怎么了？</p>\n<p>　　3、如何找到第一个未使用的Id？</p>\n<p>　　4、自增长整形id的数字标识如果达到了最大值怎么办？</p>\n<p><strong>合理使用反模式</strong>：</p>\n<p>　　没有理由要去改变伪键的值，由于它的值本身并没有什么重要的意义。如果这个主键列有实际的意义，那么这就是一个自然键，而不是伪键。</p>\n<p><strong>解决方案</strong>：</p>\n<p>　　主键的值必须是唯一且非空的，因而你才能使用主键来唯一确定一行记录，但这是主键的唯一约束，</p>\n<p>​     他们不需要一定非得是连续值才能用来标记行。</p>\n<p>　　1、定义行号：使用Row_Number()或者Limit等关键字来实现；</p>\n<p>　　2、使用Guid：数据库全局唯一标识符。</p>\n<p>​          优点：（1）可以再多个数据库服务器上并发地生成伪键，而不用担心生成同样的值。</p>\n<p>​                  （2）不存在断档的问题。</p>\n<p>​          缺点：（1）Guid的值太长，不方便输入；</p>\n<p>　　　　　　　（2）Guid的值是随机的，因此找不到任何规则或者依靠最大值来判断哪一行的最新插入的；</p>\n<p>　　　　　　　（3）Guid的存储需要16字节，这比传统的4自检整形伪键占用更多的控件，并且查询的速度更慢</p>\n<p><strong>结论</strong>：将伪键当做行的唯一性标识，但它们不是行号。</p>\n<h3 id=\"23-非礼勿视\"><a href=\"#23-非礼勿视\" class=\"headerlink\" title=\"23. 非礼勿视\"></a>23. 非礼勿视</h3><p><strong>目标</strong>：写更少的代码</p>\n<p><strong>反模式</strong>：无米之炊 忽略数据库API的返回值，将程序代码跟SQL混在一起<br>​       1.没有诊断的诊断 在多条sql顺序执行过程中，最好对结果进行诊断，保证错误能够快速定位。<br>​       2.字里行间 花费大量时间调试生成sql字符串的代码</p>\n<p><strong>解决方案</strong>：优雅的从错误中恢复<br>​       1.保持节奏 检查数据库API的返回状态和异常。<br>​       2.回溯你的脚步。sql语句记录，输出，调试。发现并解决代码中的问题已经很苦难了，就别再盲目的干了。</p>\n<h3 id=\"24-外交豁免权\"><a href=\"#24-外交豁免权\" class=\"headerlink\" title=\"24. 外交豁免权\"></a>24. 外交豁免权</h3><p>​  <strong>目标</strong>：最佳实践 使用版本控制工具管理源代码，编写单元测试脚本；编写文档，代码注释。<br>​  <strong>反模式</strong>：将SQL视为二等公民。</p>\n<h3 id=\"25-魔豆\"><a href=\"#25-魔豆\" class=\"headerlink\" title=\"25. 魔豆\"></a>25. 魔豆</h3><p><strong>目标</strong>: 简化MVC的模型</p>\n<p><strong>反模式</strong>: 模型仅仅是活动记录</p>\n<p>Robert L. Glass认为：</p>\n<blockquote>\n<p>80%的软件工作是智力活动。相当大的比例是创造性的活动，很少是文书性的工作。</p>\n</blockquote>\n<p>MVC架构指：模型-视图-控制器。我们使用MVC就是同时使用设计模式和软件框架。这是拆分程序逻辑的技术。</p>\n<ul>\n<li>View：处理输出。</li>\n<li>Controller：接收用户输入，处理响应逻辑，委托给Module执行操作，将结果传递给View。</li>\n<li>Module：程序核心，包括输入验证、业务逻辑，与数据库交互等。</li>\n</ul>\n<p>MVC使用者通常犯错在：仅把Module当作DAO（数据访问对象）。</p>\n<p><strong>解决方案</strong>: 模型包含活动记录</p>\n<p>不要把SQL查询语句传给Module对象，Module对象应该囊括了所有它需要的查询。</p>\n<p>将复杂的查询代码写在Module对象里，并作为接口暴露出来。遵循DRY原则。</p>\n<p>分离Module和DAO。Module和DAO/Active Record的关系是包含（has-a）而不是继承（is-a）。</p>\n<p>Module负责创建DAO。一个聚集了一系列DAO的Module应该负责创建这些对象。Controller和View只使用Module暴露出来的接口，而不要处理与数据交互的逻辑（如传递SQL给Module，以求其返回执行结果）。</p>\n<p>Module的接口应该是直接的（与业务逻辑直接相关，而不是过于抽象的接口），而不是数据库物理结构或CRUD操作。ADO/Active Record可以提供如find(), first(), insert(), save()之类的接口，但Module层的接口不要这么干。</p>\n<p>将Module类和DAO解耦，并可以为一个DAO设计多个模型类。</p>\n<p>框架很难给Module提供一个通吃的解决方案。</p>\n","categories":["学习笔记"],"tags":["学习笔记"]},{"title":"Java 垃圾回收机制","url":"http://mu-mo.top/2017/11/13/Java/Java垃圾回收机制/","content":"<h2 id=\"一、常用垃圾回收机制\"><a href=\"#一、常用垃圾回收机制\" class=\"headerlink\" title=\"一、常用垃圾回收机制\"></a>一、常用垃圾回收机制</h2><h3 id=\"1-标记-清除算法-mark-sweep\"><a href=\"#1-标记-清除算法-mark-sweep\" class=\"headerlink\" title=\"1. 标记-清除算法(mark-sweep)\"></a>1. 标记-清除算法(mark-sweep)</h3><p>  顾名思义，标记-清除算法分为两个阶段，标记(mark)和清除(sweep).</p>\n<p>在标记阶段，collector从mutator根对象开始进行遍历，对从mutator根对象可以访问到的对象都打上一个标识，一般是在对象的header中，将其记录为可达对象。</p>\n<p>而在清除阶段，collector对堆内存(heap memory)从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象-通过读取对象的header信息，则就将其回收。</p>\n<p>[图片上传失败…(image-8c300b-1510574775013)]</p>\n<p>从上图我们可以看到，在Mark阶段，从根对象1可以访问到B对象，从B对象又可以访问到E对象，所以B,E对象都是可达的。同理，F,G,J,K也都是可达对象。到了Sweep阶段，所有非可达对象都会被collector回收。同时，Collector在进行标记和清除阶段时会将整个应用程序暂停(mutator)，等待标记清除结束后才会恢复应用程序的运行。</p>\n<p><strong>缺点</strong>：</p>\n<p>​    标记-清除算法的比较大的缺点就是垃圾收集后有可能会造成大量的内存碎片，像上面的图片所示，垃圾收集后内存中存在三个内存碎片，假设一个方格代表1个单位的内存，如果有一个对象需要占用3个内存单位的话，那么就会导致Mutator一直处于暂停状态，而Collector一直在尝试进行垃圾收集，直到Out of Memory。</p>\n<h3 id=\"2-标记-压缩算法-mark-compact\"><a href=\"#2-标记-压缩算法-mark-compact\" class=\"headerlink\" title=\"2. 标记-压缩算法(mark-compact)\"></a>2. 标记-压缩算法(mark-compact)</h3><p>​       顾名思义，标记-压缩算法分为两个阶段，标记(mark)和压缩(compact).</p>\n<p>​      其中标记阶段跟标记-清除算法中的标记阶段是一样的，而对于压缩阶段，它的工作就是移动所有的可达对象到堆内存的同一个区域中，使他们紧凑的排列在一起，从而将所有<strong>非可达对象释放出来的空闲内存</strong>都集中在一起，通过这样的方式来达到减少内存碎片的目的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-e88ef401871c1ad2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<h3 id=\"3-复制算法-copying\"><a href=\"#3-复制算法-copying\" class=\"headerlink\" title=\"3. 复制算法(copying)\"></a>3. 复制算法(copying)</h3><p>堆内存对半分为两个半区，只用其中一个半区来进行对象内存的分配，如果在这个半区内存不够给新的对象分配了，那么就开始进行垃圾收集，将这个半区中的所有可达对象都拷贝到另外一个半区中去，然后继续在另外那个半区进行新对象的内存分配。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-df8caaaf977cf105.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p>​                           <img src=\"http://upload-images.jianshu.io/upload_images/7109326-b581f08eab1a7a6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"mg\"></p>\n<p><strong>缺点:</strong></p>\n<p>​    存压缩为原来的一半，利用率比较低，典型的空间换时间</p>\n<h3 id=\"4-引用计数算法-reference-counting\"><a href=\"#4-引用计数算法-reference-counting\" class=\"headerlink\" title=\"4. 引用计数算法(reference counting)\"></a>4. 引用计数算法(reference counting)</h3><p>​    通过在对象头中分配一个空间来保存该对象被引用的次数。如果该对象被其它对象引用，则它的引用计数加一，如果删除对该对象的引用，那么它的引用计数就减一，当该对象的引用计数为0时，那么该对象就会被回收。</p>\n<p>​    采用引用计数的垃圾收集机制跟前面三种垃圾收集机制最大的不同在于，垃圾收集的开销被分摊到整个应用程序的运行当中了，而不是在进行垃圾收集时，要挂起整个应用的运行，直到对堆中所有对象的处理都结束。因此，采用引用计数的垃圾收集不属于严格意义上的”Stop-The-World”的垃圾收集机制。</p>\n<p>注意：</p>\n<ul>\n<li><p>当某个对象的引用计数减为0时，collector需要递归遍历它所指向的所有域，将它所有域所指向的对象的引用计数都减一，然后才能回收当前对象。</p>\n</li>\n<li><p>但是这种引用计数算法有一个比较大的问题，那就是它不能处理环形数据 - 即如果有两个对象相互引用，那么这两个对象就不能被回收，因为它们的引用计数始终为1。这也就是我们常说的“内存泄漏”问题。如下图：</p>\n<p>[图片上传失败…(image-56fb94-1510574775013)]</p>\n</li>\n</ul>\n<h3 id=\"5-分代收集算法\"><a href=\"#5-分代收集算法\" class=\"headerlink\" title=\"5. 分代收集算法\"></a>5. 分代收集算法</h3><p>​    当前的商业虚拟机都采用的是”分代收集“算法，一般是把java堆分成新生代和老生代，这样就可以根据各个年代的特点采用最适当的垃圾收集算法，新生代中，对象大多是”朝生夕死“可以采用复制算法，而老年代的对象存活率比较高，而且没有担保空间进行内存分配，就要采用”标记-清除算法“或者”标记-整理“算法。</p>\n<p>##　二、Java垃圾回收</p>\n<h3 id=\"1-Java的内存分布\"><a href=\"#1-Java的内存分布\" class=\"headerlink\" title=\"1. Java的内存分布\"></a>1. Java的内存分布</h3><p>[图片上传失败…(image-5469f-1510574775013)]</p>\n<p>其中，堆内存分为年轻代和年老代，非堆内存主要是Permanent区域，主要用于存储一些类的元数据，常量池等信息。而年轻代又分为两种，一种是Eden区域，另外一种是两个大小对等的Survivor区域。</p>\n<h3 id=\"2-Java年轻代垃圾回收机制\"><a href=\"#2-Java年轻代垃圾回收机制\" class=\"headerlink\" title=\"2. Java年轻代垃圾回收机制\"></a>2. Java年轻代垃圾回收机制</h3><p>[图片上传失败…(image-3bdb3-1510574775013)]</p>\n<p>​    部分的新创建对象分配在新生代。因为大部分对象很快就会变得不可达，所以它们被分配在新生代，然后消失不再。当对象从新生代移除时，我们称之为”Minor GC”。<strong>新生代使用的是复制收集算法</strong>。</p>\n<p>​    新生代划分为三个部分：分别为Eden、Survivor from、Survivor to，大小比例为8：1：1（为了防止复制收集算法的浪费内存过大）。每次只使用Eden和其中的一块Survivor，回收时将存活的对象复制到另一块Survivor中，这样就只有10%的内存被浪费，但是如果存活的对象总大小超过了Survivor的大小，那么就把多出的对象放入老年代中。</p>\n<p>在三个区域中有两个是Survivor区。对象在三个区域中的存活过程如下：</p>\n<ol>\n<li>大多数新生对象都被分配在Eden区。</li>\n<li>第一次GC过后Eden中还存活的对象被移到其中一个Survivor区。</li>\n<li>再次GC过程中，Eden中还存活的对象会被移到之前已移入对象的Survivor区。</li>\n<li>一旦该Survivor区域无空间可用时，还存活的对象会从当前Survivor区移到另一个空的Survivor区。而当前Survivor区就会再次置为空状态。</li>\n<li>经过数次（默认是15次）在两个Survivor区域移动后还存活的对象最后会被移动到老年代。</li>\n</ol>\n<p>如上所述，两个Survivor区域在任何时候必定有一个保持空白。如果同时有数据存在于两个Survivor区或者两个区域的的使用量都是0，则意味着你的系统可能出现了运行错误。</p>\n<h3 id=\"3-Java老年代垃圾回收机制\"><a href=\"#3-Java老年代垃圾回收机制\" class=\"headerlink\" title=\"3. Java老年代垃圾回收机制\"></a>3. Java老年代垃圾回收机制</h3><p>​    存活在新生代中但未变为不可达的对象会被复制到老年代。一般来说老年代的内存空间比新生代大，所以在老年代GC发生的频率较新生代低一些。当对象从老年代被移除时，我们称之为 “Major GC”(或者Full GC)。 <strong>老年代使用标记-清理或标记-整理算法</strong></p>\n<h5 id=\"空间分配担保\"><a href=\"#空间分配担保\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h5><p>在发生Minor GC前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间。</p>\n<ol>\n<li><p>如果大于，那么Minor GC可以确保是安全的。</p>\n</li>\n<li><p>如果小于，虚拟机会查看HandlePromotionFailure设置值是否允许担任失败。</p>\n<ul>\n<li>如果允许，那么会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小<ul>\n<li>如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的</li>\n<li>如果小于，进行一次Full GC</li>\n</ul>\n</li>\n<li>如果不允许，也要改为进行一次Full GC</li>\n</ul>\n<p>​      前面提到过，新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况时（最极端就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，让Survivor无法容纳的对象直接进入老年代。与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来，在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。</p>\n<p>​       取平均值进行比较其实仍然是一种动态概率的手段，也就是说如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败（Handle Promotion Failure）。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。</p>\n</li>\n</ol>\n<h3 id=\"2-Java垃圾收集器\"><a href=\"#2-Java垃圾收集器\" class=\"headerlink\" title=\"2.Java垃圾收集器\"></a>2.Java垃圾收集器</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-50aa63cdc64648d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<ul>\n<li><p>Serial收集器(Serial/Serial Old)</p>\n<p>Serial是一个单线程的收集器，但它的“单线程”意义并不仅仅说明它只会使用一个CPU或一条手机此案成去完成垃圾和收集工作，更重要的是它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-7c4a48361283f09a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n</li>\n<li><p>ParNew收集器</p>\n<p>ParNew收集器其实就是Serial收集器的多线程版本。</p>\n<p>它是运行在Server模式下的虚拟机中首选的新生代收集器，其中有一个与性能无关但很重要的原因是：除了Serial收集器外，目前只有它能与CMS收集器配合工作。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-6dc89b8a0061332e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n</li>\n<li><p>Parallel Scavenge收集器</p>\n<p>​      该收集器也是一个新生代的垃圾收集器，他也是使用复制算法的收集器，又是一个并行的垃圾收集器。该收集器的特点是他的关注点与其他的收集器不同，CMS等收集器的关注点是尽可能缩短垃圾回收时用户线程的停顿时间，而parallel Scavenge收集器的目标是达到一个可控制的吞吐量。所谓吞吐量就是CPU用于运行代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾回收时间)，比如虚拟机总共运行100分钟，垃圾回收占用了1分钟，那么吞吐量就是99%。</p>\n</li>\n<li><p>Parallel Old收集器</p>\n<p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-289adc2f81b2fc9d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n</li>\n<li><p>CMS收集器</p>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。CMS是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤，包括：</p>\n<ul>\n<li>初始标记（CMS initial mark）</li>\n<li>并发标记（CMS concurrent mark）</li>\n<li>重新标记（CMS remark）</li>\n<li>并发清除（CMS concurrent sweep）</li>\n</ul>\n<p>其中，初始标记、重新标记这两个步骤仍然需要”Stop The world”。初始标记仅仅只是标记一下GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。</p>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7109326-b477bbab1e6a7403?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p><strong>CMS的优势：</strong>并发收集、低停顿。</p>\n<p><strong>CMS的缺点：</strong></p>\n<ul>\n<li>对CPU资源非常敏感。CMS默认启动的回收线程数是(CPU数量 + 3)/4,并发回收时垃圾收集线程所占CPU资源随着CPU数量的增加而下降，而且在CPU不足4个时，CMS对用户程序的影响就可能变得很大，导致执行速度降低。</li>\n<li>CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</li>\n<li>CMS是一款基于“标记-清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。空间碎片太多的时候，将会给大对象分配带来很大麻烦。</li>\n</ul>\n</li>\n<li><p>G1收集器</p>\n<p>G1是一款面向服务端应用的垃圾收集器。HOtSpot开发团队赋予它的使命是未来可以替换掉CMS收集器。</p>\n<p><strong>G1具备如下特点：</strong></p>\n<ul>\n<li><strong>并行与并发：</strong>G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li>\n<li><strong>分代收集：</strong>虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的就对象以获取更好的收集效果。</li>\n<li><strong>空间整合</strong>：G1从整体上来看是基于“标记-整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的，这意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。</li>\n<li><strong>可预测的停顿</strong>：这是G1相对于CMS的另一大优势。</li>\n</ul>\n<p>​</p>\n<p>G1垃圾收集器和CMS垃圾收集器有几点不同。首先，最大的不同是内存的组织方式变了。Eden，Survivor和Tenured等内存区域不再是连续的了，而是变成了一个个大小一样的region - 每个region从1M到32M不等。</p>\n<p>​</p>\n<p>[图片上传失败…(image-f2affc-1510574775013)]</p>\n<p>​</p>\n<p>一个region有可能属于Eden，Survivor或者Tenured内存区域。图中的E表示该region属于Eden内存区域，S表示属于Survivor内存区域，T表示属于Tenured内存区域。图中空白的表示未使用的内存空间。G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。这种内存区域主要用于存储大对象-即大小超过一个region大小的50%的对象。</p>\n<p>​</p>\n<p>在G1垃圾收集器中，年轻代的垃圾回收过程跟PS垃圾收集器和CMS垃圾收集器差不多。</p>\n<p>[图片上传失败…(image-5a0154-1510574775013)]</p>\n<p>​</p>\n<p>对于年老代上的垃圾收集，G1垃圾收集器也分为4个阶段，基本跟CMS垃圾收集器一样，但略有不同：</p>\n<ol>\n<li><p>Initial Mark阶段 - 同CMS垃圾收集器的Initial Mark阶段一样，G1也需要暂停应用程序的执行，它会标记从根对象出发，在根对象的第一层孩子节点中标记所有可达的对象。但是G1的垃圾收集器的Initial Mark阶段是跟minor gc一同发生的。也就是说，在G1中，你不用像在CMS那样，单独暂停应用程序的执行来运行Initial Mark阶段，而是在G1触发minor gc的时候一并将年老代上的Initial Mark给做了。</p>\n</li>\n<li><p>Concurrent Mark阶段 - 在这个阶段G1做的事情跟CMS一样。但G1同时还多做了一件事情，那就是，如果在Concurrent Mark阶段中，发现哪些Tenured region中对象的存活率很小或者基本没有对象存活，那么G1就会在这个阶段将其回收掉，而不用等到后面的clean up阶段。这也是Garbage First名字的由来。同时，在该阶段，G1会计算每个 region的对象存活率，方便后面的clean up阶段使用 。</p>\n</li>\n<li><p>Remark阶段 - 在这个阶段G1做的事情跟CMS一样, 但是采用的算法不同，能够在Remark阶段更快的标记可达对象。</p>\n</li>\n<li><p>Clean up/Copy阶段 - 在G1中，没有CMS中对应的Sweep阶段。相反 它有一个Clean up/Copy阶段，在这个阶段中,G1会挑选出那些对象存活率低的region进行回收，这个阶段也是和minor gc一同发生的,如下图所示：</p>\n<p>[图片上传失败…(image-ed332d-1510574775013)]</p>\n</li>\n</ol>\n<p>从上可以看到，由于Initial Mark阶段和Clean up/Copy阶段都是跟minor gc同时发生的，相比于CMS，G1暂停应用程序的时间更少，从而提高了垃圾回收的效率。</p>\n<p>​</p>\n</li>\n</ul>\n","categories":["Java"],"tags":["Java","gc"]},{"title":"学习笔记2","url":"http://mu-mo.top/2017/11/10/学习笔记/学习笔记2/","content":"<h2 id=\"1-分享：Java垃圾回收机制\"><a href=\"#1-分享：Java垃圾回收机制\" class=\"headerlink\" title=\"1. 分享：Java垃圾回收机制\"></a>1. 分享：Java垃圾回收机制</h2><h2 id=\"一、常用垃圾回收机制\"><a href=\"#一、常用垃圾回收机制\" class=\"headerlink\" title=\"一、常用垃圾回收机制\"></a>一、常用垃圾回收机制</h2><h3 id=\"1-标记-清除算法-mark-sweep\"><a href=\"#1-标记-清除算法-mark-sweep\" class=\"headerlink\" title=\"1. 标记-清除算法(mark-sweep)\"></a>1. 标记-清除算法(mark-sweep)</h3><p>  顾名思义，标记-清除算法分为两个阶段，标记(mark)和清除(sweep).</p>\n<p>在标记阶段，collector从mutator根对象开始进行遍历，对从mutator根对象可以访问到的对象都打上一个标识，一般是在对象的header中，将其记录为可达对象。</p>\n<p>而在清除阶段，collector对堆内存(heap memory)从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象-通过读取对象的header信息，则就将其回收。</p>\n<p><img src=\"http://www.processon.com/chart_image/530043e10cf2a3dc99dd9439.png\" alt=\"img\"></p>\n<p>从上图我们可以看到，在Mark阶段，从根对象1可以访问到B对象，从B对象又可以访问到E对象，所以B,E对象都是可达的。同理，F,G,J,K也都是可达对象。到了Sweep阶段，所有非可达对象都会被collector回收。同时，Collector在进行标记和清除阶段时会将整个应用程序暂停(mutator)，等待标记清除结束后才会恢复应用程序的运行。</p>\n<p><strong>缺点</strong>：</p>\n<p>​    标记-清除算法的比较大的缺点就是垃圾收集后有可能会造成大量的内存碎片，像上面的图片所示，垃圾收集后内存中存在三个内存碎片，假设一个方格代表1个单位的内存，如果有一个对象需要占用3个内存单位的话，那么就会导致Mutator一直处于暂停状态，而Collector一直在尝试进行垃圾收集，直到Out of Memory。</p>\n<h3 id=\"2-标记-压缩算法-mark-compact\"><a href=\"#2-标记-压缩算法-mark-compact\" class=\"headerlink\" title=\"2. 标记-压缩算法(mark-compact)\"></a>2. 标记-压缩算法(mark-compact)</h3><p>​       顾名思义，标记-压缩算法分为两个阶段，标记(mark)和压缩(compact).</p>\n<p>​      其中标记阶段跟标记-清除算法中的标记阶段是一样的，而对于压缩阶段，它的工作就是移动所有的可达对象到堆内存的同一个区域中，使他们紧凑的排列在一起，从而将所有<strong>非可达对象释放出来的空闲内存</strong>都集中在一起，通过这样的方式来达到减少内存碎片的目的。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201602/20150856_M3wa.png\" alt=\"img\"></p>\n<h3 id=\"3-复制算法-copying\"><a href=\"#3-复制算法-copying\" class=\"headerlink\" title=\"3. 复制算法(copying)\"></a>3. 复制算法(copying)</h3><p>堆内存对半分为两个半区，只用其中一个半区来进行对象内存的分配，如果在这个半区内存不够给新的对象分配了，那么就开始进行垃圾收集，将这个半区中的所有可达对象都拷贝到另外一个半区中去，然后继续在另外那个半区进行新对象的内存分配。</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/1010726/201611/1010726-20161116212913717-1922411555.png\" alt=\"img\"></p>\n<p>​                           <img src=\"http://images2015.cnblogs.com/blog/1010726/201611/1010726-20161116212928498-1546200064.png\" alt=\"mg\"></p>\n<p><strong>缺点: </strong></p>\n<p>​    内存压缩为原来的一半，利用率比较低，典型的空间换时间</p>\n<h3 id=\"4-引用计数算法-reference-counting\"><a href=\"#4-引用计数算法-reference-counting\" class=\"headerlink\" title=\"4. 引用计数算法(reference counting)\"></a>4. 引用计数算法(reference counting)</h3><p>​    通过在对象头中分配一个空间来保存该对象被引用的次数。如果该对象被其它对象引用，则它的引用计数加一，如果删除对该对象的引用，那么它的引用计数就减一，当该对象的引用计数为0时，那么该对象就会被回收。</p>\n<p>​    采用引用计数的垃圾收集机制跟前面三种垃圾收集机制最大的不同在于，垃圾收集的开销被分摊到整个应用程序的运行当中了，而不是在进行垃圾收集时，要挂起整个应用的运行，直到对堆中所有对象的处理都结束。因此，采用引用计数的垃圾收集不属于严格意义上的”Stop-The-World”的垃圾收集机制。</p>\n<p>注意：</p>\n<ul>\n<li><p>当某个对象的引用计数减为0时，collector需要递归遍历它所指向的所有域，将它所有域所指向的对象的引用计数都减一，然后才能回收当前对象。</p>\n</li>\n<li><p>但是这种引用计数算法有一个比较大的问题，那就是它不能处理环形数据 - 即如果有两个对象相互引用，那么这两个对象就不能被回收，因为它们的引用计数始终为1。这也就是我们常说的“内存泄漏”问题。如下图：</p>\n<p><img src=\"http://www.processon.com/chart_image/5309cefc0cf262b559f8d040.png\" alt=\"img\"></p>\n</li>\n</ul>\n<h3 id=\"5-分代收集算法\"><a href=\"#5-分代收集算法\" class=\"headerlink\" title=\"5. 分代收集算法\"></a>5. 分代收集算法</h3><p>​    当前的商业虚拟机都采用的是”分代收集“算法，一般是把java堆分成新生代和老生代，这样就可以根据各个年代的特点采用最适当的垃圾收集算法，新生代中，对象大多是”朝生夕死“可以采用复制算法，而老年代的对象存活率比较高，而且没有担保空间进行内存分配，就要采用”标记-清除算法“或者”标记-整理“算法。</p>\n<p>##　二、Java垃圾回收</p>\n<h3 id=\"1-Java的内存分布\"><a href=\"#1-Java的内存分布\" class=\"headerlink\" title=\"1. Java的内存分布\"></a>1. Java的内存分布</h3><p><img src=\"http://www.processon.com/chart_image/53698d6e0cf21db1c3ec9394.png\" alt=\"img\"></p>\n<p>其中，堆内存分为年轻代和年老代，非堆内存主要是Permanent区域，主要用于存储一些类的元数据，常量池等信息。而年轻代又分为两种，一种是Eden区域，另外一种是两个大小对等的Survivor区域。</p>\n<h3 id=\"2-Java年轻代垃圾回收机制\"><a href=\"#2-Java年轻代垃圾回收机制\" class=\"headerlink\" title=\"2. Java年轻代垃圾回收机制\"></a>2. Java年轻代垃圾回收机制</h3><p><img src=\"https://segmentfault.com/img/remote/1460000007978404\" alt=\"img\"></p>\n<p>​    部分的新创建对象分配在新生代。因为大部分对象很快就会变得不可达，所以它们被分配在新生代，然后消失不再。当对象从新生代移除时，我们称之为”Minor GC”。<strong>新生代使用的是复制收集算法</strong>。</p>\n<p>​    新生代划分为三个部分：分别为Eden、Survivor from、Survivor to，大小比例为8：1：1（为了防止复制收集算法的浪费内存过大）。每次只使用Eden和其中的一块Survivor，回收时将存活的对象复制到另一块Survivor中，这样就只有10%的内存被浪费，但是如果存活的对象总大小超过了Survivor的大小，那么就把多出的对象放入老年代中。</p>\n<p>在三个区域中有两个是Survivor区。对象在三个区域中的存活过程如下：</p>\n<ol>\n<li>大多数新生对象都被分配在Eden区。</li>\n<li>第一次GC过后Eden中还存活的对象被移到其中一个Survivor区。</li>\n<li>再次GC过程中，Eden中还存活的对象会被移到之前已移入对象的Survivor区。</li>\n<li>一旦该Survivor区域无空间可用时，还存活的对象会从当前Survivor区移到另一个空的Survivor区。而当前Survivor区就会再次置为空状态。</li>\n<li>经过数次（默认是15次）在两个Survivor区域移动后还存活的对象最后会被移动到老年代。</li>\n</ol>\n<p>如上所述，两个Survivor区域在任何时候必定有一个保持空白。如果同时有数据存在于两个Survivor区或者两个区域的的使用量都是0，则意味着你的系统可能出现了运行错误。</p>\n<h3 id=\"3-Java老年代垃圾回收机制\"><a href=\"#3-Java老年代垃圾回收机制\" class=\"headerlink\" title=\"3. Java老年代垃圾回收机制\"></a>3. Java老年代垃圾回收机制</h3><p>​    存活在新生代中但未变为不可达的对象会被复制到老年代。一般来说老年代的内存空间比新生代大，所以在老年代GC发生的频率较新生代低一些。当对象从老年代被移除时，我们称之为 “Major GC”(或者Full GC)。 <strong>老年代使用标记-清理或标记-整理算法</strong></p>\n<h5 id=\"空间分配担保\"><a href=\"#空间分配担保\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h5><p>在发生Minor GC前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间。</p>\n<ol>\n<li><p>如果大于，那么Minor GC可以确保是安全的。</p>\n</li>\n<li><p>如果小于，虚拟机会查看HandlePromotionFailure设置值是否允许担任失败。</p>\n<ul>\n<li>如果允许，那么会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小<ul>\n<li>如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的</li>\n<li>如果小于，进行一次Full GC</li>\n</ul>\n</li>\n<li>如果不允许，也要改为进行一次Full GC</li>\n</ul>\n<p>​      前面提到过，新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况时（最极端就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，让Survivor无法容纳的对象直接进入老年代。与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来，在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。</p>\n<p>​       取平均值进行比较其实仍然是一种动态概率的手段，也就是说如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败（Handle Promotion Failure）。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。</p>\n</li>\n</ol>\n<h3 id=\"2-Java垃圾收集器\"><a href=\"#2-Java垃圾收集器\" class=\"headerlink\" title=\"2.Java垃圾收集器\"></a>2.Java垃圾收集器</h3><p><img src=\"http://static.oschina.net/uploads/img/201602/20150856_bMmR.jpg\" alt=\"img\"></p>\n<ul>\n<li><p>Serial收集器(Serial/Serial Old)</p>\n<p>Serial是一个单线程的收集器，但它的“单线程”意义并不仅仅说明它只会使用一个CPU或一条手机此案成去完成垃圾和收集工作，更重要的是它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/3/18/19439efe7873c65d1db30ae8aed4621a.png?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"img\"></p>\n</li>\n<li><p>ParNew收集器</p>\n<p>ParNew收集器其实就是Serial收集器的多线程版本。</p>\n<p>它是运行在Server模式下的虚拟机中首选的新生代收集器，其中有一个与性能无关但很重要的原因是：除了Serial收集器外，目前只有它能与CMS收集器配合工作。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/3/18/05e7f5d66bde2e27678d1d2f66d66fd6.png?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"img\"></p>\n</li>\n<li><p>Parallel Scavenge收集器</p>\n<p>​      该收集器也是一个新生代的垃圾收集器，他也是使用复制算法的收集器，又是一个并行的垃圾收集器。该收集器的特点是他的关注点与其他的收集器不同，CMS等收集器的关注点是尽可能缩短垃圾回收时用户线程的停顿时间，而parallel Scavenge收集器的目标是达到一个可控制的吞吐量。所谓吞吐量就是CPU用于运行代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾回收时间)，比如虚拟机总共运行100分钟，垃圾回收占用了1分钟，那么吞吐量就是99%。</p>\n</li>\n<li><p>Parallel Old收集器</p>\n<p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/3/18/a28328cd362bc3d2c93b1f9cacb60fdd?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"img\"></p>\n</li>\n<li><p>CMS收集器</p>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。CMS是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤，包括：</p>\n<ul>\n<li>初始标记（CMS initial mark）</li>\n<li>并发标记（CMS concurrent mark）</li>\n<li>重新标记（CMS remark）</li>\n<li>并发清除（CMS concurrent sweep）</li>\n</ul>\n<p>其中，初始标记、重新标记这两个步骤仍然需要”Stop The world”。初始标记仅仅只是标记一下GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。</p>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/3/18/265211c0de6e0eb91e26fbfa0c6c6ec0?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"img\"></p>\n<p><strong>CMS的优势：</strong>并发收集、低停顿。</p>\n<p><strong>CMS的缺点：</strong></p>\n<ul>\n<li>对CPU资源非常敏感。CMS默认启动的回收线程数是(CPU数量 + 3)/4,并发回收时垃圾收集线程所占CPU资源随着CPU数量的增加而下降，而且在CPU不足4个时，CMS对用户程序的影响就可能变得很大，导致执行速度降低。</li>\n<li>CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</li>\n<li>CMS是一款基于“标记-清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。空间碎片太多的时候，将会给大对象分配带来很大麻烦。</li>\n</ul>\n</li>\n<li><p>G1收集器</p>\n<p>G1是一款面向服务端应用的垃圾收集器。HOtSpot开发团队赋予它的使命是未来可以替换掉CMS收集器。</p>\n<p><strong>G1具备如下特点：</strong></p>\n<ul>\n<li><strong>并行与并发：</strong>G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li>\n<li><strong>分代收集：</strong>虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的就对象以获取更好的收集效果。</li>\n<li><strong>空间整合</strong>：G1从整体上来看是基于“标记-整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的，这意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。</li>\n<li><strong>可预测的停顿</strong>：这是G1相对于CMS的另一大优势。</li>\n</ul>\n<p>​</p>\n<p>G1垃圾收集器和CMS垃圾收集器有几点不同。首先，最大的不同是内存的组织方式变了。Eden，Survivor和Tenured等内存区域不再是连续的了，而是变成了一个个大小一样的region - 每个region从1M到32M不等。</p>\n<p>​</p>\n<p><img src=\"http://www.processon.com/chart_image/536b116e0cf290134a2ef1d9.png\" alt=\"img\"></p>\n<p>​</p>\n<p>一个region有可能属于Eden，Survivor或者Tenured内存区域。图中的E表示该region属于Eden内存区域，S表示属于Survivor内存区域，T表示属于Tenured内存区域。图中空白的表示未使用的内存空间。G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。这种内存区域主要用于存储大对象-即大小超过一个region大小的50%的对象。</p>\n<p>​</p>\n<p>在G1垃圾收集器中，年轻代的垃圾回收过程跟PS垃圾收集器和CMS垃圾收集器差不多。</p>\n<p><img src=\"http://www.processon.com/chart_image/536b17f90cf290134a2f01fd.png\" alt=\"img\"></p>\n<p>​</p>\n<p>对于年老代上的垃圾收集，G1垃圾收集器也分为4个阶段，基本跟CMS垃圾收集器一样，但略有不同：</p>\n<ol>\n<li><p>Initial Mark阶段 - 同CMS垃圾收集器的Initial Mark阶段一样，G1也需要暂停应用程序的执行，它会标记从根对象出发，在根对象的第一层孩子节点中标记所有可达的对象。但是G1的垃圾收集器的Initial Mark阶段是跟minor gc一同发生的。也就是说，在G1中，你不用像在CMS那样，单独暂停应用程序的执行来运行Initial Mark阶段，而是在G1触发minor gc的时候一并将年老代上的Initial Mark给做了。</p>\n</li>\n<li><p>Concurrent Mark阶段 - 在这个阶段G1做的事情跟CMS一样。但G1同时还多做了一件事情，那就是，如果在Concurrent Mark阶段中，发现哪些Tenured region中对象的存活率很小或者基本没有对象存活，那么G1就会在这个阶段将其回收掉，而不用等到后面的clean up阶段。这也是Garbage First名字的由来。同时，在该阶段，G1会计算每个 region的对象存活率，方便后面的clean up阶段使用 。</p>\n</li>\n<li><p>Remark阶段 - 在这个阶段G1做的事情跟CMS一样, 但是采用的算法不同，能够在Remark阶段更快的标记可达对象。</p>\n</li>\n<li><p>Clean up/Copy阶段 - 在G1中，没有CMS中对应的Sweep阶段。相反 它有一个Clean up/Copy阶段，在这个阶段中,G1会挑选出那些对象存活率低的region进行回收，这个阶段也是和minor gc一同发生的,如下图所示：</p>\n<p><img src=\"http://www.processon.com/chart_image/536b68100cf290134a30ecb4.png\" alt=\"img\"></p>\n</li>\n</ol>\n<p>从上可以看到，由于Initial Mark阶段和Clean up/Copy阶段都是跟minor gc同时发生的，相比于CMS，G1暂停应用程序的时间更少，从而提高了垃圾回收的效率。</p>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"2-Octave学习\"><a href=\"#2-Octave学习\" class=\"headerlink\" title=\"2. Octave学习\"></a>2. Octave学习</h2><ol>\n<li><p>内建基本数学函数</p>\n<p>cos　　　余弦函数 (弧度制)<br>sin　　　 正弦函数 (弧度制)<br>tan 　　　正切函数 (弧度制)<br>exp 　　　指数函数 (e x )<br>log 　　　以 e 为底的指数函数<br>log10　　 以 10 为底的指数函数　<br>sinh 　　　双曲正弦函数<br>tanh 　　　双曲正切函数<br>cosh 　　　双曲余弦函数<br>acos 　　　反余弦函数<br>acosh 　　反双曲余弦函数<br>asin 　　　反正弦函数<br>asinh 　　反双曲正弦函数<br>atan 　　　反正切函数<br>atanh 　　　反双曲正切函数<br>abs 　　　　绝对值函数 (复数取模)<br>round 　　　　四舍五入<br>floor 　　　　近似为比它小的最大整数<br>ceil　　　　　 近似为比它大的最小整数<br>fix 　　　　　　向 0 方向近似<br>rem　　　　　 求余数</p>\n</li>\n<li><p>变量</p>\n<p>Octave 中变量的类型是不用声明的。Octave 所有的变量都是浮点型或者字符串。</p>\n<p>如：deg=pi/180</p>\n<p>注：ans 变量存储你每次最近运算的结果。</p>\n</li>\n<li><p>数组和向量</p>\n<ol>\n<li><p>构造向量</p>\n<p>示例：a = [1 4 5]   b = [1, 4, 5]   c = [1; 4; 5]    在方括号中由空格或者逗号隔开的一组数据被定义为<strong>行向量</strong>; 而由分号或者回车隔开的一组数据被定义为<strong>列向量</strong>。</p>\n</li>\n<li><p>冒号表达式</p>\n<p>示例：a = 2: 6  即  a = [2 3 4 5 6]</p>\n<p>​           a = 2: 0.5: 4 即 a = [2.0000 2.5000 3.0000 3.5000 4.0000]</p>\n</li>\n<li><p>向量中的元素操作</p>\n<p>a=[1:2:6 -1 0]  则 a(3)  为 5</p>\n<p>注：向量中的元素通过括号 (),而<strong>第一个元素的编号为 1</strong></p>\n</li>\n<li><p>向量计算</p>\n<p>使用 +− 算符,你同样可以对该向量中的每个元素都加上或者减去一个数值。</p>\n<p>两个向量的相乘遵循矩阵的乘法法则,向量乘法并不是对应元素的相乘。如果要进行对应元素的乘除法,你可以使用</p>\n<p>.* 和 ./     (注意前面有个点)</p>\n</li>\n</ol>\n</li>\n<li><p>基本画图命令: plot(x, y)  x为横轴，y为纵轴</p>\n</li>\n<li><p>控制语句</p>\n<p>判断语句：if expression<br>​                       statements<br>​                  elseif<br>​                       expression<br>​                       statements</p>\n<p>​                  else<br>​                        statements<br>​                  end</p>\n<p>switch语句 ：switch x</p>\n<p>​                        case x1<br>​                           statements<br>​                        case x2<br>​                           statements<br>​                        otherwise<br>​                           statements<br>​                      end</p>\n<p>   for 循环：for variable=vector<br>​                        statements<br>​                     end</p>\n<p>   while循环：while expression<br>​                          statements<br>​                      end</p>\n</li>\n<li><p>函数</p>\n<p>示例：function s=sind(x)<br>​             % SIND(x) Calculates sine(x) in degrees<br>​             s=sin(x*pi/180);<br>​           endfunction</p>\n</li>\n<li><p>矩阵和向量</p>\n<ul>\n<li>矩阵构建</li>\n</ul>\n<p>​       在 Octave 中输入矩阵与输入向量相似,逐行输入:<br>​       octave:##&gt; A= [ 5 7 9<br>​       -1 3 -2 ]</p>\n<p>​       或者使用分号来标定一行的结束,例如:<br>​       octave:##&gt; B=[2 0; 0 -1; 1 0]<br>​       octave:##&gt; B=<br>​       2 0<br>​       0 -1<br>​       1 0</p>\n<p>​      其他：  单位矩阵创建： I = eye(4)</p>\n<p>​                  对角矩阵创建:     M = diag([-1 7 4])    -1 7 4 为对角的值</p>\n<ul>\n<li><p>矩阵转置符  如：A’</p>\n</li>\n<li><p>提取矩阵元</p>\n<p>如： J(1, 3)   1, 3 分别为行号和列号</p>\n<p>​        J(1:3, 5)     1到3行，第五列</p>\n</li>\n<li><p>赋值</p>\n<p>如：J(1, 3) = 4</p>\n</li>\n<li><p>基本矩阵函数</p>\n<p>eye          创建单位矩阵<br>zeros     创建全零矩阵<br>ones     创建全一矩阵<br>rand     创建随机数矩阵<br>diag     创建一个对角矩阵,或者提取一个矩阵的对角元<br>inv         求矩阵逆矩阵<br>trace     求矩阵的迹<br>rank     求矩阵的秩</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-吴恩达课程学习\"><a href=\"#3-吴恩达课程学习\" class=\"headerlink\" title=\"3. 吴恩达课程学习\"></a>3. 吴恩达课程学习</h2><ul>\n<li><p>机器学习的两种方式：</p>\n<ul>\n<li><p>有监督学习：类似与我知道一个问题的答案，所以我可以从这个答案问题出发设计出一个推理逻辑。</p>\n<p>受监督的学习问题分为“回归”和“分类”问题。在回归问题中，我们试图在连续输出中预测结果，这意味着我们正在尝试将输入变量映射到一些连续函数。在分类问题中，我们试图用离散输出来预测结果。换句话说，我们正在尝试将输入变量映射到离散类别。</p>\n<p>示例：　回归 - 鉴于一个人的照片，我们必须根据给定的图片来预测他们的年龄</p>\n<p>　　　　分类 - 鉴于肿瘤患者，我们必须预测肿瘤是恶性还是良性</p>\n</li>\n<li><p>无监督学习：类似于我给你一堆数据，你也不知道它是干什么用的，但是你或许可以找出这些数据中蕴含的某种规律。无监督学习问题可分为聚类和非聚类两种。</p>\n<p>聚类：收集100万个不同的基因，并找到一种自动将这些基因组合成不同变量（如寿命，位置，作用等）相似或相关的组。</p>\n<p>非聚类：“鸡尾酒会算法”，让您在混乱的环境中找到结构。（即从<a href=\"https://en.wikipedia.org/wiki/Cocktail_party_effect\" target=\"_blank\" rel=\"noopener\">鸡尾酒会</a>的声音网格中识别个人的声音和音乐）。</p>\n</li>\n</ul>\n</li>\n<li><p>模型表示</p>\n<p>为了更准确地描述监督学习问题，我们的目标是给出一个训练集，以学习一个函数h：X→Y，使得h（x）是相应的y值的“好”预测因子。由于历史原因，这个函数h被称为假设。从形象上看，这个过程是这样的：</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/H6qTdZmYEeaagxL7xdFKxA_2f0f671110e8f7446bb2b5b2f75a8874_Screenshot-2016-10-23-20.14.58.png?expiry=1508976000000&amp;hmac=3CSWKalBleGfyzAgiZxdjxxInv5GZTeHDs85dQ5pbGY\" alt=\"img\"></p>\n</li>\n<li><p>成本函数</p>\n<p>我们可以通过使用<strong>成本函数</strong>来衡量假设函数的准确性。这取决于x的输入和实际输出y的假设的所有结果的平均差异（实际上是平均值的平均值）。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/9406e934gy1fkqusrovohj20ge03hq2x.jpg\" alt=\"img\"></p>\n</li>\n<li><p>梯度下降</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/bn9SyaDIEeav5QpTGIv-Pg_0d06dca3d225f3de8b5a4a7e92254153_Screenshot-2016-11-01-23.48.26.png?expiry=1508976000000&amp;hmac=NmdRUt6vlmzpzSXAt3L9PCLFSCAnKgYFZ3gV4XtO2-Y\" alt=\"img\"></p>\n<p>​</p>\n<p>上图中的每个“星”之间的距离表示由我们的参数α确定的步长。较小的α将导致较小的步长，较大的α导致较大的步长。采取步骤的方向由偏导数决定Ĵ（i0，θ1)。根据图上的哪一个开始，人们可能会在不同的地方结束。上图显示了两个不同的起点，最终出现在两个不同的地方。</p>\n<p>下图展示了梯度向下的算式，当左式恒等于右式之时，找到局部最优解。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/9406e934gy1fkquv86c0fj2085033jrb.jpg\" alt=\"img\"></p>\n<ul>\n<li><p>线性回归的梯度下降</p>\n<p><img src=\"/home/tofar/图片/2017-10-24 21-50-27屏幕截图.png\" alt=\"2017-10-24 21-50-27屏幕截图\"></p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/QFpooaaaEea7TQ6MHcgMPA_cc3c276df7991b1072b2afb142a78da1_Screenshot-2016-11-09-08.30.54.png?expiry=1508976000000&amp;hmac=xKf_y1jMoptxtkRcj2WKFloH-7p6ZUKYGj5bkt5cgCY\" alt=\"img\"></p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/xAQBlqaaEeawbAp5ByfpEg_24e9420f16fdd758ccb7097788f879e7_Screenshot-2016-11-09-08.36.49.png?expiry=1508976000000&amp;hmac=OmTYeJ_Pg3IkmcQ_chZVP26PYwTfnOSW1FB3vB3oKxw\" alt=\"img\"></p>\n<p>上面所示的椭圆是二次函数的轮廓。还显示了由（48,30）初始化的梯度下降所采取的轨迹。图中的x（由直线连接）标记梯度下降经过的θ的连续值，因为它收敛到最小值。</p>\n</li>\n</ul>\n</li>\n<li><p>特征缩放</p>\n<p>们可以通过使我们的每个输入值在大致相同的范围内来加快梯度下降。这是因为在较小的范围内，θ会快速下降，而在较大的范围内会慢慢下降，因此当变量非常不均匀时，它会低效地摆动到最佳状态。</p>\n<p>防止这种情况的方法是修改输入变量的范围，使其大致相同。理想的情况是：</p>\n<p>-1 &lt;=  X &lt;= 1 或者  -0.5 &lt;= X &lt;= 0.5</p>\n<p>计算公式：</p>\n<p><img src=\"/home/tofar/图片/2017-10-26 14-26-15屏幕截图.png\" alt=\"2017-10-26 14-26-15屏幕截图\"></p>\n</li>\n</ul>\n<p>​       分母为范围。。。。</p>\n<ul>\n<li><p>学习比率</p>\n<p><strong>调试梯度下降。</strong>在x轴上绘制一个<em>迭代次数</em>的图。现在绘制成本函数J（θ）超过梯度下降次数。如果J（θ）增加，那么您可能需要减少α。</p>\n<p>如果 一 太小：收敛缓慢</p>\n<p>如果 一 太大：每次迭代都不能减少，从而可能不会收敛。</p>\n</li>\n<li><p>特征和多项式回归</p>\n<p>我们可以通过几种不同的方式改进我们的特征和我们的假设函数的形式。</p>\n<p>我们可以<strong>将</strong>多个功能<strong>组合</strong>成一个。例如，我们可以结合X1 和 X2 成为新功能 X3 通过服用 X1⋅X2.</p>\n<h3 id=\"多项式回归\"><a href=\"#多项式回归\" class=\"headerlink\" title=\"多项式回归\"></a><strong>多项式回归</strong></h3><p>如果不符合数据，我们的假设函数不需要是线性的（直线）。</p>\n<p>我们可以通过使其成为二次，立方或平方根函数（或任何其他形式）来<strong>改变</strong>假设函数<strong>的行为或曲线</strong>。</p>\n<p>例如，如果我们的假设函数是 H我（x）= θ0+ θ1X1 那么我们可以创建基于的附加功能 X1，得到二次函数 H我（x）= θ0+ θ1X1+ θ2X21 或立方函数 H我（x）= θ0+ θ1X1+ θ2X21+ θ3X31</p>\n<p>在立方体版本中，我们创建了新功能 X2 和 X3 哪里 X2= x21 和 X3= x31.</p>\n<p>为了使其成为平方根函数，我们可以做： H我（x）= θ0+ θ1X1+ θ2√X1</p>\n</li>\n<li><p>正规方程法</p>\n<p>计算公式：θ=(XTX)−1XTy</p>\n<p>以下是梯度下降与正态方程的比较：</p>\n<p>| 梯度下降      | 正常方程式           |<br>| ——— | ————— |<br>| 需要选择alpha | 不需要选择alpha      |<br>| 需要很多次迭代   | 不需要迭代           |<br>| T至ñ2)     | Tñ3），需要计算倒数 XŤX |<br>| 当n大时，效果很好 | 如果n非常大，则慢       |</p>\n</li>\n<li><p>正态方程不可逆</p>\n</li>\n</ul>\n<p>​    当在八度中实现正态方程时，我们要使用’pinv’函数而不是’inv’。’pinv’功能会给你一个值我 即使 XŤX 是不可逆的</p>\n<p>​    如果 XŤX是<strong>不可逆的，</strong>常见的原因可能是：</p>\n<ul>\n<li>​冗余特征，其中两个特征非常密切相关（即它们是线性相关的）</li>\n<li>​     功能太多（例如m≤n）。在这种情况下，删除某些功能或使用“正则化”（稍后将讲解）。</li>\n</ul>\n<p>解决上述问题的方法包括删除与另一个线性相关的特征或者当具有太多特征时删除一个或多个特征。</p>\n<ul>\n<li><p>逻辑回归</p>\n<ul>\n<li>成本函数</li>\n</ul>\n<p>我们不能使用与线性回归相同的成本函数，因为逻辑函数会导致输出波浪形，导致许多局部最优。换句话说，它不会是一个凸函数。</p>\n<p>相反，我们用于逻辑回归的成本函数如下所示：</p>\n<p><img src=\"/home/tofar/图片/选区_001.png\" alt=\"选区_001\"></p>\n</li>\n</ul>\n<ul>\n<li><p>优化</p>\n<p><strong>“Conjugate gradient”, “BFGS”, and “L-BFGS” </strong>are more sophisticated, faster ways to optimize θ that can be used instead of gradient descent. We suggest that you should not write these more sophisticated algorithms yourself (unless you are an expert in numerical computing) but use the libraries instead, as they’re already tested and highly optimized. Octave provides them.</p>\n</li>\n<li><p>一对多</p>\n<p>由于y = {0,1 … n}，我们将问题划分为n + 1（+1，因为索引从0开始）二进制分类问题; 在每个类中，我们预测’y’是我们其中一个类的成员的概率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">y∈&#123;0,1...n&#125;</span><br><span class=\"line\">h(0)θ(x)=P(y=0|x;θ)</span><br><span class=\"line\">h(1)θ(x)=P(y=1|x;θ)</span><br><span class=\"line\">⋯</span><br><span class=\"line\">h(n)θ(x)=P(y=n|x;θ)</span><br><span class=\"line\">prediction=maxi(h(i)θ(x))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/cqmPjanSEeawbAp5ByfpEg_299fcfbd527b6b5a7440825628339c54_Screenshot-2016-11-13-10.52.29.png?expiry=1509840000000&amp;hmac=D_LO3Cj1A63UzmCRezmX9hC5NuaM2cbHh_5rhIQ5oGg\" alt=\"img\"></p>\n</li>\n<li><p>过度拟合</p>\n<p>​</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/0cOOdKsMEeaCrQqTpeD5ng_2a806eb8d988461f716f4799915ab779_Screenshot-2016-11-15-00.23.30.png?expiry=1509840000000&amp;hmac=WcJEx6zzIssr6tLB-SQiNszurTyWO5XwahWmTDNl3yg\" alt=\"img\"></p>\n<p>图中左图为欠拟合，中间的图片差不多正好，右图为过拟合</p>\n<p>低估或高偏差是当我们的假设函数的形式h映射到数据的趋势。它通常是由一个功能太简单或功能太少造成的。在另一个极端，过度拟合或高度变异是由适合可用数据的假设函数引起的，但不能很好地推广以预测新的数据。这通常是由一个复杂的函数造成的，这个函数会产生大量与数据无关的不必要的曲线和角度。</p>\n<p>有两个主要的选择来解决过度拟合的问题：</p>\n<p>1）减少功能的数量：</p>\n<ul>\n<li>手动选择要保留的功能。</li>\n<li>使用模型选择算法（在课程后面研究）。</li>\n</ul>\n<p>2）正规化</p>\n<ul>\n<li>保留所有功能，但减少参数的大小 θj.</li>\n<li>当我们有很多有用的功能时，正则化运作良好。</li>\n</ul>\n</li>\n<li><p>正则化和处罚机制</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/j0X9h6tUEeawbAp5ByfpEg_ea3e85af4056c56fa704547770da65a6_Screenshot-2016-11-15-08.53.32.png?expiry=1509840000000&amp;hmac=CzBB8Iz3mZBzUm3NHZ7RCU4XFzPqGeF7-7xvFmoUUe4\" alt=\"img\"><br>$$<br>minθ 12m ∑mi=1(hθ(x(i))−y(i))2+λ ∑nj=1θ2j<br>$$<br>使用上述成本函数与额外的总和，我们可以平滑我们的假设函数的输出，以减少过度拟合。如果选择的lambda太大，可能会使功能过于平滑，导致不足。</p>\n</li>\n<li><p>正规化线性回归</p>\n<ul>\n<li><p>梯度向下</p>\n<p>…</p>\n</li>\n<li><p>正规方程<br>$$<br>θ=(XTX+λ⋅L)−1XTy<br>$$<br>是一个矩阵，左上角为0，下角为1，其他地方为0。它应该有尺寸（n + 1）×（n + 1）。直觉上，这是身份矩阵（虽然我们不包括在内）X0）乘以单个实数λ。</p>\n</li>\n</ul>\n<p>回想一下，如果m &lt;n，那么 XŤX是不可逆的。但是，当我们添加术语λ⋅L时，XŤX +λ⋅L变成可逆的。</p>\n</li>\n</ul>\n<ul>\n<li><p>正则化逻辑回归</p>\n<p>逻辑回归的成本函数：</p>\n<p>…</p>\n<p>正则化逻辑回归的成本函数：</p>\n<p>…</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/dfHLC70SEea4MxKdJPaTxA_306de28804a7467f7d84da0fe3ee9c7b_Screen-Shot-2016-12-07-at-10.49.02-PM.png?expiry=1509840000000&amp;hmac=J5RxJnuaWJ-FTg0tbSnpjA7MU5nDMyX43E2VMtnu28k\" alt=\"img\">​</p>\n</li>\n<li><p>神经网络</p>\n<ul>\n<li><ol>\n<li><p>模型表示</p>\n<p> 让我们来看看如何使用神经网络来表示一个假设函数。在一个非常简单的层面上，神经元基本上是计算单位，它们将输入（树突）作为输入（轴突）的电输入（称为“尖峰” ）。在我们的模型中，我们的树突就像输入的特征X1⋯xñ，输出是我们假设函数的结果。在这个模型中我们X0输入节点有时被称为“偏置单元”。它总是等于1.在神经网络中，我们使用与分类中相同的逻辑函数，1/(1 + e- θŤX)，但我们有时将其称为sigmoid（逻辑）激活功能。在这种情况下，我们的“theta”参数有时被称为“权重”。</p>\n<p> ​</p>\n<p> 例如：    </p>\n<p> <img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/0rgjYLDeEeajLxLfjQiSjg_0c07c56839f8d6e8d7b0d09acedc88fd_Screenshot-2016-11-22-10.08.51.png?expiry=1509840000000&amp;hmac=oXstc_ZFx3gBvNnjuaGLiEuupfe9Wd1kOJO-5Tjk2Ok\" alt=\"img\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<p>​                  Example: If layer 1 has 2 input nodes and layer 2 has 4 activation nodes. Dimension of Θ(1) is going to be 4×3 where sj=2 and sj+1=4, so sj+1×(sj+1)=4×3.</p>\n<p><img src=\"/home/tofar/图片/选区_003.png\" alt=\"选区_003\"></p>\n<p>​</p>\n<p><img src=\"/home/tofar/图片/选区_004.png\" alt=\"选区_003\"></p>\n<p>​</p>\n<p><img src=\"/home/tofar/图片/选区_005.png\" alt=\"选区_005\"></p>\n<ul>\n<li><p>应用</p>\n<ul>\n<li>Examples and Intuitions I</li>\n</ul>\n<p>an example of the logical operator ‘OR’, meaning either x1 is true or x~2~ is true, or both:</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/f_ueJLGnEea3qApInhZCFg_a5ff8edc62c9a09900eae075e8502e34_Screenshot-2016-11-23-10.03.48.png?expiry=1509840000000&amp;hmac=jV9t2TE8Ctc0RKssdVEtDwI11LGapRp3YI7g7B7JS8g\" alt=\"img\"></p>\n<p>Where g(z) is the following:</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/wMOiMrGnEeajLxLfjQiSjg_bbbdad80f5c95068bde7c9134babdd77_Screenshot-2016-11-23-10.07.24.png?expiry=1509840000000&amp;hmac=gZKlkFwiGiCLR3Q_3OGExXT6ncxmn3RqO59mcjFZ9Mo\" alt=\"img\"></p>\n<ul>\n<li><p>Examples and Intuitions II</p>\n<p>here we have the XNOR operator using a hidden layer with two nodes! The following summarizes the above algorithm:</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/rag_zbGqEeaSmhJaoV5QvA_52c04a987dcb692da8979a2198f3d8d7_Screenshot-2016-11-23-10.28.41.png?expiry=1509840000000&amp;hmac=YOOKo2Hmn28h8-nKDqve7NjjRWhsJtXGzP2p3-BKsh8\" alt=\"img\"></p>\n<ul>\n<li><p>多类分类</p>\n<p>为了将数据分类到多个类中，我们假设函数返回值的向量。说我们想将我们的数据分为四类。我们将使用下面的例子来看看这个分类是如何完成的。该算法将图像作为输入并进行相应的分类：</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/9Aeo6bGtEea4MxKdJPaTxA_4febc7ec9ac9dd0e4309bd1778171d36_Screenshot-2016-11-23-10.49.05.png?expiry=1509840000000&amp;hmac=wvORZ3183Xjl7ctUpfoB-XDnMGB7IzI1VqZL9xvwwhQ\" alt=\"img\">    </p>\n<p>我们可以将我们的结果类定义为y：</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/KBpHLXqiEealOA67wFuqoQ_95654ff11df1261d935ab00553d724e5_Screenshot-2016-09-14-10.38.27.png?expiry=1509840000000&amp;hmac=o6UcU8scndsC02Q_9DDFqtI7ueshAkBOKojuX2gbcL4\" alt=\"img\"></p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/VBxpV7GvEeamBAoLccicqA_3e7f67888330b131426ecffd27936f61_Screenshot-2016-11-23-10.59.19.png?expiry=1509840000000&amp;hmac=b2kurSaA6PMDAnu8m0wvFNVvct9z7bSUQ0y6x5TZ03w\" alt=\"img\"></p>\n</li>\n<li><p>代价函数</p>\n<p><img src=\"/home/tofar/图片/选区_006.png\" alt=\"选区_006\"></p>\n<p>注意：</p>\n<ul>\n<li>双重数额简单地将输出层中每个单元格的逻辑回归成本加起来</li>\n<li>三元组简单地将整个网络中所有单个Θ的平方相加。</li>\n<li>我在三合一中<strong>并不是</strong>指训练示例i</li>\n</ul>\n</li>\n<li><p>反向传播算法</p>\n<p><a href=\"https://www.coursera.org/learn/machine-learning/supplement/pjdBA/backpropagation-algorithm\" target=\"_blank\" rel=\"noopener\">https://www.coursera.org/learn/machine-learning/supplement/pjdBA/backpropagation-algorithm</a></p>\n<p><a href=\"https://www.coursera.org/learn/machine-learning/supplement/v5Bu8/backpropagation-intuition\" target=\"_blank\" rel=\"noopener\">https://www.coursera.org/learn/machine-learning/supplement/v5Bu8/backpropagation-intuition</a></p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/Ul6i5teoEea1UArqXEX_3g_a36fb24a11c744d7552f0fecf2fdd752_Screenshot-2017-01-10-17.13.27.png?expiry=1509926400000&amp;hmac=wMDYoXXSbNtFlREMpqv0cMzNEv4aDqAnSjq__vDm1eY\" alt=\"img\"></p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/qc309rdcEea4MxKdJPaTxA_324034f1a3c3a3be8e7c6cfca90d3445_fixx.png?expiry=1509926400000&amp;hmac=GjJrf5QSEM8gKqigNNdwm6kH4XPGCQ1ZMgFmchQ_0ng\" alt=\"img\"></p>\n</li>\n<li><p>梯度检验</p>\n<p>gradApprox矢量计算方法：</p>\n<p>A small value for ϵ (epsilon) such as ϵ=10^−4^, guarantees that the math works out properly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">epsilon = 1e-4;</span><br><span class=\"line\">for i = 1:n,</span><br><span class=\"line\">  thetaPlus = theta;</span><br><span class=\"line\">  thetaPlus(i) += epsilon;</span><br><span class=\"line\">  thetaMinus = theta;</span><br><span class=\"line\">  thetaMinus(i) -= epsilon;</span><br><span class=\"line\">  gradApprox(i) = (J(thetaPlus) - J(thetaMinus))/(2*epsilon)</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n<p>一旦我们计算我们的gradApprox矢量，我们可以检查gradApprox≈deltaVector。</p>\n<p>一旦你已经验证<strong>，一旦</strong>你的BP算法是正确的，则不需要再次计算gradApprox。计算gradApprox的代码可能非常慢。</p>\n</li>\n<li><p>随机初始化</p>\n<p>将所有的权重初始化为零不适用于神经网络。反向传播时，所有节点将重复更新为相同的值。相反，我们可以随机初始化我们的权重钍 矩阵使用以下方法：</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/y7gaS7pXEeaCrQqTpeD5ng_8868ccda2c387f5d481d0c54ab78a86e_Screen-Shot-2016-12-04-at-11.27.28-AM.png?expiry=1509926400000&amp;hmac=NYl4aiig2HDLUF31ZEP8fKwUxb-XzTvgs0OZkbQEVUo\" alt=\"img\"></p>\n</li>\n<li><p><strong>培训一个神经网络</strong></p>\n<ol>\n<li>随机初始化权重</li>\n<li>实现向前传播得到hΘ(x(i)) 对于任何y x(i)</li>\n<li>实施成本函数</li>\n<li>实施反向传播以计算偏导数</li>\n<li>使用梯度检查来确认您的反向传播的作品。然后禁用梯度检查。</li>\n<li>使用梯度下降或内置的优化功能，以theta中的权重最小化成本函数。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-linux-命令学习\"><a href=\"#4-linux-命令学习\" class=\"headerlink\" title=\"4. linux 命令学习\"></a>4. linux 命令学习</h2><ul>\n<li><p>cat </p>\n<ol>\n<li>一次显示整个文件。$ cat filename</li>\n<li>从键盘创建一个文件。$ cat &gt; filename  </li>\n</ol>\n<p>​      注：只能创建新文件,不能编辑已有文件.</p>\n<ol start=\"3\">\n<li><p>将几个文件合并为一个文件： $cat file1 file2 &gt; file</p>\n<p>参数：</p>\n<p>-n 或 –number 由 1 开始对所有输出的行数编号<br>-b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号<br>-s 或 –squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行</p>\n</li>\n<li><p>创建文件，创建文件后，要以EOF或STOP结束；如：$ cat &gt;  linuxsir.org.txt  &lt;&lt; EOF</p>\n</li>\n<li><p>追加内容   如：$ cat &gt;&gt; linuxsir.txt &lt;&lt; EOF</p>\n</li>\n<li><p>一个或多个已存在的文件内容，追加到一个已存在的文件中</p>\n<p>如：$ cat sir01.txt sir02.txt sir03.txt &gt;&gt; sir00.txt  （与  cat sir01.txt sir02.txt sir03.txt &gt; sir04.txt 区分，此为合并）</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"5-用户组和权限\"><a href=\"#5-用户组和权限\" class=\"headerlink\" title=\"5. 用户组和权限\"></a>5. 用户组和权限</h2><ul>\n<li><p>文件属性</p>\n<p> - rwx  r-x   r–            </p>\n<p>1 234 567 890    </p>\n<p>1代表问文件名或者目录， 234代表拥有者的权限，可读、可写、可执行（rwx)，567代表同用户组权限，890代表其他用户权限</p>\n<h3 id=\"改变文件属性和权限\"><a href=\"#改变文件属性和权限\" class=\"headerlink\" title=\"改变文件属性和权限\"></a>改变文件属性和权限</h3><p>chgrp: 改变文件所属用户组</p>\n<p>chown：改变文件所有者     例如: chown [-R]  账号名称  文件或者目录    （-R 递归）</p>\n<p>chmod：改变文件权限    </p>\n<p>​         权限分数： r : 4     w: 2    x:1</p>\n<p>​         例如： chmod 777 filename     (4+2+1=7)</p>\n<p>​                     chmod  u =rwx, g=rx, 0=r filename   (u-user, g-group, o-others)</p>\n<p>​                     chmod  a+x filename  增加权限</p>\n</li>\n</ul>\n<p>​                                    a-x                  减少权限</p>\n<h2 id=\"6-计算机网络应用层和运输层\"><a href=\"#6-计算机网络应用层和运输层\" class=\"headerlink\" title=\"6. 计算机网络应用层和运输层\"></a>6. 计算机网络应用层和运输层</h2><h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>应用层就定义了位于不同主机中的多个应用进程之间通信的协议。应用层的许多协议都是基于客户-服务器模式，客户是服务的请求方，服务器是服务提供方。</p>\n<h3 id=\"HTTP非持续连接和持续连接\"><a href=\"#HTTP非持续连接和持续连接\" class=\"headerlink\" title=\"HTTP非持续连接和持续连接\"></a>HTTP非持续连接和持续连接</h3><ul>\n<li><p>非持续连接</p>\n<p>定义：每个请求/相应对是结果一个单独的TCP连接发送</p>\n<p>我们看看在非持续连接情况下，从服务器向客户传送一个Web页面的步骤。假设该页面含有一个HTML基本文件和10个JPEG图形，并且这11个对象位于同一台服务器上。该HTML文件的URL为：<a href=\"http://www.someSchool.edu/someDepartment/home.index。\" target=\"_blank\" rel=\"noopener\">http://www.someSchool.edu/someDepartment/home.index。</a></p>\n<p>我们看看发生了什么情况：</p>\n<ul>\n<li>HTTP客户进程在端口号80发起一个到服务器<a href=\"http://www.someSchool.edu的TCP连接，该端口号是HTTP的默认端口。在客户和服务器上分别有一个套接字与该连接相关联。\" target=\"_blank\" rel=\"noopener\">www.someSchool.edu的TCP连接，该端口号是HTTP的默认端口。在客户和服务器上分别有一个套接字与该连接相关联。</a></li>\n<li>HTTP客户经它的套接字向该服务器发送一个HTTP请求报文。请求报文中包含了路径名/someDepartment/home.index（后面我们会详细讨论HTTP报文）。 </li>\n<li>HTTP服务器进程经它的套接字接收该请求报文，从其存储器（RAM或磁盘）中检索出对象<a href=\"http://www.someSchool.edu/someDepartment/home.index，在一个HTTP响应报文中封装对象，并通过其套接字向客户发送响应报文。\" target=\"_blank\" rel=\"noopener\">www.someSchool.edu/someDepartment/home.index，在一个HTTP响应报文中封装对象，并通过其套接字向客户发送响应报文。</a> </li>\n<li>HTTP服务器进程通知TCP断开该TCP连接。（但是直到TCP确认客户已经完整地收到响应报文为止，它才会实际中断连接。） </li>\n<li>HTTP客户接收响应报文，TCP连接关闭。该报文指出封装的对象是一个HTML文件，客户从响应报文中提取出该文件，检查该HTML文件，得到对10个JPEG图形的引用。 </li>\n</ul>\n<p>对每个引用的JPEG图形对象重复前4个步骤。</p>\n<p>往返时间计算：粗略地讲，总的响应时间就是两个RTT加上服务器传输HTML文件的时间。</p>\n<p><img src=\"http://www.2cto.com/uploadfile/2015/0603/20150603035757209.png\" alt=\"img\"></p>\n</li>\n<li><p>持续连接</p>\n<p>定义：所有请求及其响应经过相同的TCP连接发送</p>\n<p>非持续连接有一些缺点。首先，必须为每一个请求的对象建立和维护一个全新的连接。对于每个这样的连接，在客户和服务器中都要分配TCP的缓冲区和保持TCP变量，这给Web服务器带来了严重的负担，因为一台Web服务器可能同时服务于数以百计不同的客户的请求。第二，就像我们刚描述的那样，每一个对象经受两倍RTT的交付时延，即一个RTT用于创建TCP，另一个RTT用于请求和接收一个对象。</p>\n<p>在采用持续连接的情况下，服务器在发送响应后保持该TCP连接打开。在相同的客户与服务器之间的后续请求和响应报文能够通过相同的连接进行传送。特别是，一个完整的Web页面（上例中的HTML基本文件加上10个图形）可以用单个持续TCP连接进行传送。更有甚者，位于同一台服务器的多个Web页面在从该服务器发送给同一个客户时，可以在单个持续TCP连接上进行。可以一个接一个地发出对对象的这些请求，而不必等待对未决请求（流水线）的回答。一般来说，如果一条连接经过一定时间间隔（一个可配置的超时间隔）仍未被使用，HTTP服务器就关闭该连接。HTTP的默认模式是使用带流水线的持续连接。</p>\n</li>\n</ul>\n<h3 id=\"HTTP报文格式\"><a href=\"#HTTP报文格式\" class=\"headerlink\" title=\"HTTP报文格式\"></a>HTTP报文格式</h3><ul>\n<li><p>HTTP请求报文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /somedir/page.html HTTP/1.1</span><br><span class=\"line\">HOST: www.someschool.edu</span><br><span class=\"line\">Connetion: close</span><br><span class=\"line\">User-agent: Mozilla/5.0</span><br><span class=\"line\">Accept-agent: fr</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HTTP响应报文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Sat, 31 Dec 2005 23:59:59 GMT</span><br><span class=\"line\">Content-Type: text/html;charset=ISO-8859-1</span><br><span class=\"line\">Content-Length: 122</span><br><span class=\"line\">＜html＞</span><br><span class=\"line\">＜head＞</span><br><span class=\"line\">＜title＞Wrox Homepage＜/title＞</span><br><span class=\"line\">＜/head＞</span><br><span class=\"line\">＜body＞</span><br><span class=\"line\">＜!-- body goes here --＞</span><br><span class=\"line\">＜/body＞</span><br><span class=\"line\">＜/html＞</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户与服务器交互：cookie</p>\n<p>由于HTTP是无状态的，我们可以使用cookie来对用户进行认证。</p>\n<p><img src=\"http://www.2cto.com/uploadfile/2015/0603/20150603041238393.png\" alt=\"img\"></p>\n<ul>\n<li><p>web缓存器（代理服务器）</p>\n<p><img src=\"http://www.2cto.com/uploadfile/2015/0603/20150603043300642.png\" alt=\"img\"></p>\n<p>请求过程：</p>\n<ul>\n<li><p>浏览器建立一个到Web缓存器的TCP连接，并向Web缓存器中的对象发送一个HTTP请求。</p>\n</li>\n<li><p>Web缓存器进行检查，看看本地是否存储了该对象副本。如果有，Web缓存器就向客户浏览器用HTTP响应报文返回该对象。</p>\n</li>\n<li><p>如果Web缓存器中没有该对象，它就打开一个与该对象的初始服务器（如<a href=\"http://www.someschool.edu）的TCP连接。Web缓存器则在这个缓存器到服务器的TCP连接上发送一个对该对象的HTTP请求。在收到该请求后，初始服务器向该Web缓存器发送具有该对象的HTTP响应。\" target=\"_blank\" rel=\"noopener\">www.someschool.edu）的TCP连接。Web缓存器则在这个缓存器到服务器的TCP连接上发送一个对该对象的HTTP请求。在收到该请求后，初始服务器向该Web缓存器发送具有该对象的HTTP响应。</a></p>\n</li>\n<li><p>当Web缓存器接收到该对象时，它在本地存储空间存储一份副本，并向客户的浏览器用HTTP响应报文发送该副本（通过现有的客户浏览器和Web缓存器之间的TCP连接）。</p>\n<p>​</p>\n</li>\n</ul>\n<p>web缓存器可以大大减少对客户端请求的响应时间</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://www.2cto.com/uploadfile/2015/0603/20150603043340332.png\" alt=\"img\"></p>\n<pre><code>时延计算：\n因为客户和缓存连接在一个相同的高速局域网上，这样40%的请求将几乎立即会由缓存器得到响应，时延约在10ms以内。然而，剩下的60%的请求仍然要由初始服务器来满足。但是只有60%的被请求对象通过接入链路，在接入链路上的流量强度从1.0减小到0.6。一般而言，在15Mbps链路上，当流量强度小于0.8时对应的时延较小，约为几十毫秒。这个时延与2秒因特网时延相比是微不足道的。考虑这些之后，平均时延因此为0.4×（0.010秒）+0.6×（2.01秒）　图2-13　为机构网络添加一台缓存器这略大于1.2秒。\n</code></pre><ul>\n<li><p>FTP相关<br>一些较为常见的命令如下：</p>\n<ul>\n<li>USER username:用于向服务器传送用户标识。</li>\n<li>PASS password:用于向服务器发送用户口令。</li>\n<li>LIST:用于请求服务器回送当前远程目录中的所有文件列表。该文件列表是经一个（新建且非持续连接）数据连接传送的，而不是在控制TCP连接上传送。</li>\n<li>RETR filename:用于从远程主机当前目录检索（即get）文件。该命令引起远程主机发起一个数据连接，并经该数据连接发送所请求的文件。</li>\n<li>STOR filename:用于在远程主机的当前目录上存放（即put）文件。</li>\n</ul>\n<p>一些典型的回答连同它们可能的报文如下所示：</p>\n<ul>\n<li>331 Username OK，Password required（用户名OK，需要口令）。</li>\n<li>125 Data connection already open;transfer starting（数据连接已经打开，开始传送）。</li>\n<li>425 Can’t open data connection（无法打开数据连接）。</li>\n<li>452 Error writing file（写文件差错）。</li>\n<li>DNS相关</li>\n</ul>\n</li>\n<li><p>DNS层次结构</p>\n<p><img src=\"http://www.2cto.com/uploadfile/2015/0604/20150604014747190.png\" alt=\"img\"></p>\n</li>\n</ul>\n<p>  +　各种ＤＮＳ服务器交互</p>\n<p><img src=\"http://www.2cto.com/uploadfile/2015/0604/20150604014930646.png\" alt=\"img\"></p>\n<p><img src=\"http://www.2cto.com/uploadfile/2015/0604/20150604015016358.png\" alt=\"img\"></p>\n<ul>\n<li>递归查询</li>\n</ul>\n<p>​      递归查询是一种DNS 服务器的查询模式，在该模式下DNS 服务器接收到客户机请求，必须使用一个准确的查询结果回复客户机。如果DNS 服务器本地没有存储查询DNS 信息，那么该服务器会询问其他服务器，并将返回的查询结果提交给客户机。</p>\n<p>​    <strong>客户机和服务器之间的查询是递归查询</strong></p>\n<p>​    是<strong>递归查询告诉客户机IP</strong></p>\n<ul>\n<li>迭代查询</li>\n</ul>\n<p>​        DNS 服务器另外一种查询方式为迭代查询，DNS 服务器会向客户机提供其他能够解析查询请求的DNS 服务器地址，当客户机发送查询请求时，DNS 服务器并不直接回复查询结果，而是告诉客户机另一台DNS 服务器地址，客户机再向这台DNS 服务器提交请求，依次循环直到返回查询的结果为止。</p>\n<p>​        <strong>服务器之间的查询是迭代查询</strong></p>\n<p><img src=\"http://images2015.cnblogs.com/blog/931074/201608/931074-20160831182908574-1101121377.gif\" alt=\"img\"></p>\n<ul>\n<li><p>DNS缓存</p>\n<p>DNS服务器在一段时间后（通常设置为两天）将丢弃缓存的信息。</p>\n</li>\n</ul>\n<h3 id=\"运输层\"><a href=\"#运输层\" class=\"headerlink\" title=\"运输层\"></a>运输层</h3><ul>\n<li><p>多路复用和分解</p>\n<p>​    将运输层报文段中的数据交付到正确的套接字的工作称为<strong>多路分解(demultiplexing)</strong>,在源主机当中从不同的套接字中收集数据块，并为每一个数据块封装上首部信息(用于分解)从而生成报文段，然后将此报文段传递到网络层。所有的这些工作称为<strong>多路复用(multiplexing)</strong>。</p>\n<p>运输层多路复用的要求:</p>\n<p>套接字有唯一的标识符；<br>每一个报文段有特殊的字段来指示该报文段所要交付到的套接字。（这些特殊的字段是源端口字段和目的端口字段，端口号是一个16bit的数范围是0-65535.其中0-1023是周知端口）。</p>\n</li>\n</ul>\n<p>  TCP的首部开销为20个字节，而UDP的首部开销为8字节<br>  无连接的多路复用与多路分解(UDP)</p>\n<p>  一个UDP套接字是由一个二元组来全面标志的，该二元组包含一个目的IP地址和一个目的端口号，因此如果两个UDP报文段有不同的源IP地址和/或源端口号，但是具有相同的目的IP地址和目的端口号，那么这两个报文段将通过相同的套接字被定向到相同的进程。</p>\n<p>  UDP报文格式：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6128001-4d46e8f93873781f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"UDP报文格式\"></p>\n<p>​     长度字段：指示了在UDP报文段中的字节数(首部加数据,以字节为单位)<br>​     检验和：接收方使用检验和来检查在该报文段中是否出现差错</p>\n<p>​      UDP虽然实现了检验和，但是对恢复差错无能为力，要么它丢弃受损的报文段，要么将受损的报文段交给应用程序并给出警告。</p>\n<p> 面向连接的多路复用和多路分解(TCP)</p>\n<p>​       TCP套接字和UDP套接字的细微的差别是，TCP套接字是由一个四元组(源IP地址，源端口号，目的IP地址，目的端口号)来标识的。这样当一个TCP报文段从网络到达另外一台主机时,该主机使用全部的4个值来将报文段定向(分解)到相应的套接字。特别与UDP不同的是，两个具有不同的IP地址的或者是源端口号的到达TCP报文段将被定向到两个不同的套接字，除非TCP报文段携带了初始创建连接的请求 。服务器主机可以支持很多并行的TCP套接字，每一个套接字和一个进程相联系，并由其四元组来标识每一个套接字。当一个TCP报文段到达主机时，所有的四个字段(源IP、源端口、目的IP、目的端口)被用来将报文段定向(分解)到相应的套接字。<br>​      TCP连接总是点对点的，所谓的“多播”，即在一次的发送操作当中从一个发送方将数据传输给多个接收方，对于TCP来说是不可能的。</p>\n<p>  4位首部长度：指示TCP头部大小(以32bit为单位)，指示何处数据开始，由于TCP选项的原因，TCP首部长度是可变的。(但是通常选项为空，TCP头部典型长度为20字节，所以首部长度通常为5，即1001).<br>  16位窗口大小：用来表示想要收到的每个TCP数据段的大小。TCP的流量控制由连接的每一端通过声明窗口的大小来提供。窗口的大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接收到的字节。窗口的大小是一个16字节字段，因而窗口大小最大为65535字节。<br>  16位检验和：16位TCP头部检验和。源主机基于数据内容计算一个数值，目的主机要和源主机计算的结果一致，从而验证数据的有效性。检验和覆盖的是整个的TCP报文段：这是一个强制性的字段，一定是由发送端计算和存储，并由接收端进行验证。</p>\n<p>  URG:紧急标志，为1时表示有效，紧急数据的最后一个字节由16bit的紧急数据指针字段指出。当紧急数据存在时，</p>\n<p>  ACK：确认标志。表明确认编号栏有效，大多数情况下该标识位是置位的。TCP报头内的确认编号栏内包含的确认编号(W+1)为下一个预期接收到的序列编号，同时提示远端系统已经成功的接收到了所有数据。</p>\n<p>  PSH：推标志。该标志置位时，接收端不将该数据进行队列处理，而是尽可能快地将数据转由应用处理(接收方立即将数据交给上层)。在处理Telnet或rlogin等交互模式的连接时，该标志总是置位的。</p>\n<p>  RST：复位标志。用于复位(重置)相应的TCP连接。</p>\n<p>  SYN：同步标志。表明同步序列编号栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端（一般是客户端）的初始序列编号。</p>\n<p>  FIN：结束标志。</p>\n<p>  TCP三次握手建立连接</p>\n<p>  三次握手(Three-Way Handshake)即建立TCP连接时，需要客户端和服务端总共发送3个包确认连接的建立。在socket编程中，这一过程由客户端执行connect()来触发。流程如下：</p>\n<p>  TCP三次握手</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6128001-8792a019aa614726.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TCP三次握手\"></p>\n<p>  第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p>\n<p>  第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。<br>  第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。(前两次握手是是不承载”有效载荷”的，而第三次握手是可以承载”有效载荷”的。)</p>\n<p>  其中有一个半连接状态：服务器维护一个半连接队列，该队列为每个客户端SYN包开设一个条目，标明服务器已经接到SYN包，并向客户端发出确认，这些条目表示的连接处于SYN_RECV状态，得到客户端的确认后进入ESTABLISHED状态。</p>\n<p>  TCP四次挥手断开连接</p>\n<p>  四次挥手(Four-Way Wavehand)是指断开一个TCP连接时需要客户端和服务器总共发送四个包以确认连接的断开。在socket()编程中，这一个过程由客户端或者服务器端的任意一方执行close来触发。整个流程图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6128001-3ff5c16a6fe703de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TCP四次挥手\"></p>\n<p>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</p>\n<p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</p>\n<p>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</p>\n<p>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p>\n<p>  链接：<a href=\"http://www.jianshu.com/p/37d132327724\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/37d132327724</a></p>\n<ul>\n<li><p>TCP拥塞控制机制</p>\n<p>​         拥塞控制（congestion control)是TCP协议的一项重要功能，TCP的拥塞控制机制是从端到端的角度，推测网络是否发生拥塞，如果推断网络发生拥塞，则立即将数据发送速率降下来，以便缓解网络拥塞。<br>​         TCP的拥塞控制采用的是窗口机制，通过调节窗口的大小实现对数据发送速率的调整。TCP的发送端维持一个称为拥塞窗口cwnd的变量，单位为字节，用于表示在未收到接收端确认的情况下，可以连续发送的数据字节数。cwnd的大小取决于网络的拥塞程度，并且动态地发生变化。拥塞窗口调整的原则是：只要网络没有出现拥塞，就可以增大拥塞窗口，以便将更多的数据发送出去，相当于提高发送速率；一旦网络出现拥塞，拥塞窗口就减小一些，减少注入网络的数据量，从而缓解网络的拥塞。<br>​    发送端判断网络发生拥塞的依据是：发送端设置一个重传计时器RTO，对于某个已发出的数据报文段，如果在RTO计时到期后，还没有收到来自接收端的确认，则认为此时网络发生了拥塞。<br>TCP的拥塞控制算法包括了慢启动（slow start）、拥塞避免（congestion avoidance）、快速重传（fast retransmit）和快速恢复（fast recovery）四部分。<br>​    慢启动算法作用在TCP数据传输的开始阶段，当主机开始发送数据时，因为不知道网络中的负荷情况，如果立即发送大量的数据，有可能会引起网络的拥塞。因此，TCP采用试探的方法，逐渐增大拥塞窗口。通常在刚开始发送数据报文段时，先将拥塞窗口cwnd设置为一个TCP最大段长度MSS的值。而在每收到一个数据报文段的确认后，cwnd就增加一个MSS的数值。这样就可以逐渐增大发送端的拥塞窗口，使数据注入网络的速率比较合理。如果定义从发送端发出一个数据报文段到收到这个数据报文段的确认的时间间隔为往返时间RTT，则在慢启动阶段，每经过一个RTT，cwnd的值就加倍。<br>​    为了防止拥塞窗口增长过快而引起网络拥塞，TCP还需要设置一个慢启动阈值ssthresh，当拥塞窗口的值增加到ssthresh时，就要减缓拥塞窗口的增长速度，具体的做法是每经过一个RTT，拥塞窗口cwnd的值加1（单位为MSS），这样就可以使cwnd按线性规律缓慢增长，这个过程称之为“加性增加”（Additive Increase）算法。通常情况下，拥塞窗口cwnd的初值被设置为1，慢启动阈值ssthresh的初值被设置为16。当拥塞避免算法执行到某个时刻，发送端在规定时间内没有收到接收端的确认，即发生了网络超时，则意味着网络发生了拥塞。此时，发送端首先将ssthresh的值变为发生超时时cwnd值的一半，同时将cwnd的值置为1，重新执行慢启动算法。这样做的好处是，当网络频繁出现拥塞时，ssthresh下降得很快，可以大大减少注入网络中的数据报文段。通常称这个过程为“乘性减小”（MultiplicativeDecrease）算法。TCP中的“加性增加”和“乘性减小”算法合起来称为AIMD算法。<br>​    慢启动和拥塞避免是1988年提出的拥塞控制算法，1990年在此基础上又增加了快速重传和快速恢复两个算法。<br>快速重传算法的基本思想是：接收端每收到一个失序的数据报文段后就立即发出重复确认，以便更早地通知发送端有丢包的情况发生。假设在某个TCP数据传输过程中，接收端依次收到发送端发出的1号和2号数据报文段，并对这两个数据报文段发送确认后，没有按次序收到3号数据报文段，而是收到了4号，这时就需要立即向发送端发送一个2号数据报文段的确认，称为重复确认。同理，如果继续收到5号、6号数据报文段，接收端仍然要向发送端发出2号数据报文段的重复确认。此时，发送端会收到多个2号数据报文段的重复确认，则认为3号数据报文段发生了丢包，需要立即向接收端重传3号数据报文段，而不需要等待重传计时器到期再重传。快速重传算法中规定如果收到某数据报文段的三个重复确认，则立即重传下一个数据报文段。<br>​    快速恢复是配合快速重传使用的算法，其基本思想是：当发送端连续收到三个重复确认时，就将慢启动阈值ssthresh减半，以预防网络拥塞的发生，并且将拥塞窗口cwnd的值置为减半后的ssthresh，然后开始执行拥塞避免算法，使得cwnd缓慢地加性增大。</p>\n<p>TCP拥塞控制算法描述如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SlowStartPhase( )   //慢启动算法</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  CongWin=1；  //拥塞窗口cwnd的初值为1个MSS</span><br><span class=\"line\">  while (CongWin&lt;Threshold&amp;&amp; 无数据丢失) </span><br><span class=\"line\"> //当拥塞窗口小于慢启动阈值且没有发生丢包时</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  for each ACK</span><br><span class=\"line\">CongWin++;    //每收到一个确认数据报，拥塞窗口加1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (CongWin&gt;=Threshold) then</span><br><span class=\"line\">  CongestionAvoidancePhase( );</span><br><span class=\"line\"> //当拥塞窗口大于等于慢启动阈值时，启动拥塞避免算法；</span><br><span class=\"line\">  if (数据丢失) then</span><br><span class=\"line\">  DataLoss( );   // 丢包后的处理方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CongestionAvoidancePhase( )    // 拥塞避免算法</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  while (无数据丢失)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  for each RTT</span><br><span class=\"line\">CongWin=CongWin+1;     //每经过一个RTT，拥塞窗口加1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DataLoss( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DataLoss( )    //丢包后的处理方法</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  if (超时) then</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">Threshold=CongWin/2;</span><br><span class=\"line\">  CongWin=1;</span><br><span class=\"line\">  SlowStartPhase( );</span><br><span class=\"line\"> //如果发生超时，慢启动阈值置为当前拥塞窗口的一半，然后将拥塞窗口置1，开始执行拥塞避免算法。</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (3次重复确认) then</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">Threshold=CongWin/2;</span><br><span class=\"line\">      CongWin=CongWin/2;</span><br><span class=\"line\">      CongestionAvoidancePhase();</span><br><span class=\"line\">//如果收到3个重复的确认，则执行快速重传和快速恢复算法，慢启动阈值减小为拥塞窗口的一半，同时将拥塞窗口减半，开始拥塞避免算法</span><br></pre></td></tr></table></figure>\n<p>链接：<a href=\"http://www.jianshu.com/p/7d59f9292b03\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/7d59f9292b03</a></p>\n</li>\n</ul>\n<h2 id=\"7-网络安全方面\"><a href=\"#7-网络安全方面\" class=\"headerlink\" title=\"7.网络安全方面\"></a>7.网络安全方面</h2><ol>\n<li>SQL注入</li>\n</ol>\n<p>示例：</p>\n<p><code>sql_login = &quot;SELECT COUNT(*) FROM login WHERE userName= %s AND password=%s&quot; %(userName, password)</code>  </p>\n<p>此时若 <code>username = &#39;admin--&#39; 则不论password为什么都能登录</code></p>\n<p>解决方案：<code>sql_login = &quot;SELECT COUNT(*) FROM login WHERE userName= %s AND password=%s&quot;</code></p>\n<p>​          <code>values = (username, password)</code></p>\n<p>​          <code>cur.execute(sql_login, values)</code></p>\n<p>学习简单SQL注入：</p>\n<ul>\n<li><p>AND</p>\n<p>and 1=1 and 1=2</p>\n<ul>\n<li><p>猜表</p>\n<p>and 0 &lt; (select count(*) from admin)        —判断是否存在admin这张表</p>\n</li>\n<li><p>此类类似，通过使用 and来达到自己的查询目的</p>\n</li>\n</ul>\n</li>\n<li><p>;<br>;结束之前的SQL语句</p>\n</li>\n<li><p>–<br>忽略后面的语句</p>\n</li>\n<li><p>OR<br>使前面的判断失效<br>解决方案：<br> 绑定变量使用预编译语句是预防SQL注入的最佳方式，使用预编译的SQL语句语义不会发生改变，在SQL语句中，变量用问号?表示，黑客即使本事再大，也无法改变SQL语句的结构，像上面例子中，username变量传递的plhwin’ AND 1=1– hack参数，也只会当作username字符串来解释查询，从根本上杜绝了SQL注入攻击的发生。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>DDOS攻击</p>\n<p>DDOS的表现形式主要有两种，一种为流量攻击，主要是针对网络带宽的攻击，即大量攻击包导致网络带宽被阻塞，合法网络包被虚假的攻击包淹没而无法到达主机;另一种为资源耗尽攻击，主要是针对服务器主机的攻击，即通过大量攻击包导致主机的内存被耗尽或CPU被内核及应用程序占完而造成无法提供网络服务。</p>\n</li>\n<li><p>xss攻击<br>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@main_view.route(&apos;/test&apos;)</span><br><span class=\"line\">def test():</span><br><span class=\"line\">    test_data = &quot;zhaonan=guest&lt;script&gt;alert(&apos;attacked&apos;)&lt;/script&gt;&quot;</span><br><span class=\"line\">    return &apos;&apos;&apos;</span><br><span class=\"line\">    &lt;html&gt;</span><br><span class=\"line\">      &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;Home Page&lt;/title&gt;</span><br><span class=\"line\">      &lt;/head&gt;</span><br><span class=\"line\">      &lt;body&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, &apos;&apos;&apos; + test_data + &apos;&apos;&apos;&lt;/h1&gt;</span><br><span class=\"line\">      &lt;/body&gt;</span><br><span class=\"line\">    &lt;/html&gt;</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在网站上输入 localhost/test之后会显示一个attacked的弹窗</p>\n<ol start=\"4\">\n<li>CSRF攻击</li>\n</ol>\n<p>参考网站：<a href=\"http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a></p>\n<p><img src=\"http://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg\" alt=\"img\"></p>\n<p>防御：服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p>\n<ul>\n<li>Cookie Hashing(所有表单都包含同一个伪随机值)：</li>\n</ul>\n<p>　　这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:&gt;</p>\n<p>　　这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢….由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。</p>\n<ul>\n<li>验证码</li>\n</ul>\n<p>　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄….这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p>\n<p>  +　One-Time Tokens(不同的表单包含一个不同的伪随机值)</p>\n<p>　　在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。</p>\n<h2 id=\"8-SQL反模式\"><a href=\"#8-SQL反模式\" class=\"headerlink\" title=\"8. SQL反模式\"></a>8. SQL反模式</h2><ul>\n<li><p><strong>乱穿马路</strong></p>\n<p><strong>目标</strong>：存储多值属性</p>\n<p><strong>反模式</strong>：格式化的逗号分隔列表</p>\n<p><strong>坏处</strong>：</p>\n<ul>\n<li>索引显然是不能用了</li>\n<li>增加了查询的难度，这里的难度是说sql语句更难写了，只有及其少数的操作优化了，是哪个操作就显而易见了。</li>\n<li>列表的长度有限制，比如varchar的字段长度是有限的。</li>\n</ul>\n<p>​</p>\n<p><strong>解决方案</strong>：创建一张交叉表</p>\n<p><strong>示例</strong>：</p>\n<p>一个产品可能有多个联系人。<br>可以这样设计：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Contacts (</span><br><span class=\"line\">  product_id BIGINT UNSIGNED NOT NULL,</span><br><span class=\"line\">  account_id BIGINT UNSIGNED NOT NULL ,</span><br><span class=\"line\">  PRIMARY KEY (product_id,account_id),</span><br><span class=\"line\">  FOREIGN KEY (product_id) REFERENCES Products(product_id),</span><br><span class=\"line\">  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>好处</strong>：</p>\n<ul>\n<li>可以添加索引</li>\n<li>可以添加额外的信息，比如一些操作时间等</li>\n<li>主要联系人和次要联系人等都可以实现</li>\n</ul>\n</li>\n<li><p><strong>单纯的树</strong></p>\n<p>​    在树形结构中，实例被称为<strong>节点</strong>。每个节点都有多个子节点与一个父节点。</p>\n<p>​        最上层的节点叫做<strong>根（root）节点，</strong>它没有父节点。</p>\n<p>​        最底层的没有子节点的节点叫做<strong>叶（leaf）</strong>。</p>\n<p>​        中间的节点简单地称为<strong>非叶节点（nonleaf）</strong>。</p>\n<p><strong>目标：</strong>分层存储与查询，比如：系统字典、组织机构、省份区域等树形结构数据或者以层级方式组织的数据。</p>\n<p><strong>反模式：</strong>总是依赖父节点（使用邻接表）。</p>\n<p>​           最简单的实现方式是添加ParentId字段，引用同一张表的主键ID。</p>\n<p>​           邻接表维护树比较方便，但是查询很笨拙，如果要找一个节点下的所有子节点，要关联很多次，这个关联次数取决于树的深度，</p>\n<p>​           所以，邻接表不能用于存储比较深的树。</p>\n</li>\n</ul>\n<p>  <strong>如何识别反模式：</strong>当出现以下情况时，可能是反模式</p>\n<p>  ​        （1）我们的数结构要支持多少层</p>\n<p>  ​        （2）我们总是很害怕接触那些管理树结构的代码</p>\n<p>  　　 （3）我需要一个脚本来定期的清理树中的孤立节点数据</p>\n<p>   <strong>解决方案：</strong>使用其他树模型</p>\n<ul>\n<li><p>路径枚举：</p>\n<p>　　　　用一个path字段保存当前节点的最顶层的祖先到自己的序列(路径)</p>\n<p><img src=\"/home/tofar/图片/选区_002.png\" alt=\"选区_002\"></p>\n<p>　　　　优点：查询方便；</p>\n<p>　　　　缺点：1、不能保证存储的值的有效性。</p>\n<p>​                   2、增、删时，要考虑对原位置下的子节点如何处理，比较麻烦。</p>\n<p>​                   3、如果还要维护一个排序path，那就更麻烦了。</p>\n</li>\n<li><p>嵌套集：</p>\n<p>　　　　存储子孙节点的相关信息，而不是节点的直接祖先。用nsleft存储所有后台的nsleft中最小的数-1，</p>\n<p>​          用nsright存储所有后台的nsright中最大的数+1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Comments (</span><br><span class=\"line\">comment_id</span><br><span class=\"line\">SERIAL PRIMARY KEY,</span><br><span class=\"line\">nsleft</span><br><span class=\"line\">INTEGER NOT NULL,</span><br><span class=\"line\">nsright</span><br><span class=\"line\">INTEGER NOT NULL,</span><br><span class=\"line\">bug_id</span><br><span class=\"line\">BIGINT UNSIGNED NOT NULL,</span><br><span class=\"line\">author</span><br><span class=\"line\">BIGINT UNSIGNED NOT NULL,</span><br><span class=\"line\">comment_date DATETIME NOT NULL,</span><br><span class=\"line\">comment</span><br><span class=\"line\">TEXT NOT NULL,</span><br><span class=\"line\">FOREIGN KEY (bug_id) REFERENCES Bugs (bug_id),</span><br><span class=\"line\">FOREIGN KEY (author) REFERENCES Accounts(account_id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>　　　　优点：删除时，原来子节点的关系自动上移。</p>\n<p>　　　　缺点：1、查询一个节点的直接上级或下级，很困难。</p>\n<p>​                   2、增、删，困难。</p>\n</li>\n<li><p>闭包：记录了树中所有节点间的关系，而不仅仅是只有那些直接的父子关系。</p>\n<p>​             将树中任何具有<strong>“祖先-后代”</strong>关系的<strong>节点对</strong>都存储在TreePath表中的一行，同时增加一行指向节点自己。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Comments (</span><br><span class=\"line\">comment_id</span><br><span class=\"line\">SERIAL PRIMARY KEY,</span><br><span class=\"line\">bug_id</span><br><span class=\"line\">BIGINT UNSIGNED NOT NULL,</span><br><span class=\"line\">author</span><br><span class=\"line\">BIGINT UNSIGNED NOT NULL,</span><br><span class=\"line\">comment_date DATETIME NOT NULL,</span><br><span class=\"line\">comment</span><br><span class=\"line\">TEXT NOT NULL,</span><br><span class=\"line\">FOREIGN KEY (bug_id) REFERENCES Bugs(bug_id),</span><br><span class=\"line\">FOREIGN KEY (author) REFERENCES Accounts(account_id)</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE TreePaths (</span><br><span class=\"line\">ancestor</span><br><span class=\"line\">BIGINT UNSIGNED NOT NULL,</span><br><span class=\"line\">descendant BIGINT UNSIGNED NOT NULL,</span><br><span class=\"line\">PRIMARY KEY(ancestor, descendant),</span><br><span class=\"line\">FOREIGN KEY (ancestor) REFERENCES Comments(comment_id),</span><br><span class=\"line\">FOREIGN KEY (descendant) REFERENCES Comments(comment_id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p>​            优点：1、能快速的查询给定节点的祖先与后代；</p>\n<p>​                    2、能更加简单的维护分层信息；</p>\n<p>​                    3、如果删除了TreePath表中的一条记录，那么并不是真正的删除具体信息表中的记录。这样设计有时候很有用：</p>\n<p>比如在产品目录的分类或者员工组织架构的图标中，当你改变了节点关系的时候，并不是真的想要删除一个节点。</p>\n<p>​                        我们把关系路径存储在一个分开独立的表中，使得设计更加灵活。 </p>\n<p>​            缺点：查询直接父节点或子节点，需要在表中增加Path_Length字段来维护。</p>\n</li>\n</ul>\n<p>  <strong>结论：</strong></p>\n<p>  ​    每种设计各有优劣，如何选择设计依赖于应用程序中的哪种操作最需要性能上的优化。</p>\n<p>  ​         邻接表：简单，但不适用于很深的表； </p>\n<p>  　　  枚举路径：无法保证引用完整性；</p>\n<p>  　　  嵌套集：无法保证引用完整性，太复杂；</p>\n<p>  　　  闭包：需要一个额外的表存储关系；</p>\n<ul>\n<li><p><strong>需要ID</strong></p>\n<p><strong>目标</strong>：建立主键规范</p>\n<p><strong>反模式</strong>：以不变应万变，即每个数据库中的表都需要一个<strong>伪主键</strong>Id</p>\n<p>​    在表中，需要引入一个对于表的域模型无意义的新列来存储一个伪值，这一列被用作这张表的主键，从而通过它来确定表中的一条记录，即便其他的列允许出现适当的重复项。这种类型的主键列我们通常称其为“<strong>伪主键</strong>”或者“<strong>代理键</strong>”。</p>\n<ol>\n<li>冗余键值：如果存在一个逻辑上更为自然的主键并且也满足unique约束，那么id就多余了；</li>\n<li>允许重复项：伪主键本身确保了表的数据不会存在重复项，所以也就无法避免表中的其它数据出现重复项；</li>\n<li>意义不明的关键字：主键名应该便于理解，所以建议用XxxId，而不都是用Id；</li>\n<li>使用组合键。</li>\n</ol>\n<p><strong>如何识别反模式：</strong>当出现以下情况时，可能是反模式</p>\n<ol>\n<li>我觉得这张表不需要主键；</li>\n<li>我怎么能在多对多的表中存储重复的项；</li>\n<li>我学过《数据库设计理论》，里面说我应该把数据移动到一张查询表中，然后通过ID查找。但是我不想这么做，因为每次我想要获得真是的数据，都不得不做一次连接查询。（这在数据库设计中是一个常见的误区，称为“<strong>正规化</strong>”，然而实际中对于伪主键并没有什么需要做的）</li>\n</ol>\n<p><strong>解决方案：</strong></p>\n<ol>\n<li><p>直接了当的描述设计，主键名应该便于理解，所以建议用XxxId，而不都是用Id；</p>\n</li>\n<li><p>拥抱自然键和组合键。</p>\n<p>​</p>\n</li>\n</ol>\n</li>\n<li><p><strong>不用钥匙的入口（外键约束）</strong></p>\n<p><strong>目标：</strong>简化数据库架构</p>\n<p><strong>反模式：</strong>无视约束，即不使用约束</p>\n<p><strong>如何识别反模式：</strong>当出现以下情况时，可能是反模式</p>\n<p>​         1、我要怎么写这个查询来检查一个值是否没有被同时存在2张表中？</p>\n<p>​    （通常这样的需求是为了查找那些孤立的行数据）</p>\n<p>​         2、有没有一种简单的方法来判断在一张表中的数据是否也在第二张表中存在？</p>\n<p>​         （这么做是用来确认父记录切实存在。外键会自动完成这些，并且外键会使用这父表的索引尽可能的高效完成）</p>\n<p>​         3、有人说不要用外键，外键影响数据库效率。</p>\n<p><strong>解决方案：</strong>声明约束</p>\n<p>​      1、通过使用外键来确保应用完整性；</p>\n<p>​          使用约束时：</p>\n<p>​        （1）数据库本身会拒绝所有不合理的改变，无论这个改变是通过什么方式造成的。</p>\n<p>​                （2）能够避免编写不必要的代码，同时还能确保一旦修改了数据库中的内容，所有的代码依旧能够用同样的方式执行。    </p>\n<p>​                （3）外键的特性：级联更新，比如：On Update Cascade、On Delete Restrict等。 在执行更新和删除2个操作中的任意1个是，数据库都会自动修改多张表中的数据， 外键的引用状态在操作之前和之后都保持完好。</p>\n<p>​      2、外键约束的确需要多那么一点额外的系统开销，但相比于其他的一些选择，外键确实更高效一点：</p>\n<p>​          （1）不需要在更新或删除记录前执行Select检查；</p>\n<p>​          （2）在同步修改时不需要再锁住整张表；</p>\n<p>​          （3）不再需要执行定期监控脚本来修正不可避免的孤立数据。</p>\n<p>​</p>\n</li>\n<li><p><strong>实体-属性-值</strong></p>\n<p><strong>目标：</strong>支持可变属性</p>\n</li>\n</ul>\n<p>  <strong>反模式：</strong>使用泛型属性表。这种设计成为实体-属性-值（EAV），也可叫做开放架构、名-值对。</p>\n<p>  ​           优点：通过增加一张额外的表，可以有以下好处</p>\n<p>  ​                   （1）表中的列很少；</p>\n<p>  ​                   （2）新增属性时，不需要新增列。不会影响现有表的结构；</p>\n<p>  ​                   （3）存储的字段内容不会为空值。</p>\n<p>  ​           缺点：（1）查询语句变得更加复杂；</p>\n<p>  ​                   （2）使用EAV设计后，需要放弃传统的数据库设计所带来的方便之处，比如：无法保障数据完整性；</p>\n<p>  ​                   （3）无法使用SQL的数据类型，比如对日期、金钱等格式内容都只能保持为字符串类型；</p>\n<p>  ​                   （4）无法确保引用完整性；</p>\n<p>  ​                   （5）无法配置属性名。比如，有可能表中存在两条记录，</p>\n<p>  ​                                                       一条的attr_name是sex，一条attr_name是gender，都是表示性别；</p>\n<p>  ​                   （6）查询结果中有多个属性时，查询非常困难，且查询性能无法控制。</p>\n<p>  ​                   </p>\n<p>  <strong>如何识别反模式：</strong>当出现以下情况时，可能是反模式</p>\n<p>  　　（1）数据库不需要修改元数据库（表中的列属性）就可以扩展。还可以在运行时定义新的属性。</p>\n<p>  　　（2）查询是连接数量非常多，且连接的数量可能会达到数据库的限制时，你的数据库的设计可能是有问题的。</p>\n<p>  　　（3）普通的报表查询变的及其复杂甚至不且实际。</p>\n<p>  <strong>解决方案：</strong>模型化子类型</p>\n<p>  　　1、单表继承：所有属性都在一个单表上保存，增加属性时就扩充这个表。</p>\n<p>  ​            缺点：</p>\n<p>  ​        （1）当程序需要加入新对象时，必须修改数据库来适应这些新对象。又由于这些新对象具有一些和老对象                不用的属性， 因而必须在原有表里增加新的属性列，可能会遇到一个实际的问题，就是每张表的列的数量是有限制的。</p>\n<p>  ​                （2）没有任何的元信息来记录哪个属性属于哪个子类型。</p>\n<p>  ​    当数据的子类型很少，以及子类型特殊属性很少，就可以使用单表继承。</p>\n<p>  　　2、实体表继承：为每个子类型创建一张独立的表，每个表包含哪些属于基类的共有属性，同时也包含了子类型特殊化的属性。</p>\n<p>​               优点：</p>\n<p>  ​        （1）实体继承类设计相比于但表继承设计的优势在于提供了一种方法， 让你能组织在一行内存储一些和当前子类型无关的属性。如果你引用一个并不存在于这张表中的属性列，数据库会自动提示你错误。</p>\n<p>  ​                （2）不用像在单表继承设计里那样使用额外的属性来标记子类型。</p>\n<p>  ​             缺点：很难将通用属性和子类特有属性区分开来。因此，如果将一个新的属性增加到通用属性中，必须为每个子类表都添加一遍。</p>\n<p>  ​             当你很少需要一次性查询多有子类型时，实体继承表设计是最好的选择。</p>\n<p>  　　3、类表继承：把表当成面向对象里的类。</p>\n<p>​           创建一张基类表，包含所有子类型的公共属性。对于每个子类型，创建一个独立的表，通过外键和基类表相连。</p>\n<p>  　　4、半结构化数据模型：如果有很多子类型或者必须经常增加新的属性支持，那么可以用一个BLOB列来存储数据，用XML或者JSON格式——同事包含了属性的名字和值。这叫做序列化大对象块。</p>\n<p>  　　  这个设计的优势是扩展性，缺点是，这样的结构中sql无法获取某个指定的属性。你必须或者整个blob字段并通过程序去解释这些属性。</p>\n<p>  　　 当你需要绝对的灵活性时，可以使用这个方案。</p>\n<p>​         如果使用了EAV，那么可以先将全部属性取出，然后再做其他处理。</p>\n<ul>\n<li><p>多态关联</p>\n<p>​</p>\n</li>\n<li><p>多列属性</p>\n<p>​</p>\n</li>\n<li><p>元数据分裂</p>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"9-数据库设计的三范式\"><a href=\"#9-数据库设计的三范式\" class=\"headerlink\" title=\"9. 数据库设计的三范式\"></a>9. 数据库设计的三范式</h2><ul>\n<li>1NF：无重复的列，即每一列都是不可分割的基本数据项</li>\n</ul>\n<p>商品表 goods：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>price</th>\n<th>color</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>10</td>\n<td>red</td>\n</tr>\n<tr>\n<td>2</td>\n<td>20</td>\n<td>blue</td>\n</tr>\n<tr>\n<td>3</td>\n<td>30</td>\n<td>red, blue</td>\n</tr>\n</tbody>\n</table>\n<p>可以拆分为两个表，价格表和颜色表：<br>价格表 goods_price：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>price</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>10</td>\n</tr>\n<tr>\n<td>2</td>\n<td>20</td>\n</tr>\n<tr>\n<td>3</td>\n<td>30</td>\n</tr>\n</tbody>\n</table>\n<p>颜色表 goods_color</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>color</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>red</td>\n</tr>\n<tr>\n<td>2</td>\n<td>blue</td>\n</tr>\n<tr>\n<td>3</td>\n<td>red</td>\n</tr>\n<tr>\n<td>3</td>\n<td>blue</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>2NF：属性完全依赖于主键<br>如下表所示：学分依赖于课程，不依赖于主键学号<br>考试成绩表 exam：</p>\n<p>| 学号   | 姓名   | 课程   | 学分   | 成绩   |<br>| —- | —- | —- | —- | —- |<br>| 1    | Tom  | 数学   | 4    | 80   |<br>| 2    | Kate | 数学   | 4    | 90   |</p>\n</li>\n</ul>\n<p>可以拆分为三个表，学生信息表，课程表和考试成绩表：</p>\n<p>学生信息表 student：</p>\n<table>\n<thead>\n<tr>\n<th>学号</th>\n<th>姓名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Tom</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Kate</td>\n</tr>\n</tbody>\n</table>\n<p>课程表 course：</p>\n<table>\n<thead>\n<tr>\n<th>课程编号</th>\n<th>课程名</th>\n<th>学分</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n<td>数学</td>\n<td>4</td>\n</tr>\n<tr>\n<td>102</td>\n<td>语文</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>考试成绩表 exam：</p>\n<table>\n<thead>\n<tr>\n<th>学号</th>\n<th>课程编号</th>\n<th>成绩</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>101</td>\n<td>80</td>\n</tr>\n<tr>\n<td>2</td>\n<td>101</td>\n<td>90</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>3NF：属性不依赖于其他非主属性，即不能有冗余</p>\n<p>如下表所示：班主任手机依赖于班主任姓名 这个非主属性</p>\n</li>\n</ul>\n<p>学生信息表 student：</p>\n<table>\n<thead>\n<tr>\n<th>学号</th>\n<th>姓名</th>\n<th>班主任姓名</th>\n<th>班主任手机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Tom</td>\n<td>Lily</td>\n<td>138</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Kate</td>\n<td>Lily</td>\n<td>138</td>\n</tr>\n</tbody>\n</table>\n<p>可以拆分为两个表，学生信息表，班主任信息表：</p>\n<p>学生信息表 student：</p>\n<table>\n<thead>\n<tr>\n<th>学号</th>\n<th>姓名</th>\n<th>班主任姓名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Tom</td>\n<td>Lily</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Kate</td>\n<td>Lily</td>\n</tr>\n</tbody>\n</table>\n<p>班主任信息表 teacher：</p>\n<table>\n<thead>\n<tr>\n<th>班主任姓名</th>\n<th>班主任手机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Lily</td>\n<td>138</td>\n</tr>\n<tr>\n<td>Cat</td>\n<td>139</td>\n</tr>\n</tbody>\n</table>\n<p>链接：<a href=\"http://www.jianshu.com/p/841573f02f8e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/841573f02f8e</a></p>\n","categories":["学习笔记"],"tags":["学习笔记"]},{"title":"学习笔记1","url":"http://mu-mo.top/2017/10/21/学习笔记/学习笔记1/","content":"<ol>\n<li>机器学习相关 （列举这些大部分我只是了解，并没有使用，仅供学习）<ul>\n<li>机器学习的基本流程：确定研究问题——采集数据——人工标注（处理数据）——选择模型和算法——看结果调参数 根据我种子杯的经验，最重要的就是处理数据和选择模型两步，就种子杯的项目而言我想处理数据是最重要的，数据处理会决定最后结果的高度，模型主要是优化算法，虽然也影响最后结果，但是仅那种比较明了的项目而言，各种适用的模型效果可能没有数据处理的效果差异大。（仅个人想法，没有做过大项目，只做过一点种子杯）。</li>\n<li>机器学习数据预处理<ul>\n<li>归一化处理了</li>\n<li>降维 - PCA</li>\n<li>组合特征提取（GBDT)</li>\n<li>Eembed - L1正则化</li>\n<li>Filter 子集搜索</li>\n<li>Wrapper 搜索方法+学习算法</li>\n<li>……</li>\n</ul>\n</li>\n<li>机器学习的三种方式<ul>\n<li>有监督学习：类似与我知道一个问题的答案，所以我可以从这个答案问题出发设计出一个推理逻辑。</li>\n<li>无监督学习：类似于我给你一堆数据，你也不知道它是干什么用的，但是你或许可以找出这些数据中蕴含的某种规律</li>\n<li>半监督学习：大概就是综合利用有类标和无类标的数据来进行处理</li>\n</ul>\n</li>\n<li>机器学习常用方法<ul>\n<li>决策树</li>\n<li>神经网络</li>\n<li>支持向量机</li>\n<li>贝叶斯分类</li>\n<li>序列分析 聚类 分类</li>\n<li>最近邻，k近邻，改进近邻</li>\n</ul>\n</li>\n<li>机器学习相关模型<ul>\n<li>LR逻辑回归模型</li>\n<li>线性回归模型</li>\n<li>决策树</li>\n<li>随机森林</li>\n<li>RF、GBDT、XGBoost</li>\n<li>神经网络</li>\n<li>。。。</li>\n</ul>\n</li>\n<li>机器学习深入学习需了解的基本数学知识<ul>\n<li>线性代数</li>\n<li>微积分</li>\n<li>统计学/概率论</li>\n<li>信息论</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>nginx+ uwsgi + flask + python + linux + mysql 以前做过类似的配置，所以没有遇到大问题，暂时可以在本地使用postman调试通过，但是没有配置docker</li>\n<li>JWT<ul>\n<li>header eg. { “typ”: “JWT”, “alg”: “HS256” }</li>\n<li>payload 标准字段：<ul>\n<li>iss：Issuer 发行者</li>\n<li>sub：Subject 主题</li>\n<li>aud：Audience 观众</li>\n<li>exp：Expiration time 过期时间</li>\n<li>nbf：Not before</li>\n<li>iat：Issued at 发行时间</li>\n<li>jti：JWT ID eg. { “iss”: “ninghao.net”, “exp”: “1438955445”, “name”: “wanghao”, “admin”: true}</li>\n</ul>\n</li>\n<li>signature 这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 secret . 注：JWT会生成一个token客户端收到这个 token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 token 。服务端收到这个 token ，然后进行验证，通过以后就会返回给客户端想要的资源。</li>\n</ul>\n</li>\n<li>leetcode<ul>\n<li><a href=\"https://git.bingyan.net/tofar/leetcode.git\" target=\"_blank\" rel=\"noopener\">https://git.bingyan.net/tofar/leetcode.git</a></li>\n</ul>\n</li>\n<li>《HTTP权威指南》看完前三章，《计算机网络：自顶向下》看完第一章，但是看过之后没什么印象。。。</li>\n<li>Linux命令<ul>\n<li>ssh 远程连接</li>\n<li>scp 不同Linux系统之间的cp</li>\n<li>ps 获取程序运作情况</li>\n<li>netstat 显示网络相关的信息，如网络连接，路由表，接口状态</li>\n<li>chmod 改变文件存储模式</li>\n<li>uname 显示系统信息</li>\n<li>ping 测试网络连通</li>\n<li>kill 杀进程</li>\n<li>grep 正则搜索文本</li>\n<li>。。。</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>用Python flask 做了一个微信小程序的demo</li>\n<li>准备另一个团队机器学习的分享</li>\n</ul>\n</li>\n</ol>\n","categories":["学习笔记"],"tags":["学习笔记"]},{"title":"前后端json数据发送和接收","url":"http://mu-mo.top/2017/07/26/Python/前后端json数据发送和接收/","content":"<blockquote>\n<p>由于笔者后台使用的是flask框架接收和前端使用的是原生的JavaScript和jQuery的ajax发送，能力有限，在此仅写下我开发项目过程中所得，欢迎指正交流。</p>\n</blockquote>\n<h2 id=\"一、flask中的json数据接收\"><a href=\"#一、flask中的json数据接收\" class=\"headerlink\" title=\"一、flask中的json数据接收\"></a>一、flask中的json数据接收</h2><h3 id=\"1、利用flask的request-form-get-方法\"><a href=\"#1、利用flask的request-form-get-方法\" class=\"headerlink\" title=\"1、利用flask的request.form.get()方法\"></a>1、利用flask的request.form.get()方法</h3><p>Python后台部分代码<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> jsonify</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/flask/login\", methods=['POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data_ = request.form.get(<span class=\"string\">'data'</span>)</span><br><span class=\"line\">    data = json.loads(data)</span><br><span class=\"line\">    username = data[<span class=\"string\">'username'</span>]</span><br><span class=\"line\">    password = data[<span class=\"string\">'password'</span>]</span><br><span class=\"line\">    rem = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> data[<span class=\"string\">'remember'</span>]:</span><br><span class=\"line\">        rem = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">\"login\"</span>: Login.login(username, password, rem)&#125;)  <span class=\"comment\"># 返回布尔值</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、-利用flask的request-get-data-方法\"><a href=\"#2、-利用flask的request-get-data-方法\" class=\"headerlink\" title=\"2、 利用flask的request.get_data()方法\"></a>2、 利用flask的request.get_data()方法</h3><p>Python后台代码<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> jsonify</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/flask/login\", methods=['POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data = request.get_data()</span><br><span class=\"line\">    data = json.loads(data)</span><br><span class=\"line\">    username = data[<span class=\"string\">'username'</span>]</span><br><span class=\"line\">    password = data[<span class=\"string\">'password'</span>]</span><br><span class=\"line\">    rem = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> data[<span class=\"string\">'remember'</span>]:</span><br><span class=\"line\">        rem = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">\"login\"</span>: Login.login(username, password, rem)&#125;)  <span class=\"comment\"># 返回布尔值</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3、利用flask的request-get-json-方法\"><a href=\"#3、利用flask的request-get-json-方法\" class=\"headerlink\" title=\"3、利用flask的request.get_json()方法\"></a>3、利用flask的request.get_json()方法</h3><p>Python后台代码<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> jsonify</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/flask/login\", methods=['POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data = request.get_json()</span><br><span class=\"line\">    username = data[<span class=\"string\">'username'</span>]</span><br><span class=\"line\">    password = data[<span class=\"string\">'password'</span>]</span><br><span class=\"line\">    rem = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> data[<span class=\"string\">'remember'</span>]:</span><br><span class=\"line\">        rem = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">\"login\"</span>: Login.login(username, password, rem)&#125;)  <span class=\"comment\"># 返回布尔值</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、前端发送json数据\"><a href=\"#二、前端发送json数据\" class=\"headerlink\" title=\"二、前端发送json数据\"></a>二、前端发送json数据</h2><h3 id=\"1、原生XMLHttp发送\"><a href=\"#1、原生XMLHttp发送\" class=\"headerlink\" title=\"1、原生XMLHttp发送\"></a>1、原生XMLHttp发送</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> username =<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"username\"</span>).value;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> password = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"password\"</span>).value;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> remember =<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"remember\"</span>).checked;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xmlhttp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class=\"line\">        xmlhttp=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IE6, IE5 浏览器执行代码</span></span><br><span class=\"line\">        xmlhttp=<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xmlhttp.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xmlhttp.readyState===<span class=\"number\">4</span> &amp;&amp; xmlhttp.status===<span class=\"number\">200</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    xmlhttp.open(<span class=\"string\">\"POST\"</span>,<span class=\"string\">\"/flask/login\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    xmlhttp.setRequestHeader(<span class=\"string\">\"Content-type\"</span>,<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 后面这两部很重要，我看网上很多都是使用xmlhttp.send(\"username=\"+username+\"&amp;password=\"+\"),这样接收还要解析一番感觉还是直接发送以下格式的好些</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"username\"</span>: username</span><br><span class=\"line\">        <span class=\"string\">\"password\"</span>: password</span><br><span class=\"line\">        <span class=\"string\">\"remember\"</span>: remember</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data_json = <span class=\"built_in\">JSON</span>.stringify(data);</span><br><span class=\"line\">    xmlhttp.send(data_json);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>附：json数据解析<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = xmlhttp.responseText;</span><br><span class=\"line\"><span class=\"comment\">//  通过eval() 方法将json格式的字符串转化为js对象，并进行解析获取内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+text+<span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             alert(<span class=\"string\">\"请输入正确的用户名和密码\"</span>);</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、ajax发送\"><a href=\"#2、ajax发送\" class=\"headerlink\" title=\"2、ajax发送\"></a>2、ajax发送</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(document).ready(function () &#123;</span><br><span class=\"line\">   var data = &#123;</span><br><span class=\"line\">   &quot;username&quot;: &quot;adamin&quot;,</span><br><span class=\"line\">   &quot;password&quot;: &quot;123456789&quot;,</span><br><span class=\"line\">   &quot;remember&quot;: true</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   $.ajax(&#123;</span><br><span class=\"line\">       url: &quot;/flask/login&quot;,</span><br><span class=\"line\">       type: &quot;POST&quot;,</span><br><span class=\"line\">       data: data,</span><br><span class=\"line\">       success: function () &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n","categories":["Python"],"tags":["Python","flask","js","ajax"]},{"title":"Raft 学习传送门","url":"http://mu-mo.top/2017/01/01/分布式/Raft学习传送门/","content":"<p><strong><a href=\"https://raft.github.io/\" target=\"_blank\" rel=\"noopener\">Raft官网</a></strong></p>\n<ul>\n<li><a href=\"https://raft.github.io/\" target=\"_blank\" rel=\"noopener\">官方可视化动画1</a> </li>\n</ul>\n<ul>\n<li><a href=\"http://thesecretlivesofdata.com/raft/\" target=\"_blank\" rel=\"noopener\">官方可视化动画2</a></li>\n</ul>\n<p><strong><a href=\"https://github.com/maemual/raft-zh_cn/blob/master/raft-zh_cn.md\" target=\"_blank\" rel=\"noopener\">论文中文翻译</a></strong></p>\n<p><a href=\"https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf\" target=\"_blank\" rel=\"noopener\">论文英文地址</a></p>\n<p><a href=\"https://www.jianshu.com/p/6d01a8d2df9f\" target=\"_blank\" rel=\"noopener\">Paxos Made Simple论文翻译</a></p>\n<p><strong><a href=\"https://www.jianshu.com/p/4711c4c32aab\" target=\"_blank\" rel=\"noopener\">Raft理解</a></strong></p>\n<p><a href=\"http://xiaorui.cc/2016/07/08/%e6%8a%80%e6%9c%af%e5%88%86%e4%ba%ab-%e3%80%8a%e5%88%86%e5%b8%83%e5%bc%8f%e4%b8%80%e8%87%b4%e6%80%a7%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86%e3%80%8b/\" target=\"_blank\" rel=\"noopener\">技术分享 《分布式一致性raft算法实现原理》</a></p>\n<p><a href=\"https://www.jianshu.com/p/542262237d55\" target=\"_blank\" rel=\"noopener\">状态机</a></p>\n<p>MIT：</p>\n<p><strong><a href=\"https://www.jianshu.com/p/fcda437e560a\" target=\"_blank\" rel=\"noopener\">raft实现</a></strong></p>\n<p><a href=\"http://www.th7.cn/system/lin/201710/231591.shtml\" target=\"_blank\" rel=\"noopener\">分布式系统学习2-Raft算法分析与实现</a></p>\n<p><a href=\"http://blog.csdn.net/hellochenlu/article/details/52142621\" target=\"_blank\" rel=\"noopener\">分布式系统MIT 6.824学习资源</a></p>\n<p>知乎大神的：<a href=\"https://zhuanlan.zhihu.com/p/26506491\" target=\"_blank\" rel=\"noopener\">Raft实现指南</a></p>\n<p><a href=\"http://nil.csail.mit.edu/6.824/2016/labs/lab-raft.html\" target=\"_blank\" rel=\"noopener\">mit-6.824 Lab 2: Raft</a></p>\n<p><a href=\"https://thesquareplanet.com/blog/students-guide-to-raft/\" target=\"_blank\" rel=\"noopener\">Students’ Guide to Raft </a></p>\n<p>MIT 课程 代码：</p>\n<p><a href=\"https://github.com/Zhang626/MIT-6.824-2016\" target=\"_blank\" rel=\"noopener\">Zhang626/<em>MIT</em>-<em>6</em>.<em>824</em>-2016</a></p>\n<p><a href=\"https://github.com/jeffjzx/mit-6.824-labs-2016\" target=\"_blank\" rel=\"noopener\">jeffjzx/<em>mit</em>-<em>6</em>.<em>824</em>-labs-2016</a></p>\n<p><a href=\"https://github.com/keen-learner/MIT-6.824-2017\" target=\"_blank\" rel=\"noopener\">keen-learner/<em>MIT</em>-<em>6</em>.<em>824</em>-2017</a></p>\n<p><a href=\"https://github.com/happyer/distributed-computing\" target=\"_blank\" rel=\"noopener\">分布式系统</a></p>\n","categories":["分布式"],"tags":["portal","分布式"]},{"title":"","url":"http://mu-mo.top/README.html","content":"<h1 id=\"博客说明\"><a href=\"#博客说明\" class=\"headerlink\" title=\"博客说明\"></a>博客说明</h1><p>模板：HEXO</p>\n<p>网址：<a href=\"https://tofar.github.io\" target=\"_blank\" rel=\"noopener\">https://tofar.github.io</a></p>\n","categories":[],"tags":[]},{"title":"about","url":"http://mu-mo.top/about/index.html","content":"","categories":[],"tags":[]},{"title":"categories","url":"http://mu-mo.top/categories/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://mu-mo.top/css/personal-style.css","content":"@font-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\nhtml.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  /*background-image: url('/images/bg.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;*/\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n\n\n/*html.page-home body {\n  background: transparent;\n}*/","categories":[],"tags":[]},{"title":"link","url":"http://mu-mo.top/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://mu-mo.top/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://mu-mo.top/search/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://mu-mo.top/tags/index.html","content":"","categories":[],"tags":[]}]